
pipboy2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ed4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000920  08005074  08005074  00015074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005994  08005994  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  08005994  08005994  00015994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800599c  0800599c  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800599c  0800599c  0001599c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059a0  080059a0  000159a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  080059a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  200000d4  08005a78  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08005a78  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb80  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e9e  00000000  00000000  0002bc84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  0002db28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000808  00000000  00000000  0002e430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016de9  00000000  00000000  0002ec38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b69e  00000000  00000000  00045a21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fe1f  00000000  00000000  000510bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e0ede  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002764  00000000  00000000  000e0f34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d4 	.word	0x200000d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800505c 	.word	0x0800505c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000d8 	.word	0x200000d8
 80001dc:	0800505c 	.word	0x0800505c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <ILI9341_Write_Command>:



/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
	DISP_DC_CMD;
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000588:	4810      	ldr	r0, [pc, #64]	; (80005cc <ILI9341_Write_Command+0x54>)
 800058a:	f003 f86b 	bl	8003664 <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 800058e:	2200      	movs	r2, #0
 8000590:	2180      	movs	r1, #128	; 0x80
 8000592:	480e      	ldr	r0, [pc, #56]	; (80005cc <ILI9341_Write_Command+0x54>)
 8000594:	f003 f866 	bl	8003664 <HAL_GPIO_WritePin>
	DISP_SPI->DR = Command;
 8000598:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <ILI9341_Write_Command+0x58>)
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	60d3      	str	r3, [r2, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 800059e:	bf00      	nop
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <ILI9341_Write_Command+0x58>)
 80005a2:	689b      	ldr	r3, [r3, #8]
 80005a4:	f003 0302 	and.w	r3, r3, #2
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d0f9      	beq.n	80005a0 <ILI9341_Write_Command+0x28>
	while(DISP_SPI->SR & SPI_SR_BSY);
 80005ac:	bf00      	nop
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <ILI9341_Write_Command+0x58>)
 80005b0:	689b      	ldr	r3, [r3, #8]
 80005b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d1f9      	bne.n	80005ae <ILI9341_Write_Command+0x36>
	DISP_CS_UNSELECT;
 80005ba:	2201      	movs	r2, #1
 80005bc:	2180      	movs	r1, #128	; 0x80
 80005be:	4803      	ldr	r0, [pc, #12]	; (80005cc <ILI9341_Write_Command+0x54>)
 80005c0:	f003 f850 	bl	8003664 <HAL_GPIO_WritePin>
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40020400 	.word	0x40020400
 80005d0:	40013000 	.word	0x40013000

080005d4 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
	DISP_DC_DATA;
 80005de:	2201      	movs	r2, #1
 80005e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e4:	4810      	ldr	r0, [pc, #64]	; (8000628 <ILI9341_Write_Data+0x54>)
 80005e6:	f003 f83d 	bl	8003664 <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 80005ea:	2200      	movs	r2, #0
 80005ec:	2180      	movs	r1, #128	; 0x80
 80005ee:	480e      	ldr	r0, [pc, #56]	; (8000628 <ILI9341_Write_Data+0x54>)
 80005f0:	f003 f838 	bl	8003664 <HAL_GPIO_WritePin>
	DISP_SPI->DR = Data;
 80005f4:	4a0d      	ldr	r2, [pc, #52]	; (800062c <ILI9341_Write_Data+0x58>)
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	60d3      	str	r3, [r2, #12]
 	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80005fa:	bf00      	nop
 80005fc:	4b0b      	ldr	r3, [pc, #44]	; (800062c <ILI9341_Write_Data+0x58>)
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	f003 0302 	and.w	r3, r3, #2
 8000604:	2b00      	cmp	r3, #0
 8000606:	d0f9      	beq.n	80005fc <ILI9341_Write_Data+0x28>
 	while(DISP_SPI->SR & SPI_SR_BSY);
 8000608:	bf00      	nop
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <ILI9341_Write_Data+0x58>)
 800060c:	689b      	ldr	r3, [r3, #8]
 800060e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000612:	2b00      	cmp	r3, #0
 8000614:	d1f9      	bne.n	800060a <ILI9341_Write_Data+0x36>
	DISP_CS_UNSELECT;
 8000616:	2201      	movs	r2, #1
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	4803      	ldr	r0, [pc, #12]	; (8000628 <ILI9341_Write_Data+0x54>)
 800061c:	f003 f822 	bl	8003664 <HAL_GPIO_WritePin>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40020400 	.word	0x40020400
 800062c:	40013000 	.word	0x40013000

08000630 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	4604      	mov	r4, r0
 8000638:	4608      	mov	r0, r1
 800063a:	4611      	mov	r1, r2
 800063c:	461a      	mov	r2, r3
 800063e:	4623      	mov	r3, r4
 8000640:	80fb      	strh	r3, [r7, #6]
 8000642:	4603      	mov	r3, r0
 8000644:	80bb      	strh	r3, [r7, #4]
 8000646:	460b      	mov	r3, r1
 8000648:	807b      	strh	r3, [r7, #2]
 800064a:	4613      	mov	r3, r2
 800064c:	803b      	strh	r3, [r7, #0]
	DISP_DC_CMD;
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000654:	4864      	ldr	r0, [pc, #400]	; (80007e8 <ILI9341_Set_Address+0x1b8>)
 8000656:	f003 f805 	bl	8003664 <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 800065a:	2200      	movs	r2, #0
 800065c:	2180      	movs	r1, #128	; 0x80
 800065e:	4862      	ldr	r0, [pc, #392]	; (80007e8 <ILI9341_Set_Address+0x1b8>)
 8000660:	f003 f800 	bl	8003664 <HAL_GPIO_WritePin>

	DISP_SPI->DR = 0x2A;
 8000664:	4b61      	ldr	r3, [pc, #388]	; (80007ec <ILI9341_Set_Address+0x1bc>)
 8000666:	222a      	movs	r2, #42	; 0x2a
 8000668:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 800066a:	bf00      	nop
 800066c:	4b5f      	ldr	r3, [pc, #380]	; (80007ec <ILI9341_Set_Address+0x1bc>)
 800066e:	689b      	ldr	r3, [r3, #8]
 8000670:	f003 0302 	and.w	r3, r3, #2
 8000674:	2b00      	cmp	r3, #0
 8000676:	d0f9      	beq.n	800066c <ILI9341_Set_Address+0x3c>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8000678:	bf00      	nop
 800067a:	4b5c      	ldr	r3, [pc, #368]	; (80007ec <ILI9341_Set_Address+0x1bc>)
 800067c:	689b      	ldr	r3, [r3, #8]
 800067e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000682:	2b00      	cmp	r3, #0
 8000684:	d1f9      	bne.n	800067a <ILI9341_Set_Address+0x4a>

	DISP_DC_DATA;
 8000686:	2201      	movs	r2, #1
 8000688:	f44f 7100 	mov.w	r1, #512	; 0x200
 800068c:	4856      	ldr	r0, [pc, #344]	; (80007e8 <ILI9341_Set_Address+0x1b8>)
 800068e:	f002 ffe9 	bl	8003664 <HAL_GPIO_WritePin>
	DISP_SPI->DR = (uint8_t)(X1 >> 8);
 8000692:	88fb      	ldrh	r3, [r7, #6]
 8000694:	0a1b      	lsrs	r3, r3, #8
 8000696:	b29b      	uxth	r3, r3
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b54      	ldr	r3, [pc, #336]	; (80007ec <ILI9341_Set_Address+0x1bc>)
 800069c:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 800069e:	bf00      	nop
 80006a0:	4b52      	ldr	r3, [pc, #328]	; (80007ec <ILI9341_Set_Address+0x1bc>)
 80006a2:	689b      	ldr	r3, [r3, #8]
 80006a4:	f003 0302 	and.w	r3, r3, #2
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d0f9      	beq.n	80006a0 <ILI9341_Set_Address+0x70>
	DISP_SPI->DR = (uint8_t)X1;
 80006ac:	88fb      	ldrh	r3, [r7, #6]
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	4b4e      	ldr	r3, [pc, #312]	; (80007ec <ILI9341_Set_Address+0x1bc>)
 80006b2:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80006b4:	bf00      	nop
 80006b6:	4b4d      	ldr	r3, [pc, #308]	; (80007ec <ILI9341_Set_Address+0x1bc>)
 80006b8:	689b      	ldr	r3, [r3, #8]
 80006ba:	f003 0302 	and.w	r3, r3, #2
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d0f9      	beq.n	80006b6 <ILI9341_Set_Address+0x86>
	DISP_SPI->DR = (uint8_t)(X2 >> 8);
 80006c2:	887b      	ldrh	r3, [r7, #2]
 80006c4:	0a1b      	lsrs	r3, r3, #8
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	4b48      	ldr	r3, [pc, #288]	; (80007ec <ILI9341_Set_Address+0x1bc>)
 80006cc:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80006ce:	bf00      	nop
 80006d0:	4b46      	ldr	r3, [pc, #280]	; (80007ec <ILI9341_Set_Address+0x1bc>)
 80006d2:	689b      	ldr	r3, [r3, #8]
 80006d4:	f003 0302 	and.w	r3, r3, #2
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d0f9      	beq.n	80006d0 <ILI9341_Set_Address+0xa0>
	DISP_SPI->DR = (uint8_t)X2;
 80006dc:	887b      	ldrh	r3, [r7, #2]
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	4b42      	ldr	r3, [pc, #264]	; (80007ec <ILI9341_Set_Address+0x1bc>)
 80006e2:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80006e4:	bf00      	nop
 80006e6:	4b41      	ldr	r3, [pc, #260]	; (80007ec <ILI9341_Set_Address+0x1bc>)
 80006e8:	689b      	ldr	r3, [r3, #8]
 80006ea:	f003 0302 	and.w	r3, r3, #2
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0f9      	beq.n	80006e6 <ILI9341_Set_Address+0xb6>
	while(DISP_SPI->SR & SPI_SR_BSY);
 80006f2:	bf00      	nop
 80006f4:	4b3d      	ldr	r3, [pc, #244]	; (80007ec <ILI9341_Set_Address+0x1bc>)
 80006f6:	689b      	ldr	r3, [r3, #8]
 80006f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d1f9      	bne.n	80006f4 <ILI9341_Set_Address+0xc4>

	DISP_DC_CMD;
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000706:	4838      	ldr	r0, [pc, #224]	; (80007e8 <ILI9341_Set_Address+0x1b8>)
 8000708:	f002 ffac 	bl	8003664 <HAL_GPIO_WritePin>
	DISP_SPI->DR = 0x2B;
 800070c:	4b37      	ldr	r3, [pc, #220]	; (80007ec <ILI9341_Set_Address+0x1bc>)
 800070e:	222b      	movs	r2, #43	; 0x2b
 8000710:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000712:	bf00      	nop
 8000714:	4b35      	ldr	r3, [pc, #212]	; (80007ec <ILI9341_Set_Address+0x1bc>)
 8000716:	689b      	ldr	r3, [r3, #8]
 8000718:	f003 0302 	and.w	r3, r3, #2
 800071c:	2b00      	cmp	r3, #0
 800071e:	d0f9      	beq.n	8000714 <ILI9341_Set_Address+0xe4>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8000720:	bf00      	nop
 8000722:	4b32      	ldr	r3, [pc, #200]	; (80007ec <ILI9341_Set_Address+0x1bc>)
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072a:	2b00      	cmp	r3, #0
 800072c:	d1f9      	bne.n	8000722 <ILI9341_Set_Address+0xf2>

	DISP_DC_DATA;
 800072e:	2201      	movs	r2, #1
 8000730:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000734:	482c      	ldr	r0, [pc, #176]	; (80007e8 <ILI9341_Set_Address+0x1b8>)
 8000736:	f002 ff95 	bl	8003664 <HAL_GPIO_WritePin>
	DISP_SPI->DR = (uint8_t)(Y1 >> 8);
 800073a:	88bb      	ldrh	r3, [r7, #4]
 800073c:	0a1b      	lsrs	r3, r3, #8
 800073e:	b29b      	uxth	r3, r3
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4b2a      	ldr	r3, [pc, #168]	; (80007ec <ILI9341_Set_Address+0x1bc>)
 8000744:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000746:	bf00      	nop
 8000748:	4b28      	ldr	r3, [pc, #160]	; (80007ec <ILI9341_Set_Address+0x1bc>)
 800074a:	689b      	ldr	r3, [r3, #8]
 800074c:	f003 0302 	and.w	r3, r3, #2
 8000750:	2b00      	cmp	r3, #0
 8000752:	d0f9      	beq.n	8000748 <ILI9341_Set_Address+0x118>
	DISP_SPI->DR = (uint8_t)Y1;
 8000754:	88bb      	ldrh	r3, [r7, #4]
 8000756:	b2da      	uxtb	r2, r3
 8000758:	4b24      	ldr	r3, [pc, #144]	; (80007ec <ILI9341_Set_Address+0x1bc>)
 800075a:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 800075c:	bf00      	nop
 800075e:	4b23      	ldr	r3, [pc, #140]	; (80007ec <ILI9341_Set_Address+0x1bc>)
 8000760:	689b      	ldr	r3, [r3, #8]
 8000762:	f003 0302 	and.w	r3, r3, #2
 8000766:	2b00      	cmp	r3, #0
 8000768:	d0f9      	beq.n	800075e <ILI9341_Set_Address+0x12e>
	DISP_SPI->DR = (uint8_t)(Y2 >> 8);
 800076a:	883b      	ldrh	r3, [r7, #0]
 800076c:	0a1b      	lsrs	r3, r3, #8
 800076e:	b29b      	uxth	r3, r3
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4b1e      	ldr	r3, [pc, #120]	; (80007ec <ILI9341_Set_Address+0x1bc>)
 8000774:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000776:	bf00      	nop
 8000778:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <ILI9341_Set_Address+0x1bc>)
 800077a:	689b      	ldr	r3, [r3, #8]
 800077c:	f003 0302 	and.w	r3, r3, #2
 8000780:	2b00      	cmp	r3, #0
 8000782:	d0f9      	beq.n	8000778 <ILI9341_Set_Address+0x148>
	DISP_SPI->DR = (uint8_t)Y2;
 8000784:	883b      	ldrh	r3, [r7, #0]
 8000786:	b2da      	uxtb	r2, r3
 8000788:	4b18      	ldr	r3, [pc, #96]	; (80007ec <ILI9341_Set_Address+0x1bc>)
 800078a:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 800078c:	bf00      	nop
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <ILI9341_Set_Address+0x1bc>)
 8000790:	689b      	ldr	r3, [r3, #8]
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	2b00      	cmp	r3, #0
 8000798:	d0f9      	beq.n	800078e <ILI9341_Set_Address+0x15e>
	while(DISP_SPI->SR & SPI_SR_BSY);
 800079a:	bf00      	nop
 800079c:	4b13      	ldr	r3, [pc, #76]	; (80007ec <ILI9341_Set_Address+0x1bc>)
 800079e:	689b      	ldr	r3, [r3, #8]
 80007a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d1f9      	bne.n	800079c <ILI9341_Set_Address+0x16c>

	DISP_DC_CMD;
 80007a8:	2200      	movs	r2, #0
 80007aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ae:	480e      	ldr	r0, [pc, #56]	; (80007e8 <ILI9341_Set_Address+0x1b8>)
 80007b0:	f002 ff58 	bl	8003664 <HAL_GPIO_WritePin>
	DISP_SPI->DR = 0x2C;
 80007b4:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <ILI9341_Set_Address+0x1bc>)
 80007b6:	222c      	movs	r2, #44	; 0x2c
 80007b8:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80007ba:	bf00      	nop
 80007bc:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <ILI9341_Set_Address+0x1bc>)
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	f003 0302 	and.w	r3, r3, #2
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d0f9      	beq.n	80007bc <ILI9341_Set_Address+0x18c>
	while(DISP_SPI->SR & SPI_SR_BSY);
 80007c8:	bf00      	nop
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <ILI9341_Set_Address+0x1bc>)
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d1f9      	bne.n	80007ca <ILI9341_Set_Address+0x19a>
	DISP_CS_UNSELECT;
 80007d6:	2201      	movs	r2, #1
 80007d8:	2180      	movs	r1, #128	; 0x80
 80007da:	4803      	ldr	r0, [pc, #12]	; (80007e8 <ILI9341_Set_Address+0x1b8>)
 80007dc:	f002 ff42 	bl	8003664 <HAL_GPIO_WritePin>
}
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd90      	pop	{r4, r7, pc}
 80007e8:	40020400 	.word	0x40020400
 80007ec:	40013000 	.word	0x40013000

080007f0 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	DISP_RST_RESET;
 80007f4:	2200      	movs	r2, #0
 80007f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007fa:	480b      	ldr	r0, [pc, #44]	; (8000828 <ILI9341_Reset+0x38>)
 80007fc:	f002 ff32 	bl	8003664 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000800:	20c8      	movs	r0, #200	; 0xc8
 8000802:	f001 fe61 	bl	80024c8 <HAL_Delay>
	DISP_CS_SELECT;
 8000806:	2200      	movs	r2, #0
 8000808:	2180      	movs	r1, #128	; 0x80
 800080a:	4807      	ldr	r0, [pc, #28]	; (8000828 <ILI9341_Reset+0x38>)
 800080c:	f002 ff2a 	bl	8003664 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000810:	20c8      	movs	r0, #200	; 0xc8
 8000812:	f001 fe59 	bl	80024c8 <HAL_Delay>
	DISP_RST_WORK;
 8000816:	2201      	movs	r2, #1
 8000818:	f44f 7180 	mov.w	r1, #256	; 0x100
 800081c:	4802      	ldr	r0, [pc, #8]	; (8000828 <ILI9341_Reset+0x38>)
 800081e:	f002 ff21 	bl	8003664 <HAL_GPIO_WritePin>
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40020400 	.word	0x40020400

0800082c <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
	DISP_DC_CMD;
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 7100 	mov.w	r1, #512	; 0x200
 800083c:	482e      	ldr	r0, [pc, #184]	; (80008f8 <ILI9341_Set_Rotation+0xcc>)
 800083e:	f002 ff11 	bl	8003664 <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 8000842:	2200      	movs	r2, #0
 8000844:	2180      	movs	r1, #128	; 0x80
 8000846:	482c      	ldr	r0, [pc, #176]	; (80008f8 <ILI9341_Set_Rotation+0xcc>)
 8000848:	f002 ff0c 	bl	8003664 <HAL_GPIO_WritePin>
	DISP_SPI->DR = 0x36;
 800084c:	4b2b      	ldr	r3, [pc, #172]	; (80008fc <ILI9341_Set_Rotation+0xd0>)
 800084e:	2236      	movs	r2, #54	; 0x36
 8000850:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000852:	bf00      	nop
 8000854:	4b29      	ldr	r3, [pc, #164]	; (80008fc <ILI9341_Set_Rotation+0xd0>)
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	f003 0302 	and.w	r3, r3, #2
 800085c:	2b00      	cmp	r3, #0
 800085e:	d0f9      	beq.n	8000854 <ILI9341_Set_Rotation+0x28>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8000860:	bf00      	nop
 8000862:	4b26      	ldr	r3, [pc, #152]	; (80008fc <ILI9341_Set_Rotation+0xd0>)
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1f9      	bne.n	8000862 <ILI9341_Set_Rotation+0x36>
	DISP_CS_UNSELECT;
 800086e:	2201      	movs	r2, #1
 8000870:	2180      	movs	r1, #128	; 0x80
 8000872:	4821      	ldr	r0, [pc, #132]	; (80008f8 <ILI9341_Set_Rotation+0xcc>)
 8000874:	f002 fef6 	bl	8003664 <HAL_GPIO_WritePin>

	switch(Rotation)
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	2b03      	cmp	r3, #3
 800087c:	d836      	bhi.n	80008ec <ILI9341_Set_Rotation+0xc0>
 800087e:	a201      	add	r2, pc, #4	; (adr r2, 8000884 <ILI9341_Set_Rotation+0x58>)
 8000880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000884:	08000895 	.word	0x08000895
 8000888:	080008ab 	.word	0x080008ab
 800088c:	080008c1 	.word	0x080008c1
 8000890:	080008d7 	.word	0x080008d7
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000894:	2048      	movs	r0, #72	; 0x48
 8000896:	f7ff fe9d 	bl	80005d4 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 800089a:	4b19      	ldr	r3, [pc, #100]	; (8000900 <ILI9341_Set_Rotation+0xd4>)
 800089c:	22f0      	movs	r2, #240	; 0xf0
 800089e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <ILI9341_Set_Rotation+0xd8>)
 80008a2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80008a6:	801a      	strh	r2, [r3, #0]
			break;
 80008a8:	e021      	b.n	80008ee <ILI9341_Set_Rotation+0xc2>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80008aa:	2028      	movs	r0, #40	; 0x28
 80008ac:	f7ff fe92 	bl	80005d4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80008b0:	4b13      	ldr	r3, [pc, #76]	; (8000900 <ILI9341_Set_Rotation+0xd4>)
 80008b2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80008b6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <ILI9341_Set_Rotation+0xd8>)
 80008ba:	22f0      	movs	r2, #240	; 0xf0
 80008bc:	801a      	strh	r2, [r3, #0]
			break;
 80008be:	e016      	b.n	80008ee <ILI9341_Set_Rotation+0xc2>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 80008c0:	2088      	movs	r0, #136	; 0x88
 80008c2:	f7ff fe87 	bl	80005d4 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <ILI9341_Set_Rotation+0xd4>)
 80008c8:	22f0      	movs	r2, #240	; 0xf0
 80008ca:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80008cc:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <ILI9341_Set_Rotation+0xd8>)
 80008ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80008d2:	801a      	strh	r2, [r3, #0]
			break;
 80008d4:	e00b      	b.n	80008ee <ILI9341_Set_Rotation+0xc2>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80008d6:	20e8      	movs	r0, #232	; 0xe8
 80008d8:	f7ff fe7c 	bl	80005d4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <ILI9341_Set_Rotation+0xd4>)
 80008de:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80008e2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <ILI9341_Set_Rotation+0xd8>)
 80008e6:	22f0      	movs	r2, #240	; 0xf0
 80008e8:	801a      	strh	r2, [r3, #0]
			break;
 80008ea:	e000      	b.n	80008ee <ILI9341_Set_Rotation+0xc2>
		default:
			break;
 80008ec:	bf00      	nop
	}
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40020400 	.word	0x40020400
 80008fc:	40013000 	.word	0x40013000
 8000900:	20000002 	.word	0x20000002
 8000904:	20000000 	.word	0x20000000

08000908 <ILI9341_Init>:


/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	DISP_RST_WORK; /*Enable LCD display*/
 800090c:	2201      	movs	r2, #1
 800090e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000912:	4885      	ldr	r0, [pc, #532]	; (8000b28 <ILI9341_Init+0x220>)
 8000914:	f002 fea6 	bl	8003664 <HAL_GPIO_WritePin>
	//DISP_CS_SELECT; /* Initialize SPI */
	ILI9341_Reset();
 8000918:	f7ff ff6a 	bl	80007f0 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 800091c:	2001      	movs	r0, #1
 800091e:	f7ff fe2b 	bl	8000578 <ILI9341_Write_Command>
	HAL_Delay(1000);
 8000922:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000926:	f001 fdcf 	bl	80024c8 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 800092a:	20cb      	movs	r0, #203	; 0xcb
 800092c:	f7ff fe24 	bl	8000578 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 8000930:	2039      	movs	r0, #57	; 0x39
 8000932:	f7ff fe4f 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 8000936:	202c      	movs	r0, #44	; 0x2c
 8000938:	f7ff fe4c 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 800093c:	2000      	movs	r0, #0
 800093e:	f7ff fe49 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 8000942:	2034      	movs	r0, #52	; 0x34
 8000944:	f7ff fe46 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 8000948:	2002      	movs	r0, #2
 800094a:	f7ff fe43 	bl	80005d4 <ILI9341_Write_Data>

	//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 800094e:	20cf      	movs	r0, #207	; 0xcf
 8000950:	f7ff fe12 	bl	8000578 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8000954:	2000      	movs	r0, #0
 8000956:	f7ff fe3d 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 800095a:	20c1      	movs	r0, #193	; 0xc1
 800095c:	f7ff fe3a 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 8000960:	2030      	movs	r0, #48	; 0x30
 8000962:	f7ff fe37 	bl	80005d4 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 8000966:	20e8      	movs	r0, #232	; 0xe8
 8000968:	f7ff fe06 	bl	8000578 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 800096c:	2085      	movs	r0, #133	; 0x85
 800096e:	f7ff fe31 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8000972:	2000      	movs	r0, #0
 8000974:	f7ff fe2e 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 8000978:	2078      	movs	r0, #120	; 0x78
 800097a:	f7ff fe2b 	bl	80005d4 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 800097e:	20ea      	movs	r0, #234	; 0xea
 8000980:	f7ff fdfa 	bl	8000578 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8000984:	2000      	movs	r0, #0
 8000986:	f7ff fe25 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 800098a:	2000      	movs	r0, #0
 800098c:	f7ff fe22 	bl	80005d4 <ILI9341_Write_Data>

	//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 8000990:	20ed      	movs	r0, #237	; 0xed
 8000992:	f7ff fdf1 	bl	8000578 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 8000996:	2064      	movs	r0, #100	; 0x64
 8000998:	f7ff fe1c 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 800099c:	2003      	movs	r0, #3
 800099e:	f7ff fe19 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 80009a2:	2012      	movs	r0, #18
 80009a4:	f7ff fe16 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 80009a8:	2081      	movs	r0, #129	; 0x81
 80009aa:	f7ff fe13 	bl	80005d4 <ILI9341_Write_Data>

	//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 80009ae:	20f7      	movs	r0, #247	; 0xf7
 80009b0:	f7ff fde2 	bl	8000578 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 80009b4:	2020      	movs	r0, #32
 80009b6:	f7ff fe0d 	bl	80005d4 <ILI9341_Write_Data>

	//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 80009ba:	20c0      	movs	r0, #192	; 0xc0
 80009bc:	f7ff fddc 	bl	8000578 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 80009c0:	2023      	movs	r0, #35	; 0x23
 80009c2:	f7ff fe07 	bl	80005d4 <ILI9341_Write_Data>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 80009c6:	20c1      	movs	r0, #193	; 0xc1
 80009c8:	f7ff fdd6 	bl	8000578 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 80009cc:	2010      	movs	r0, #16
 80009ce:	f7ff fe01 	bl	80005d4 <ILI9341_Write_Data>

	//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 80009d2:	20c5      	movs	r0, #197	; 0xc5
 80009d4:	f7ff fdd0 	bl	8000578 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x3E);
 80009d8:	203e      	movs	r0, #62	; 0x3e
 80009da:	f7ff fdfb 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x28);
 80009de:	2028      	movs	r0, #40	; 0x28
 80009e0:	f7ff fdf8 	bl	80005d4 <ILI9341_Write_Data>

	//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 80009e4:	20c7      	movs	r0, #199	; 0xc7
 80009e6:	f7ff fdc7 	bl	8000578 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x86);
 80009ea:	2086      	movs	r0, #134	; 0x86
 80009ec:	f7ff fdf2 	bl	80005d4 <ILI9341_Write_Data>

	//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 80009f0:	2036      	movs	r0, #54	; 0x36
 80009f2:	f7ff fdc1 	bl	8000578 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 80009f6:	2048      	movs	r0, #72	; 0x48
 80009f8:	f7ff fdec 	bl	80005d4 <ILI9341_Write_Data>

	//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 80009fc:	203a      	movs	r0, #58	; 0x3a
 80009fe:	f7ff fdbb 	bl	8000578 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 8000a02:	2055      	movs	r0, #85	; 0x55
 8000a04:	f7ff fde6 	bl	80005d4 <ILI9341_Write_Data>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 8000a08:	20b1      	movs	r0, #177	; 0xb1
 8000a0a:	f7ff fdb5 	bl	8000578 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f7ff fde0 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x18);
 8000a14:	2018      	movs	r0, #24
 8000a16:	f7ff fddd 	bl	80005d4 <ILI9341_Write_Data>

	//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 8000a1a:	20b6      	movs	r0, #182	; 0xb6
 8000a1c:	f7ff fdac 	bl	8000578 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 8000a20:	2008      	movs	r0, #8
 8000a22:	f7ff fdd7 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 8000a26:	2082      	movs	r0, #130	; 0x82
 8000a28:	f7ff fdd4 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 8000a2c:	2027      	movs	r0, #39	; 0x27
 8000a2e:	f7ff fdd1 	bl	80005d4 <ILI9341_Write_Data>

	//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 8000a32:	20f2      	movs	r0, #242	; 0xf2
 8000a34:	f7ff fda0 	bl	8000578 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f7ff fdcb 	bl	80005d4 <ILI9341_Write_Data>

	//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 8000a3e:	2026      	movs	r0, #38	; 0x26
 8000a40:	f7ff fd9a 	bl	8000578 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 8000a44:	2001      	movs	r0, #1
 8000a46:	f7ff fdc5 	bl	80005d4 <ILI9341_Write_Data>

	//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 8000a4a:	20e0      	movs	r0, #224	; 0xe0
 8000a4c:	f7ff fd94 	bl	8000578 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 8000a50:	200f      	movs	r0, #15
 8000a52:	f7ff fdbf 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8000a56:	2031      	movs	r0, #49	; 0x31
 8000a58:	f7ff fdbc 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 8000a5c:	202b      	movs	r0, #43	; 0x2b
 8000a5e:	f7ff fdb9 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8000a62:	200c      	movs	r0, #12
 8000a64:	f7ff fdb6 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8000a68:	200e      	movs	r0, #14
 8000a6a:	f7ff fdb3 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8000a6e:	2008      	movs	r0, #8
 8000a70:	f7ff fdb0 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 8000a74:	204e      	movs	r0, #78	; 0x4e
 8000a76:	f7ff fdad 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 8000a7a:	20f1      	movs	r0, #241	; 0xf1
 8000a7c:	f7ff fdaa 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 8000a80:	2037      	movs	r0, #55	; 0x37
 8000a82:	f7ff fda7 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8000a86:	2007      	movs	r0, #7
 8000a88:	f7ff fda4 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 8000a8c:	2010      	movs	r0, #16
 8000a8e:	f7ff fda1 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8000a92:	2003      	movs	r0, #3
 8000a94:	f7ff fd9e 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8000a98:	200e      	movs	r0, #14
 8000a9a:	f7ff fd9b 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 8000a9e:	2009      	movs	r0, #9
 8000aa0:	f7ff fd98 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f7ff fd95 	bl	80005d4 <ILI9341_Write_Data>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 8000aaa:	20e1      	movs	r0, #225	; 0xe1
 8000aac:	f7ff fd64 	bl	8000578 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f7ff fd8f 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8000ab6:	200e      	movs	r0, #14
 8000ab8:	f7ff fd8c 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 8000abc:	2014      	movs	r0, #20
 8000abe:	f7ff fd89 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8000ac2:	2003      	movs	r0, #3
 8000ac4:	f7ff fd86 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 8000ac8:	2011      	movs	r0, #17
 8000aca:	f7ff fd83 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8000ace:	2007      	movs	r0, #7
 8000ad0:	f7ff fd80 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8000ad4:	2031      	movs	r0, #49	; 0x31
 8000ad6:	f7ff fd7d 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8000ada:	20c1      	movs	r0, #193	; 0xc1
 8000adc:	f7ff fd7a 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 8000ae0:	2048      	movs	r0, #72	; 0x48
 8000ae2:	f7ff fd77 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8000ae6:	2008      	movs	r0, #8
 8000ae8:	f7ff fd74 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8000aec:	200f      	movs	r0, #15
 8000aee:	f7ff fd71 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8000af2:	200c      	movs	r0, #12
 8000af4:	f7ff fd6e 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8000af8:	2031      	movs	r0, #49	; 0x31
 8000afa:	f7ff fd6b 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 8000afe:	2036      	movs	r0, #54	; 0x36
 8000b00:	f7ff fd68 	bl	80005d4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8000b04:	200f      	movs	r0, #15
 8000b06:	f7ff fd65 	bl	80005d4 <ILI9341_Write_Data>

	//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 8000b0a:	2011      	movs	r0, #17
 8000b0c:	f7ff fd34 	bl	8000578 <ILI9341_Write_Command>
	HAL_Delay(120);
 8000b10:	2078      	movs	r0, #120	; 0x78
 8000b12:	f001 fcd9 	bl	80024c8 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 8000b16:	2029      	movs	r0, #41	; 0x29
 8000b18:	f7ff fd2e 	bl	8000578 <ILI9341_Write_Command>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	f7ff fe85 	bl	800082c <ILI9341_Set_Rotation>
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40020400 	.word	0x40020400

08000b2c <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	80fb      	strh	r3, [r7, #6]
	DISP_DC_DATA;
 8000b38:	2201      	movs	r2, #1
 8000b3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b3e:	481e      	ldr	r0, [pc, #120]	; (8000bb8 <ILI9341_Draw_Colour_Burst+0x8c>)
 8000b40:	f002 fd90 	bl	8003664 <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 8000b44:	2200      	movs	r2, #0
 8000b46:	2180      	movs	r1, #128	; 0x80
 8000b48:	481b      	ldr	r0, [pc, #108]	; (8000bb8 <ILI9341_Draw_Colour_Burst+0x8c>)
 8000b4a:	f002 fd8b 	bl	8003664 <HAL_GPIO_WritePin>

	while(Size > 0)
 8000b4e:	e018      	b.n	8000b82 <ILI9341_Draw_Colour_Burst+0x56>
	{
		DISP_SPI->DR = (Colour >> 8);
 8000b50:	88fb      	ldrh	r3, [r7, #6]
 8000b52:	0a1b      	lsrs	r3, r3, #8
 8000b54:	b29a      	uxth	r2, r3
 8000b56:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <ILI9341_Draw_Colour_Burst+0x90>)
 8000b58:	60da      	str	r2, [r3, #12]
		while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000b5a:	bf00      	nop
 8000b5c:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <ILI9341_Draw_Colour_Burst+0x90>)
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	f003 0302 	and.w	r3, r3, #2
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d0f9      	beq.n	8000b5c <ILI9341_Draw_Colour_Burst+0x30>
		DISP_SPI->DR = Colour;
 8000b68:	4a14      	ldr	r2, [pc, #80]	; (8000bbc <ILI9341_Draw_Colour_Burst+0x90>)
 8000b6a:	88fb      	ldrh	r3, [r7, #6]
 8000b6c:	60d3      	str	r3, [r2, #12]
		while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000b6e:	bf00      	nop
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <ILI9341_Draw_Colour_Burst+0x90>)
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	f003 0302 	and.w	r3, r3, #2
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d0f9      	beq.n	8000b70 <ILI9341_Draw_Colour_Burst+0x44>
		Size--;
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	603b      	str	r3, [r7, #0]
	while(Size > 0)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d1e3      	bne.n	8000b50 <ILI9341_Draw_Colour_Burst+0x24>
	}

	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000b88:	bf00      	nop
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <ILI9341_Draw_Colour_Burst+0x90>)
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d0f9      	beq.n	8000b8a <ILI9341_Draw_Colour_Burst+0x5e>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8000b96:	bf00      	nop
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <ILI9341_Draw_Colour_Burst+0x90>)
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d1f9      	bne.n	8000b98 <ILI9341_Draw_Colour_Burst+0x6c>
	DISP_CS_UNSELECT;
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	2180      	movs	r1, #128	; 0x80
 8000ba8:	4803      	ldr	r0, [pc, #12]	; (8000bb8 <ILI9341_Draw_Colour_Burst+0x8c>)
 8000baa:	f002 fd5b 	bl	8003664 <HAL_GPIO_WritePin>
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40020400 	.word	0x40020400
 8000bbc:	40013000 	.word	0x40013000

08000bc0 <ILI9341_Fill_Screen>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// USER FUNCTION //////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <ILI9341_Fill_Screen+0x44>)
 8000bcc:	881b      	ldrh	r3, [r3, #0]
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <ILI9341_Fill_Screen+0x48>)
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f7ff fd29 	bl	8000630 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH * LCD_HEIGHT);
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <ILI9341_Fill_Screen+0x44>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <ILI9341_Fill_Screen+0x48>)
 8000be8:	881b      	ldrh	r3, [r3, #0]
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	fb03 f302 	mul.w	r3, r3, r2
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff ff98 	bl	8000b2c <ILI9341_Draw_Colour_Burst>
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000002 	.word	0x20000002
 8000c08:	20000000 	.word	0x20000000

08000c0c <ILI9341_Draw_Pixel>:

//DRAW PIXEL AT XY POSITION WITH SELECTED COLOUR
void ILI9341_Draw_Pixel(uint16_t X, uint16_t Y, uint16_t Colour)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	80fb      	strh	r3, [r7, #6]
 8000c16:	460b      	mov	r3, r1
 8000c18:	80bb      	strh	r3, [r7, #4]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	807b      	strh	r3, [r7, #2]
	if((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT)) return;
 8000c1e:	4b7c      	ldr	r3, [pc, #496]	; (8000e10 <ILI9341_Draw_Pixel+0x204>)
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	88fa      	ldrh	r2, [r7, #6]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	f080 80ee 	bcs.w	8000e08 <ILI9341_Draw_Pixel+0x1fc>
 8000c2c:	4b79      	ldr	r3, [pc, #484]	; (8000e14 <ILI9341_Draw_Pixel+0x208>)
 8000c2e:	881b      	ldrh	r3, [r3, #0]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	88ba      	ldrh	r2, [r7, #4]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	f080 80e7 	bcs.w	8000e08 <ILI9341_Draw_Pixel+0x1fc>

	//ADDRESS
	DISP_DC_CMD;
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c40:	4875      	ldr	r0, [pc, #468]	; (8000e18 <ILI9341_Draw_Pixel+0x20c>)
 8000c42:	f002 fd0f 	bl	8003664 <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 8000c46:	2200      	movs	r2, #0
 8000c48:	2180      	movs	r1, #128	; 0x80
 8000c4a:	4873      	ldr	r0, [pc, #460]	; (8000e18 <ILI9341_Draw_Pixel+0x20c>)
 8000c4c:	f002 fd0a 	bl	8003664 <HAL_GPIO_WritePin>
	DISP_SPI->DR = 0x2A;
 8000c50:	4b72      	ldr	r3, [pc, #456]	; (8000e1c <ILI9341_Draw_Pixel+0x210>)
 8000c52:	222a      	movs	r2, #42	; 0x2a
 8000c54:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000c56:	bf00      	nop
 8000c58:	4b70      	ldr	r3, [pc, #448]	; (8000e1c <ILI9341_Draw_Pixel+0x210>)
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	f003 0302 	and.w	r3, r3, #2
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d0f9      	beq.n	8000c58 <ILI9341_Draw_Pixel+0x4c>
	while(DISP_SPI->SR & SPI_SR_BSY);////////////
 8000c64:	bf00      	nop
 8000c66:	4b6d      	ldr	r3, [pc, #436]	; (8000e1c <ILI9341_Draw_Pixel+0x210>)
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d1f9      	bne.n	8000c66 <ILI9341_Draw_Pixel+0x5a>

	DISP_DC_DATA;
 8000c72:	2201      	movs	r2, #1
 8000c74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c78:	4867      	ldr	r0, [pc, #412]	; (8000e18 <ILI9341_Draw_Pixel+0x20c>)
 8000c7a:	f002 fcf3 	bl	8003664 <HAL_GPIO_WritePin>
	DISP_SPI->DR = (X >> 8);
 8000c7e:	88fb      	ldrh	r3, [r7, #6]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	4b65      	ldr	r3, [pc, #404]	; (8000e1c <ILI9341_Draw_Pixel+0x210>)
 8000c86:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000c88:	bf00      	nop
 8000c8a:	4b64      	ldr	r3, [pc, #400]	; (8000e1c <ILI9341_Draw_Pixel+0x210>)
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d0f9      	beq.n	8000c8a <ILI9341_Draw_Pixel+0x7e>
	DISP_SPI->DR = X;
 8000c96:	4a61      	ldr	r2, [pc, #388]	; (8000e1c <ILI9341_Draw_Pixel+0x210>)
 8000c98:	88fb      	ldrh	r3, [r7, #6]
 8000c9a:	60d3      	str	r3, [r2, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000c9c:	bf00      	nop
 8000c9e:	4b5f      	ldr	r3, [pc, #380]	; (8000e1c <ILI9341_Draw_Pixel+0x210>)
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d0f9      	beq.n	8000c9e <ILI9341_Draw_Pixel+0x92>
	DISP_SPI->DR = ((X + 1) >> 8);
 8000caa:	88fb      	ldrh	r3, [r7, #6]
 8000cac:	3301      	adds	r3, #1
 8000cae:	121a      	asrs	r2, r3, #8
 8000cb0:	4b5a      	ldr	r3, [pc, #360]	; (8000e1c <ILI9341_Draw_Pixel+0x210>)
 8000cb2:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000cb4:	bf00      	nop
 8000cb6:	4b59      	ldr	r3, [pc, #356]	; (8000e1c <ILI9341_Draw_Pixel+0x210>)
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d0f9      	beq.n	8000cb6 <ILI9341_Draw_Pixel+0xaa>
	DISP_SPI->DR = (X + 1);
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	1c5a      	adds	r2, r3, #1
 8000cc6:	4b55      	ldr	r3, [pc, #340]	; (8000e1c <ILI9341_Draw_Pixel+0x210>)
 8000cc8:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000cca:	bf00      	nop
 8000ccc:	4b53      	ldr	r3, [pc, #332]	; (8000e1c <ILI9341_Draw_Pixel+0x210>)
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	f003 0302 	and.w	r3, r3, #2
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d0f9      	beq.n	8000ccc <ILI9341_Draw_Pixel+0xc0>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8000cd8:	bf00      	nop
 8000cda:	4b50      	ldr	r3, [pc, #320]	; (8000e1c <ILI9341_Draw_Pixel+0x210>)
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d1f9      	bne.n	8000cda <ILI9341_Draw_Pixel+0xce>

	//ADDRESS
	DISP_DC_CMD;
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cec:	484a      	ldr	r0, [pc, #296]	; (8000e18 <ILI9341_Draw_Pixel+0x20c>)
 8000cee:	f002 fcb9 	bl	8003664 <HAL_GPIO_WritePin>
	DISP_SPI->DR = 0x2B;
 8000cf2:	4b4a      	ldr	r3, [pc, #296]	; (8000e1c <ILI9341_Draw_Pixel+0x210>)
 8000cf4:	222b      	movs	r2, #43	; 0x2b
 8000cf6:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000cf8:	bf00      	nop
 8000cfa:	4b48      	ldr	r3, [pc, #288]	; (8000e1c <ILI9341_Draw_Pixel+0x210>)
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d0f9      	beq.n	8000cfa <ILI9341_Draw_Pixel+0xee>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8000d06:	bf00      	nop
 8000d08:	4b44      	ldr	r3, [pc, #272]	; (8000e1c <ILI9341_Draw_Pixel+0x210>)
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d1f9      	bne.n	8000d08 <ILI9341_Draw_Pixel+0xfc>

	DISP_DC_DATA;
 8000d14:	2201      	movs	r2, #1
 8000d16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d1a:	483f      	ldr	r0, [pc, #252]	; (8000e18 <ILI9341_Draw_Pixel+0x20c>)
 8000d1c:	f002 fca2 	bl	8003664 <HAL_GPIO_WritePin>
	DISP_SPI->DR = (Y >> 8);
 8000d20:	88bb      	ldrh	r3, [r7, #4]
 8000d22:	0a1b      	lsrs	r3, r3, #8
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	4b3d      	ldr	r3, [pc, #244]	; (8000e1c <ILI9341_Draw_Pixel+0x210>)
 8000d28:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000d2a:	bf00      	nop
 8000d2c:	4b3b      	ldr	r3, [pc, #236]	; (8000e1c <ILI9341_Draw_Pixel+0x210>)
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	f003 0302 	and.w	r3, r3, #2
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d0f9      	beq.n	8000d2c <ILI9341_Draw_Pixel+0x120>
	DISP_SPI->DR = Y;
 8000d38:	4a38      	ldr	r2, [pc, #224]	; (8000e1c <ILI9341_Draw_Pixel+0x210>)
 8000d3a:	88bb      	ldrh	r3, [r7, #4]
 8000d3c:	60d3      	str	r3, [r2, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000d3e:	bf00      	nop
 8000d40:	4b36      	ldr	r3, [pc, #216]	; (8000e1c <ILI9341_Draw_Pixel+0x210>)
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	f003 0302 	and.w	r3, r3, #2
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d0f9      	beq.n	8000d40 <ILI9341_Draw_Pixel+0x134>
	DISP_SPI->DR = ((Y + 1) >> 8);
 8000d4c:	88bb      	ldrh	r3, [r7, #4]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	121a      	asrs	r2, r3, #8
 8000d52:	4b32      	ldr	r3, [pc, #200]	; (8000e1c <ILI9341_Draw_Pixel+0x210>)
 8000d54:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000d56:	bf00      	nop
 8000d58:	4b30      	ldr	r3, [pc, #192]	; (8000e1c <ILI9341_Draw_Pixel+0x210>)
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	f003 0302 	and.w	r3, r3, #2
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d0f9      	beq.n	8000d58 <ILI9341_Draw_Pixel+0x14c>
	DISP_SPI->DR = (Y + 1);
 8000d64:	88bb      	ldrh	r3, [r7, #4]
 8000d66:	1c5a      	adds	r2, r3, #1
 8000d68:	4b2c      	ldr	r3, [pc, #176]	; (8000e1c <ILI9341_Draw_Pixel+0x210>)
 8000d6a:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000d6c:	bf00      	nop
 8000d6e:	4b2b      	ldr	r3, [pc, #172]	; (8000e1c <ILI9341_Draw_Pixel+0x210>)
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d0f9      	beq.n	8000d6e <ILI9341_Draw_Pixel+0x162>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8000d7a:	bf00      	nop
 8000d7c:	4b27      	ldr	r3, [pc, #156]	; (8000e1c <ILI9341_Draw_Pixel+0x210>)
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d1f9      	bne.n	8000d7c <ILI9341_Draw_Pixel+0x170>

	//ADDRESS
	DISP_DC_CMD;
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d8e:	4822      	ldr	r0, [pc, #136]	; (8000e18 <ILI9341_Draw_Pixel+0x20c>)
 8000d90:	f002 fc68 	bl	8003664 <HAL_GPIO_WritePin>
	DISP_SPI->DR = 0x2C;
 8000d94:	4b21      	ldr	r3, [pc, #132]	; (8000e1c <ILI9341_Draw_Pixel+0x210>)
 8000d96:	222c      	movs	r2, #44	; 0x2c
 8000d98:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000d9a:	bf00      	nop
 8000d9c:	4b1f      	ldr	r3, [pc, #124]	; (8000e1c <ILI9341_Draw_Pixel+0x210>)
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	f003 0302 	and.w	r3, r3, #2
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d0f9      	beq.n	8000d9c <ILI9341_Draw_Pixel+0x190>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8000da8:	bf00      	nop
 8000daa:	4b1c      	ldr	r3, [pc, #112]	; (8000e1c <ILI9341_Draw_Pixel+0x210>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d1f9      	bne.n	8000daa <ILI9341_Draw_Pixel+0x19e>

	DISP_DC_DATA;
 8000db6:	2201      	movs	r2, #1
 8000db8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dbc:	4816      	ldr	r0, [pc, #88]	; (8000e18 <ILI9341_Draw_Pixel+0x20c>)
 8000dbe:	f002 fc51 	bl	8003664 <HAL_GPIO_WritePin>
	DISP_SPI->DR = (Colour >> 8);
 8000dc2:	887b      	ldrh	r3, [r7, #2]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <ILI9341_Draw_Pixel+0x210>)
 8000dca:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000dcc:	bf00      	nop
 8000dce:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <ILI9341_Draw_Pixel+0x210>)
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d0f9      	beq.n	8000dce <ILI9341_Draw_Pixel+0x1c2>
	DISP_SPI->DR = Colour;
 8000dda:	4a10      	ldr	r2, [pc, #64]	; (8000e1c <ILI9341_Draw_Pixel+0x210>)
 8000ddc:	887b      	ldrh	r3, [r7, #2]
 8000dde:	60d3      	str	r3, [r2, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000de0:	bf00      	nop
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <ILI9341_Draw_Pixel+0x210>)
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0f9      	beq.n	8000de2 <ILI9341_Draw_Pixel+0x1d6>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8000dee:	bf00      	nop
 8000df0:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <ILI9341_Draw_Pixel+0x210>)
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d1f9      	bne.n	8000df0 <ILI9341_Draw_Pixel+0x1e4>

	DISP_CS_UNSELECT;
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	2180      	movs	r1, #128	; 0x80
 8000e00:	4805      	ldr	r0, [pc, #20]	; (8000e18 <ILI9341_Draw_Pixel+0x20c>)
 8000e02:	f002 fc2f 	bl	8003664 <HAL_GPIO_WritePin>
 8000e06:	e000      	b.n	8000e0a <ILI9341_Draw_Pixel+0x1fe>
	if((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT)) return;
 8000e08:	bf00      	nop
}
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000002 	.word	0x20000002
 8000e14:	20000000 	.word	0x20000000
 8000e18:	40020400 	.word	0x40020400
 8000e1c:	40013000 	.word	0x40013000

08000e20 <ILI9341_Draw_Horizontal_Line>:
	ILI9341_Draw_Colour_Burst(Colour, Height * Width);
}

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Colour)
{
 8000e20:	b590      	push	{r4, r7, lr}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4604      	mov	r4, r0
 8000e28:	4608      	mov	r0, r1
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4623      	mov	r3, r4
 8000e30:	80fb      	strh	r3, [r7, #6]
 8000e32:	4603      	mov	r3, r0
 8000e34:	80bb      	strh	r3, [r7, #4]
 8000e36:	460b      	mov	r3, r1
 8000e38:	807b      	strh	r3, [r7, #2]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	803b      	strh	r3, [r7, #0]
	if((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT)) return;
 8000e3e:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <ILI9341_Draw_Horizontal_Line+0x80>)
 8000e40:	881b      	ldrh	r3, [r3, #0]
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	88fa      	ldrh	r2, [r7, #6]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d225      	bcs.n	8000e96 <ILI9341_Draw_Horizontal_Line+0x76>
 8000e4a:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <ILI9341_Draw_Horizontal_Line+0x84>)
 8000e4c:	881b      	ldrh	r3, [r3, #0]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	88ba      	ldrh	r2, [r7, #4]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d21f      	bcs.n	8000e96 <ILI9341_Draw_Horizontal_Line+0x76>

	if((X + Width - 1) >= LCD_WIDTH)
 8000e56:	88fa      	ldrh	r2, [r7, #6]
 8000e58:	887b      	ldrh	r3, [r7, #2]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	4a10      	ldr	r2, [pc, #64]	; (8000ea0 <ILI9341_Draw_Horizontal_Line+0x80>)
 8000e5e:	8812      	ldrh	r2, [r2, #0]
 8000e60:	b292      	uxth	r2, r2
 8000e62:	4293      	cmp	r3, r2
 8000e64:	dd05      	ble.n	8000e72 <ILI9341_Draw_Horizontal_Line+0x52>
	{
		Width = LCD_WIDTH - X;
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <ILI9341_Draw_Horizontal_Line+0x80>)
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	88fb      	ldrh	r3, [r7, #6]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_Set_Address(X, Y, X + Width - 1, Y);
 8000e72:	88fa      	ldrh	r2, [r7, #6]
 8000e74:	887b      	ldrh	r3, [r7, #2]
 8000e76:	4413      	add	r3, r2
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	88bb      	ldrh	r3, [r7, #4]
 8000e80:	88b9      	ldrh	r1, [r7, #4]
 8000e82:	88f8      	ldrh	r0, [r7, #6]
 8000e84:	f7ff fbd4 	bl	8000630 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, Width);
 8000e88:	887a      	ldrh	r2, [r7, #2]
 8000e8a:	883b      	ldrh	r3, [r7, #0]
 8000e8c:	4611      	mov	r1, r2
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fe4c 	bl	8000b2c <ILI9341_Draw_Colour_Burst>
 8000e94:	e000      	b.n	8000e98 <ILI9341_Draw_Horizontal_Line+0x78>
	if((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT)) return;
 8000e96:	bf00      	nop
}
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd90      	pop	{r4, r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000002 	.word	0x20000002
 8000ea4:	20000000 	.word	0x20000000

08000ea8 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4604      	mov	r4, r0
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	80fb      	strh	r3, [r7, #6]
 8000eba:	4603      	mov	r3, r0
 8000ebc:	80bb      	strh	r3, [r7, #4]
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	807b      	strh	r3, [r7, #2]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	803b      	strh	r3, [r7, #0]
	if((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT)) return;
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <ILI9341_Draw_Vertical_Line+0x80>)
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	88fa      	ldrh	r2, [r7, #6]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d225      	bcs.n	8000f1e <ILI9341_Draw_Vertical_Line+0x76>
 8000ed2:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <ILI9341_Draw_Vertical_Line+0x84>)
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	88ba      	ldrh	r2, [r7, #4]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d21f      	bcs.n	8000f1e <ILI9341_Draw_Vertical_Line+0x76>

	if((Y + Height - 1) >= LCD_HEIGHT)
 8000ede:	88ba      	ldrh	r2, [r7, #4]
 8000ee0:	887b      	ldrh	r3, [r7, #2]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4a11      	ldr	r2, [pc, #68]	; (8000f2c <ILI9341_Draw_Vertical_Line+0x84>)
 8000ee6:	8812      	ldrh	r2, [r2, #0]
 8000ee8:	b292      	uxth	r2, r2
 8000eea:	4293      	cmp	r3, r2
 8000eec:	dd05      	ble.n	8000efa <ILI9341_Draw_Vertical_Line+0x52>
	{
		Height = LCD_HEIGHT - Y;
 8000eee:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <ILI9341_Draw_Vertical_Line+0x84>)
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	88bb      	ldrh	r3, [r7, #4]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_Set_Address(X, Y, X, Y + Height - 1);
 8000efa:	88ba      	ldrh	r2, [r7, #4]
 8000efc:	887b      	ldrh	r3, [r7, #2]
 8000efe:	4413      	add	r3, r2
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	3b01      	subs	r3, #1
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	88fa      	ldrh	r2, [r7, #6]
 8000f08:	88b9      	ldrh	r1, [r7, #4]
 8000f0a:	88f8      	ldrh	r0, [r7, #6]
 8000f0c:	f7ff fb90 	bl	8000630 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, Height);
 8000f10:	887a      	ldrh	r2, [r7, #2]
 8000f12:	883b      	ldrh	r3, [r7, #0]
 8000f14:	4611      	mov	r1, r2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fe08 	bl	8000b2c <ILI9341_Draw_Colour_Burst>
 8000f1c:	e000      	b.n	8000f20 <ILI9341_Draw_Vertical_Line+0x78>
	if((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT)) return;
 8000f1e:	bf00      	nop
}
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd90      	pop	{r4, r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000002 	.word	0x20000002
 8000f2c:	20000000 	.word	0x20000000

08000f30 <ILI9341_Draw_Hollow_Rectangle_Coord>:
	}
}

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4604      	mov	r4, r0
 8000f38:	4608      	mov	r0, r1
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4623      	mov	r3, r4
 8000f40:	80fb      	strh	r3, [r7, #6]
 8000f42:	4603      	mov	r3, r0
 8000f44:	80bb      	strh	r3, [r7, #4]
 8000f46:	460b      	mov	r3, r1
 8000f48:	807b      	strh	r3, [r7, #2]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = X1 - X0;
 8000f62:	887a      	ldrh	r2, [r7, #2]
 8000f64:	88fb      	ldrh	r3, [r7, #6]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	60fb      	str	r3, [r7, #12]
	if(Calc_Negative < 0) Negative_X = 1;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	da01      	bge.n	8000f74 <ILI9341_Draw_Hollow_Rectangle_Coord+0x44>
 8000f70:	2301      	movs	r3, #1
 8000f72:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = Y1 - Y0;
 8000f78:	883a      	ldrh	r2, [r7, #0]
 8000f7a:	88bb      	ldrh	r3, [r7, #4]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	60fb      	str	r3, [r7, #12]
	if(Calc_Negative < 0) Negative_Y = 1;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	da01      	bge.n	8000f8a <ILI9341_Draw_Hollow_Rectangle_Coord+0x5a>
 8000f86:	2301      	movs	r3, #1
 8000f88:	74bb      	strb	r3, [r7, #18]
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8000f8a:	7cfb      	ldrb	r3, [r7, #19]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d104      	bne.n	8000f9a <ILI9341_Draw_Hollow_Rectangle_Coord+0x6a>
	{
		X_length = X1 - X0;		
 8000f90:	887a      	ldrh	r2, [r7, #2]
 8000f92:	88fb      	ldrh	r3, [r7, #6]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	82fb      	strh	r3, [r7, #22]
 8000f98:	e003      	b.n	8000fa2 <ILI9341_Draw_Hollow_Rectangle_Coord+0x72>
	}
	else
	{
		X_length = X0 - X1;		
 8000f9a:	88fa      	ldrh	r2, [r7, #6]
 8000f9c:	887b      	ldrh	r3, [r7, #2]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	82fb      	strh	r3, [r7, #22]
	}

	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 8000fa2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000fa4:	8afa      	ldrh	r2, [r7, #22]
 8000fa6:	88b9      	ldrh	r1, [r7, #4]
 8000fa8:	88f8      	ldrh	r0, [r7, #6]
 8000faa:	f7ff ff39 	bl	8000e20 <ILI9341_Draw_Horizontal_Line>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 8000fae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000fb0:	8afa      	ldrh	r2, [r7, #22]
 8000fb2:	8839      	ldrh	r1, [r7, #0]
 8000fb4:	88f8      	ldrh	r0, [r7, #6]
 8000fb6:	f7ff ff33 	bl	8000e20 <ILI9341_Draw_Horizontal_Line>
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8000fba:	7cbb      	ldrb	r3, [r7, #18]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d104      	bne.n	8000fca <ILI9341_Draw_Hollow_Rectangle_Coord+0x9a>
	{
		Y_length = Y1 - Y0;		
 8000fc0:	883a      	ldrh	r2, [r7, #0]
 8000fc2:	88bb      	ldrh	r3, [r7, #4]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	82bb      	strh	r3, [r7, #20]
 8000fc8:	e003      	b.n	8000fd2 <ILI9341_Draw_Hollow_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;		
 8000fca:	88ba      	ldrh	r2, [r7, #4]
 8000fcc:	883b      	ldrh	r3, [r7, #0]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	82bb      	strh	r3, [r7, #20]
	}

	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 8000fd2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000fd4:	8aba      	ldrh	r2, [r7, #20]
 8000fd6:	88b9      	ldrh	r1, [r7, #4]
 8000fd8:	88f8      	ldrh	r0, [r7, #6]
 8000fda:	f7ff ff65 	bl	8000ea8 <ILI9341_Draw_Vertical_Line>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 8000fde:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000fe0:	8aba      	ldrh	r2, [r7, #20]
 8000fe2:	88b9      	ldrh	r1, [r7, #4]
 8000fe4:	8878      	ldrh	r0, [r7, #2]
 8000fe6:	f7ff ff5f 	bl	8000ea8 <ILI9341_Draw_Vertical_Line>
	
	if((X_length > 0)||(Y_length > 0)) 
 8000fea:	8afb      	ldrh	r3, [r7, #22]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d102      	bne.n	8000ff6 <ILI9341_Draw_Hollow_Rectangle_Coord+0xc6>
 8000ff0:	8abb      	ldrh	r3, [r7, #20]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d005      	beq.n	8001002 <ILI9341_Draw_Hollow_Rectangle_Coord+0xd2>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 8000ff6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000ff8:	8839      	ldrh	r1, [r7, #0]
 8000ffa:	887b      	ldrh	r3, [r7, #2]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fe05 	bl	8000c0c <ILI9341_Draw_Pixel>
	}
}
 8001002:	bf00      	nop
 8001004:	371c      	adds	r7, #28
 8001006:	46bd      	mov	sp, r7
 8001008:	bd90      	pop	{r4, r7, pc}

0800100a <ILI9341_WriteChar>:
}


// Вывод символа
static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 800100a:	b082      	sub	sp, #8
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b087      	sub	sp, #28
 8001010:	af00      	add	r7, sp, #0
 8001012:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001014:	4603      	mov	r3, r0
 8001016:	80fb      	strh	r3, [r7, #6]
 8001018:	460b      	mov	r3, r1
 800101a:	80bb      	strh	r3, [r7, #4]
 800101c:	4613      	mov	r3, r2
 800101e:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_Set_Address(x, y, x + font.width - 1, y + font.height - 1);
 8001020:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001024:	b29a      	uxth	r2, r3
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	4413      	add	r3, r2
 800102a:	b29b      	uxth	r3, r3
 800102c:	3b01      	subs	r3, #1
 800102e:	b29c      	uxth	r4, r3
 8001030:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001034:	b29a      	uxth	r2, r3
 8001036:	88bb      	ldrh	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	b29b      	uxth	r3, r3
 800103c:	3b01      	subs	r3, #1
 800103e:	b29b      	uxth	r3, r3
 8001040:	88b9      	ldrh	r1, [r7, #4]
 8001042:	88f8      	ldrh	r0, [r7, #6]
 8001044:	4622      	mov	r2, r4
 8001046:	f7ff faf3 	bl	8000630 <ILI9341_Set_Address>

    for(i = 0; i < font.height; i++)
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
 800104e:	e03d      	b.n	80010cc <ILI9341_WriteChar+0xc2>
    {
        b = font.data[(ch - 32) * font.height + i];
 8001050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001052:	78fb      	ldrb	r3, [r7, #3]
 8001054:	3b20      	subs	r3, #32
 8001056:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800105a:	fb01 f303 	mul.w	r3, r1, r3
 800105e:	4619      	mov	r1, r3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	440b      	add	r3, r1
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	4413      	add	r3, r2
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	60fb      	str	r3, [r7, #12]

        for(j = 0; j < font.width; j++)
 800106c:	2300      	movs	r3, #0
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	e023      	b.n	80010ba <ILI9341_WriteChar+0xb0>
        {
            if((b << j) & 0x8000)
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d00c      	beq.n	800109c <ILI9341_WriteChar+0x92>
            {
                ILI9341_Write_Data(color >> 8);
 8001082:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001084:	0a1b      	lsrs	r3, r3, #8
 8001086:	b29b      	uxth	r3, r3
 8001088:	b2db      	uxtb	r3, r3
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff faa2 	bl	80005d4 <ILI9341_Write_Data>
                ILI9341_Write_Data(color & 0xFF);
 8001090:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001092:	b2db      	uxtb	r3, r3
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fa9d 	bl	80005d4 <ILI9341_Write_Data>
 800109a:	e00b      	b.n	80010b4 <ILI9341_WriteChar+0xaa>
            }
            else
            {
                ILI9341_Write_Data(bgcolor >> 8);
 800109c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800109e:	0a1b      	lsrs	r3, r3, #8
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fa95 	bl	80005d4 <ILI9341_Write_Data>
                ILI9341_Write_Data(bgcolor & 0xFF);
 80010aa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fa90 	bl	80005d4 <ILI9341_Write_Data>
        for(j = 0; j < font.width; j++)
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	3301      	adds	r3, #1
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80010be:	461a      	mov	r2, r3
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d3d5      	bcc.n	8001072 <ILI9341_WriteChar+0x68>
    for(i = 0; i < font.height; i++)
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	3301      	adds	r3, #1
 80010ca:	617b      	str	r3, [r7, #20]
 80010cc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80010d0:	461a      	mov	r2, r3
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d3bb      	bcc.n	8001050 <ILI9341_WriteChar+0x46>
            }
        }
    }
}
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	371c      	adds	r7, #28
 80010de:	46bd      	mov	sp, r7
 80010e0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80010e4:	b002      	add	sp, #8
 80010e6:	4770      	bx	lr

080010e8 <ILI9341_WriteString>:

// Вывод строки
void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80010e8:	b082      	sub	sp, #8
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af04      	add	r7, sp, #16
 80010f0:	603a      	str	r2, [r7, #0]
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	4603      	mov	r3, r0
 80010f6:	80fb      	strh	r3, [r7, #6]
 80010f8:	460b      	mov	r3, r1
 80010fa:	80bb      	strh	r3, [r7, #4]
    while(*str)
 80010fc:	e02e      	b.n	800115c <ILI9341_WriteString+0x74>
    {
        if(x + font.width >= ILI9341_SCREEN_WIDTH)
 80010fe:	88fb      	ldrh	r3, [r7, #6]
 8001100:	7d3a      	ldrb	r2, [r7, #20]
 8001102:	4413      	add	r3, r2
 8001104:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001108:	db13      	blt.n	8001132 <ILI9341_WriteString+0x4a>
        {
            x = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800110e:	7d7b      	ldrb	r3, [r7, #21]
 8001110:	b29a      	uxth	r2, r3
 8001112:	88bb      	ldrh	r3, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	80bb      	strh	r3, [r7, #4]

            if(y + font.height >= ILI9341_SCREEN_HEIGHT)
 8001118:	88bb      	ldrh	r3, [r7, #4]
 800111a:	7d7a      	ldrb	r2, [r7, #21]
 800111c:	4413      	add	r3, r2
 800111e:	2bef      	cmp	r3, #239	; 0xef
 8001120:	dc21      	bgt.n	8001166 <ILI9341_WriteString+0x7e>
            {
                break;
            }

            if(*str == ' ')
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b20      	cmp	r3, #32
 8001128:	d103      	bne.n	8001132 <ILI9341_WriteString+0x4a>
            {
                str++;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	3301      	adds	r3, #1
 800112e:	603b      	str	r3, [r7, #0]
                continue;
 8001130:	e014      	b.n	800115c <ILI9341_WriteString+0x74>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	781a      	ldrb	r2, [r3, #0]
 8001136:	88b9      	ldrh	r1, [r7, #4]
 8001138:	88f8      	ldrh	r0, [r7, #6]
 800113a:	8c3b      	ldrh	r3, [r7, #32]
 800113c:	9302      	str	r3, [sp, #8]
 800113e:	8bbb      	ldrh	r3, [r7, #28]
 8001140:	9301      	str	r3, [sp, #4]
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	f7ff ff5f 	bl	800100a <ILI9341_WriteChar>
        x += font.width;
 800114c:	7d3b      	ldrb	r3, [r7, #20]
 800114e:	b29a      	uxth	r2, r3
 8001150:	88fb      	ldrh	r3, [r7, #6]
 8001152:	4413      	add	r3, r2
 8001154:	80fb      	strh	r3, [r7, #6]
        str++;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	3301      	adds	r3, #1
 800115a:	603b      	str	r3, [r7, #0]
    while(*str)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1cc      	bne.n	80010fe <ILI9341_WriteString+0x16>
    }
}
 8001164:	e000      	b.n	8001168 <ILI9341_WriteString+0x80>
                break;
 8001166:	bf00      	nop
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001172:	b002      	add	sp, #8
 8001174:	4770      	bx	lr

08001176 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117a:	f001 f933 	bl	80023e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800117e:	f000 f80b 	bl	8001198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001182:	f000 f8fd 	bl	8001380 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001186:	f000 f8c5 	bl	8001314 <MX_SPI1_Init>
  MX_ADC1_Init();
 800118a:	f000 f871 	bl	8001270 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  startup();
 800118e:	f000 f991 	bl	80014b4 <startup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  main_cicle();
 8001192:	f000 fa57 	bl	8001644 <main_cicle>
 8001196:	e7fc      	b.n	8001192 <main+0x1c>

08001198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b094      	sub	sp, #80	; 0x50
 800119c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119e:	f107 0320 	add.w	r3, r7, #32
 80011a2:	2230      	movs	r2, #48	; 0x30
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f003 fb0e 	bl	80047c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011bc:	2300      	movs	r3, #0
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	4b29      	ldr	r3, [pc, #164]	; (8001268 <SystemClock_Config+0xd0>)
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	4a28      	ldr	r2, [pc, #160]	; (8001268 <SystemClock_Config+0xd0>)
 80011c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ca:	6413      	str	r3, [r2, #64]	; 0x40
 80011cc:	4b26      	ldr	r3, [pc, #152]	; (8001268 <SystemClock_Config+0xd0>)
 80011ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011d8:	2300      	movs	r3, #0
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	4b23      	ldr	r3, [pc, #140]	; (800126c <SystemClock_Config+0xd4>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011e4:	4a21      	ldr	r2, [pc, #132]	; (800126c <SystemClock_Config+0xd4>)
 80011e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011ea:	6013      	str	r3, [r2, #0]
 80011ec:	4b1f      	ldr	r3, [pc, #124]	; (800126c <SystemClock_Config+0xd4>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011f8:	2302      	movs	r3, #2
 80011fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011fc:	2301      	movs	r3, #1
 80011fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001200:	2310      	movs	r3, #16
 8001202:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001204:	2302      	movs	r3, #2
 8001206:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001208:	2300      	movs	r3, #0
 800120a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800120c:	2310      	movs	r3, #16
 800120e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001210:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001214:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001216:	2304      	movs	r3, #4
 8001218:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800121a:	2304      	movs	r3, #4
 800121c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121e:	f107 0320 	add.w	r3, r7, #32
 8001222:	4618      	mov	r0, r3
 8001224:	f002 fa38 	bl	8003698 <HAL_RCC_OscConfig>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800122e:	f000 feaf 	bl	8001f90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001232:	230f      	movs	r3, #15
 8001234:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001236:	2302      	movs	r3, #2
 8001238:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800123e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001242:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	2102      	movs	r1, #2
 800124e:	4618      	mov	r0, r3
 8001250:	f002 fc9a 	bl	8003b88 <HAL_RCC_ClockConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800125a:	f000 fe99 	bl	8001f90 <Error_Handler>
  }
}
 800125e:	bf00      	nop
 8001260:	3750      	adds	r7, #80	; 0x50
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800
 800126c:	40007000 	.word	0x40007000

08001270 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001276:	463b      	mov	r3, r7
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001282:	4b21      	ldr	r3, [pc, #132]	; (8001308 <MX_ADC1_Init+0x98>)
 8001284:	4a21      	ldr	r2, [pc, #132]	; (800130c <MX_ADC1_Init+0x9c>)
 8001286:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001288:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <MX_ADC1_Init+0x98>)
 800128a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800128e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001290:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <MX_ADC1_Init+0x98>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001296:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <MX_ADC1_Init+0x98>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800129c:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <MX_ADC1_Init+0x98>)
 800129e:	2200      	movs	r2, #0
 80012a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012a2:	4b19      	ldr	r3, [pc, #100]	; (8001308 <MX_ADC1_Init+0x98>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012aa:	4b17      	ldr	r3, [pc, #92]	; (8001308 <MX_ADC1_Init+0x98>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012b0:	4b15      	ldr	r3, [pc, #84]	; (8001308 <MX_ADC1_Init+0x98>)
 80012b2:	4a17      	ldr	r2, [pc, #92]	; (8001310 <MX_ADC1_Init+0xa0>)
 80012b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012b6:	4b14      	ldr	r3, [pc, #80]	; (8001308 <MX_ADC1_Init+0x98>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <MX_ADC1_Init+0x98>)
 80012be:	2201      	movs	r2, #1
 80012c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <MX_ADC1_Init+0x98>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <MX_ADC1_Init+0x98>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012d0:	480d      	ldr	r0, [pc, #52]	; (8001308 <MX_ADC1_Init+0x98>)
 80012d2:	f001 f91d 	bl	8002510 <HAL_ADC_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012dc:	f000 fe58 	bl	8001f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012e4:	2301      	movs	r3, #1
 80012e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80012e8:	2307      	movs	r3, #7
 80012ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ec:	463b      	mov	r3, r7
 80012ee:	4619      	mov	r1, r3
 80012f0:	4805      	ldr	r0, [pc, #20]	; (8001308 <MX_ADC1_Init+0x98>)
 80012f2:	f001 fbfd 	bl	8002af0 <HAL_ADC_ConfigChannel>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012fc:	f000 fe48 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000168 	.word	0x20000168
 800130c:	40012000 	.word	0x40012000
 8001310:	0f000001 	.word	0x0f000001

08001314 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001318:	4b17      	ldr	r3, [pc, #92]	; (8001378 <MX_SPI1_Init+0x64>)
 800131a:	4a18      	ldr	r2, [pc, #96]	; (800137c <MX_SPI1_Init+0x68>)
 800131c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800131e:	4b16      	ldr	r3, [pc, #88]	; (8001378 <MX_SPI1_Init+0x64>)
 8001320:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001324:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <MX_SPI1_Init+0x64>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <MX_SPI1_Init+0x64>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <MX_SPI1_Init+0x64>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <MX_SPI1_Init+0x64>)
 800133a:	2200      	movs	r2, #0
 800133c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MX_SPI1_Init+0x64>)
 8001340:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001344:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <MX_SPI1_Init+0x64>)
 8001348:	2200      	movs	r2, #0
 800134a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800134c:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <MX_SPI1_Init+0x64>)
 800134e:	2200      	movs	r2, #0
 8001350:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <MX_SPI1_Init+0x64>)
 8001354:	2200      	movs	r2, #0
 8001356:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001358:	4b07      	ldr	r3, [pc, #28]	; (8001378 <MX_SPI1_Init+0x64>)
 800135a:	2200      	movs	r2, #0
 800135c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <MX_SPI1_Init+0x64>)
 8001360:	220a      	movs	r2, #10
 8001362:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001364:	4804      	ldr	r0, [pc, #16]	; (8001378 <MX_SPI1_Init+0x64>)
 8001366:	f002 fdab 	bl	8003ec0 <HAL_SPI_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001370:	f000 fe0e 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200001b0 	.word	0x200001b0
 800137c:	40013000 	.word	0x40013000

08001380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	; 0x28
 8001384:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
 8001394:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	4b42      	ldr	r3, [pc, #264]	; (80014a4 <MX_GPIO_Init+0x124>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a41      	ldr	r2, [pc, #260]	; (80014a4 <MX_GPIO_Init+0x124>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b3f      	ldr	r3, [pc, #252]	; (80014a4 <MX_GPIO_Init+0x124>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	4b3b      	ldr	r3, [pc, #236]	; (80014a4 <MX_GPIO_Init+0x124>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a3a      	ldr	r2, [pc, #232]	; (80014a4 <MX_GPIO_Init+0x124>)
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b38      	ldr	r3, [pc, #224]	; (80014a4 <MX_GPIO_Init+0x124>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	4b34      	ldr	r3, [pc, #208]	; (80014a4 <MX_GPIO_Init+0x124>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a33      	ldr	r2, [pc, #204]	; (80014a4 <MX_GPIO_Init+0x124>)
 80013d8:	f043 0304 	orr.w	r3, r3, #4
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b31      	ldr	r3, [pc, #196]	; (80014a4 <MX_GPIO_Init+0x124>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	4b2d      	ldr	r3, [pc, #180]	; (80014a4 <MX_GPIO_Init+0x124>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a2c      	ldr	r2, [pc, #176]	; (80014a4 <MX_GPIO_Init+0x124>)
 80013f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b2a      	ldr	r3, [pc, #168]	; (80014a4 <MX_GPIO_Init+0x124>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_RST_Pin|TOUCH_CS_Pin|TFT_DC_Pin|TFT_CS_Pin, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800140c:	4826      	ldr	r0, [pc, #152]	; (80014a8 <MX_GPIO_Init+0x128>)
 800140e:	f002 f929 	bl	8003664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001418:	4824      	ldr	r0, [pc, #144]	; (80014ac <MX_GPIO_Init+0x12c>)
 800141a:	f002 f923 	bl	8003664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Relay_2_Pin|Relay_1_Pin|Tranz_2_Pin|Tranz_1_Pin, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	213c      	movs	r1, #60	; 0x3c
 8001422:	4823      	ldr	r0, [pc, #140]	; (80014b0 <MX_GPIO_Init+0x130>)
 8001424:	f002 f91e 	bl	8003664 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IRQ_Pin hall2_Pin hall1_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin|hall2_Pin|hall1_Pin;
 8001428:	f248 03c0 	movw	r3, #32960	; 0x80c0
 800142c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800142e:	2300      	movs	r3, #0
 8001430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4619      	mov	r1, r3
 800143c:	481c      	ldr	r0, [pc, #112]	; (80014b0 <MX_GPIO_Init+0x130>)
 800143e:	f001 fe91 	bl	8003164 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_RST_Pin TOUCH_CS_Pin TFT_DC_Pin TFT_CS_Pin */
  GPIO_InitStruct.Pin = TFT_RST_Pin|TOUCH_CS_Pin|TFT_DC_Pin|TFT_CS_Pin;
 8001442:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001448:	2301      	movs	r3, #1
 800144a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	2300      	movs	r3, #0
 8001452:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	4619      	mov	r1, r3
 800145a:	4813      	ldr	r0, [pc, #76]	; (80014a8 <MX_GPIO_Init+0x128>)
 800145c:	f001 fe82 	bl	8003164 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 8001460:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001466:	2301      	movs	r3, #1
 8001468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	480c      	ldr	r0, [pc, #48]	; (80014ac <MX_GPIO_Init+0x12c>)
 800147a:	f001 fe73 	bl	8003164 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relay_2_Pin Relay_1_Pin Tranz_2_Pin Tranz_1_Pin */
  GPIO_InitStruct.Pin = Relay_2_Pin|Relay_1_Pin|Tranz_2_Pin|Tranz_1_Pin;
 800147e:	233c      	movs	r3, #60	; 0x3c
 8001480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001482:	2301      	movs	r3, #1
 8001484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001486:	2302      	movs	r3, #2
 8001488:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2300      	movs	r3, #0
 800148c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	4619      	mov	r1, r3
 8001494:	4806      	ldr	r0, [pc, #24]	; (80014b0 <MX_GPIO_Init+0x130>)
 8001496:	f001 fe65 	bl	8003164 <HAL_GPIO_Init>

}
 800149a:	bf00      	nop
 800149c:	3728      	adds	r7, #40	; 0x28
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020400 	.word	0x40020400
 80014ac:	40020800 	.word	0x40020800
 80014b0:	40020000 	.word	0x40020000

080014b4 <startup>:

/* USER CODE BEGIN 4 */
void startup(void){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	__HAL_SPI_ENABLE(DISP_SPI_PTR); // включаем SPI
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <startup+0x4c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <startup+0x4c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014c6:	601a      	str	r2, [r3, #0]
	 // HAL_TIM_Base_Start(&htim2);
	 // HAL_ADC_Start_DMA(&hadc1, adcBuffer, 2);
	 HAL_ADC_Start(&hadc1);
 80014c8:	480e      	ldr	r0, [pc, #56]	; (8001504 <startup+0x50>)
 80014ca:	f001 f865 	bl	8002598 <HAL_ADC_Start>
	  DISP_CS_UNSELECT;
 80014ce:	2201      	movs	r2, #1
 80014d0:	2180      	movs	r1, #128	; 0x80
 80014d2:	480d      	ldr	r0, [pc, #52]	; (8001508 <startup+0x54>)
 80014d4:	f002 f8c6 	bl	8003664 <HAL_GPIO_WritePin>
	  TOUCH_CS_UNSELECT; // это нужно только если есть тач
 80014d8:	2201      	movs	r2, #1
 80014da:	2140      	movs	r1, #64	; 0x40
 80014dc:	480a      	ldr	r0, [pc, #40]	; (8001508 <startup+0x54>)
 80014de:	f002 f8c1 	bl	8003664 <HAL_GPIO_WritePin>

	  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  ILI9341_Init(); // инициализация дисплея
 80014e2:	f7ff fa11 	bl	8000908 <ILI9341_Init>

	  /////////////////////////// далее демонстрируются различные пользовательские функции ////////////////////////////
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2); // установка ориентации экрана (варианты в файле ILI9341_GFX.h)
 80014e6:	2003      	movs	r0, #3
 80014e8:	f7ff f9a0 	bl	800082c <ILI9341_Set_Rotation>

	  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  ILI9341_Fill_Screen(MYFON); // заливка всего экрана цветом (цвета в файле ILI9341_GFX.h)
 80014ec:	f642 1065 	movw	r0, #10597	; 0x2965
 80014f0:	f7ff fb66 	bl	8000bc0 <ILI9341_Fill_Screen>
	  //ILI9341_WriteString(10, 10, "Hello World", Font_7x10, WHITE, MYFON);

	  button_draw();
 80014f4:	f000 f966 	bl	80017c4 <button_draw>
	  button_draw_icons();
 80014f8:	f000 f992 	bl	8001820 <button_draw_icons>
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	200001b0 	.word	0x200001b0
 8001504:	20000168 	.word	0x20000168
 8001508:	40020400 	.word	0x40020400

0800150c <touch_work>:

_Bool touch_work(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0

	_Bool what_to_send = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	71fb      	strb	r3, [r7, #7]
  if(HAL_GPIO_ReadPin(IRQ_GPIO_Port, IRQ_Pin) == GPIO_PIN_RESET && flag_press) // если нажат тачскрин
 8001516:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800151a:	4841      	ldr	r0, [pc, #260]	; (8001620 <touch_work+0x114>)
 800151c:	f002 f88a 	bl	8003634 <HAL_GPIO_ReadPin>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d143      	bne.n	80015ae <touch_work+0xa2>
 8001526:	4b3f      	ldr	r3, [pc, #252]	; (8001624 <touch_work+0x118>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d03f      	beq.n	80015ae <touch_work+0xa2>
  {

	  	  x = 0;
 800152e:	4b3e      	ldr	r3, [pc, #248]	; (8001628 <touch_work+0x11c>)
 8001530:	2200      	movs	r2, #0
 8001532:	801a      	strh	r2, [r3, #0]
          y = 0;
 8001534:	4b3d      	ldr	r3, [pc, #244]	; (800162c <touch_work+0x120>)
 8001536:	2200      	movs	r2, #0
 8001538:	801a      	strh	r2, [r3, #0]

          TOUCH_CS_UNSELECT;
 800153a:	2201      	movs	r2, #1
 800153c:	2140      	movs	r1, #64	; 0x40
 800153e:	483c      	ldr	r0, [pc, #240]	; (8001630 <touch_work+0x124>)
 8001540:	f002 f890 	bl	8003664 <HAL_GPIO_WritePin>
          DISP_CS_UNSELECT;
 8001544:	2201      	movs	r2, #1
 8001546:	2180      	movs	r1, #128	; 0x80
 8001548:	4839      	ldr	r0, [pc, #228]	; (8001630 <touch_work+0x124>)
 800154a:	f002 f88b 	bl	8003664 <HAL_GPIO_WritePin>

          HAL_SPI_DeInit(DISP_SPI_PTR);
 800154e:	4839      	ldr	r0, [pc, #228]	; (8001634 <touch_work+0x128>)
 8001550:	f002 fd3f 	bl	8003fd2 <HAL_SPI_DeInit>
          hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001554:	4b37      	ldr	r3, [pc, #220]	; (8001634 <touch_work+0x128>)
 8001556:	2230      	movs	r2, #48	; 0x30
 8001558:	61da      	str	r2, [r3, #28]
          HAL_SPI_Init(DISP_SPI_PTR);
 800155a:	4836      	ldr	r0, [pc, #216]	; (8001634 <touch_work+0x128>)
 800155c:	f002 fcb0 	bl	8003ec0 <HAL_SPI_Init>

          if(ILI9341_TouchGetCoordinates(&x, &y))
 8001560:	4932      	ldr	r1, [pc, #200]	; (800162c <touch_work+0x120>)
 8001562:	4831      	ldr	r0, [pc, #196]	; (8001628 <touch_work+0x11c>)
 8001564:	f000 fe70 	bl	8002248 <ILI9341_TouchGetCoordinates>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d004      	beq.n	8001578 <touch_work+0x6c>
          {
                  flag_press = 0;
 800156e:	4b2d      	ldr	r3, [pc, #180]	; (8001624 <touch_work+0x118>)
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
                  what_to_send = 1;
 8001574:	2301      	movs	r3, #1
 8001576:	71fb      	strb	r3, [r7, #7]
//                  //HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 100);
//                  buf[strlen(buf) - 1] = '\0';
                  ////////////////////////////////////////////////////
          }

          HAL_SPI_DeInit(DISP_SPI_PTR);
 8001578:	482e      	ldr	r0, [pc, #184]	; (8001634 <touch_work+0x128>)
 800157a:	f002 fd2a 	bl	8003fd2 <HAL_SPI_DeInit>
          hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800157e:	4b2d      	ldr	r3, [pc, #180]	; (8001634 <touch_work+0x128>)
 8001580:	2200      	movs	r2, #0
 8001582:	61da      	str	r2, [r3, #28]
          HAL_SPI_Init(DISP_SPI_PTR);
 8001584:	482b      	ldr	r0, [pc, #172]	; (8001634 <touch_work+0x128>)
 8001586:	f002 fc9b 	bl	8003ec0 <HAL_SPI_Init>

          __HAL_SPI_ENABLE(DISP_SPI_PTR);
 800158a:	4b2a      	ldr	r3, [pc, #168]	; (8001634 <touch_work+0x128>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b28      	ldr	r3, [pc, #160]	; (8001634 <touch_work+0x128>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001598:	601a      	str	r2, [r3, #0]
          DISP_CS_SELECT;
 800159a:	2200      	movs	r2, #0
 800159c:	2180      	movs	r1, #128	; 0x80
 800159e:	4824      	ldr	r0, [pc, #144]	; (8001630 <touch_work+0x124>)
 80015a0:	f002 f860 	bl	8003664 <HAL_GPIO_WritePin>

          time_press = HAL_GetTick();
 80015a4:	f000 ff84 	bl	80024b0 <HAL_GetTick>
 80015a8:	4603      	mov	r3, r0
 80015aa:	4a23      	ldr	r2, [pc, #140]	; (8001638 <touch_work+0x12c>)
 80015ac:	6013      	str	r3, [r2, #0]
  }

  if(!flag_press && (HAL_GetTick() - time_press) > 200) // задержка до следующего нажатия
 80015ae:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <touch_work+0x118>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10a      	bne.n	80015cc <touch_work+0xc0>
 80015b6:	f000 ff7b 	bl	80024b0 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <touch_work+0x12c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2bc8      	cmp	r3, #200	; 0xc8
 80015c4:	d902      	bls.n	80015cc <touch_work+0xc0>
  {
          flag_press = 1;
 80015c6:	4b17      	ldr	r3, [pc, #92]	; (8001624 <touch_work+0x118>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	701a      	strb	r2, [r3, #0]
  }


  //////////////////////////// удержание кнопки //////////////////////////////
  if(!flag_hold && HAL_GPIO_ReadPin(IRQ_GPIO_Port, IRQ_Pin) != GPIO_PIN_RESET)
 80015cc:	4b1b      	ldr	r3, [pc, #108]	; (800163c <touch_work+0x130>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d10a      	bne.n	80015ea <touch_work+0xde>
 80015d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015d8:	4811      	ldr	r0, [pc, #68]	; (8001620 <touch_work+0x114>)
 80015da:	f002 f82b 	bl	8003634 <HAL_GPIO_ReadPin>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d002      	beq.n	80015ea <touch_work+0xde>
  {
          flag_hold = 1;
 80015e4:	4b15      	ldr	r3, [pc, #84]	; (800163c <touch_work+0x130>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	701a      	strb	r2, [r3, #0]
  }

  if(!flag_hold && (HAL_GetTick() - timme_hold) > 2000) // 2 sek удержание кнопки
 80015ea:	4b14      	ldr	r3, [pc, #80]	; (800163c <touch_work+0x130>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d110      	bne.n	8001614 <touch_work+0x108>
 80015f2:	f000 ff5d 	bl	80024b0 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <touch_work+0x134>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001602:	d907      	bls.n	8001614 <touch_work+0x108>
  {
          if(HAL_GPIO_ReadPin(IRQ_GPIO_Port, IRQ_Pin) == GPIO_PIN_RESET)
 8001604:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001608:	4805      	ldr	r0, [pc, #20]	; (8001620 <touch_work+0x114>)
 800160a:	f002 f813 	bl	8003634 <HAL_GPIO_ReadPin>
//                          ILI9341_WriteString(10, 150, "LONG PRESS_1", Font_11x18, WHITE, MYFON); // отладка
//                          // что-то делаем
//                  }
          }

          flag_hold = 1;
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <touch_work+0x130>)
 8001610:	2201      	movs	r2, #1
 8001612:	701a      	strb	r2, [r3, #0]
  }
   return what_to_send;
 8001614:	79fb      	ldrb	r3, [r7, #7]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40020000 	.word	0x40020000
 8001624:	2000000c 	.word	0x2000000c
 8001628:	20000146 	.word	0x20000146
 800162c:	20000148 	.word	0x20000148
 8001630:	40020400 	.word	0x40020400
 8001634:	200001b0 	.word	0x200001b0
 8001638:	20000130 	.word	0x20000130
 800163c:	2000000d 	.word	0x2000000d
 8001640:	20000138 	.word	0x20000138

08001644 <main_cicle>:




void main_cicle(void){
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
int ff;
	if(touch_work()){
 800164a:	f7ff ff5f 	bl	800150c <touch_work>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <main_cicle+0x18>
		ff = button_click();
 8001654:	f000 f960 	bl	8001918 <button_click>
 8001658:	4603      	mov	r3, r0
 800165a:	607b      	str	r3, [r7, #4]
//		ILI9341_WriteString(10, 120, buf, Font_7x10, WHITE, MYFON);
//		snprintf(buf, 64, "button = %d", ff);
//		ILI9341_WriteString(10, 170, buf, Font_7x10, WHITE, MYFON);
		//perekluchatel();
	}
	ADC_out();
 800165c:	f000 fa16 	bl	8001a8c <ADC_out>
	adc_show();
 8001660:	f000 f80a 	bl	8001678 <adc_show>
//		snprintf(buf, 64, "%d", menu_position[i] );
//		ILI9341_WriteString(10+10*i, 120, buf, Font_7x10, WHITE, MYFON);
//	}


	perekluchatel(ff);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 fa8d 	bl	8001b84 <perekluchatel>




curent_state_raport();
 800166a:	f000 f873 	bl	8001754 <curent_state_raport>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <adc_show>:

void adc_show(void){
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af04      	add	r7, sp, #16
		snprintf(buf, 64, "T GOL = %d", adc_buf[0]);
 800167e:	4b2d      	ldr	r3, [pc, #180]	; (8001734 <adc_show+0xbc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a2d      	ldr	r2, [pc, #180]	; (8001738 <adc_show+0xc0>)
 8001684:	2140      	movs	r1, #64	; 0x40
 8001686:	482d      	ldr	r0, [pc, #180]	; (800173c <adc_show+0xc4>)
 8001688:	f003 f8a6 	bl	80047d8 <sniprintf>
		ILI9341_WriteString(10, 230, buf, Font_7x10, WHITE, MYFON);
 800168c:	4b2c      	ldr	r3, [pc, #176]	; (8001740 <adc_show+0xc8>)
 800168e:	f642 1265 	movw	r2, #10597	; 0x2965
 8001692:	9202      	str	r2, [sp, #8]
 8001694:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001698:	9201      	str	r2, [sp, #4]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	9200      	str	r2, [sp, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a26      	ldr	r2, [pc, #152]	; (800173c <adc_show+0xc4>)
 80016a2:	21e6      	movs	r1, #230	; 0xe6
 80016a4:	200a      	movs	r0, #10
 80016a6:	f7ff fd1f 	bl	80010e8 <ILI9341_WriteString>
		snprintf(buf, 64, "T TRU = %d", adc_buf[1]);
 80016aa:	4b22      	ldr	r3, [pc, #136]	; (8001734 <adc_show+0xbc>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	4a25      	ldr	r2, [pc, #148]	; (8001744 <adc_show+0xcc>)
 80016b0:	2140      	movs	r1, #64	; 0x40
 80016b2:	4822      	ldr	r0, [pc, #136]	; (800173c <adc_show+0xc4>)
 80016b4:	f003 f890 	bl	80047d8 <sniprintf>
		ILI9341_WriteString(100, 230, buf, Font_7x10, WHITE, MYFON);
 80016b8:	4b21      	ldr	r3, [pc, #132]	; (8001740 <adc_show+0xc8>)
 80016ba:	f642 1265 	movw	r2, #10597	; 0x2965
 80016be:	9202      	str	r2, [sp, #8]
 80016c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016c4:	9201      	str	r2, [sp, #4]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	9200      	str	r2, [sp, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a1b      	ldr	r2, [pc, #108]	; (800173c <adc_show+0xc4>)
 80016ce:	21e6      	movs	r1, #230	; 0xe6
 80016d0:	2064      	movs	r0, #100	; 0x64
 80016d2:	f7ff fd09 	bl	80010e8 <ILI9341_WriteString>


		snprintf(buf, 64, "T GOL instal = %d", t_installed[0]);
 80016d6:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <adc_show+0xd0>)
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	4a1c      	ldr	r2, [pc, #112]	; (800174c <adc_show+0xd4>)
 80016dc:	2140      	movs	r1, #64	; 0x40
 80016de:	4817      	ldr	r0, [pc, #92]	; (800173c <adc_show+0xc4>)
 80016e0:	f003 f87a 	bl	80047d8 <sniprintf>
		ILI9341_WriteString(10, 210, buf, Font_7x10, WHITE, MYFON);
 80016e4:	4b16      	ldr	r3, [pc, #88]	; (8001740 <adc_show+0xc8>)
 80016e6:	f642 1265 	movw	r2, #10597	; 0x2965
 80016ea:	9202      	str	r2, [sp, #8]
 80016ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016f0:	9201      	str	r2, [sp, #4]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	9200      	str	r2, [sp, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a10      	ldr	r2, [pc, #64]	; (800173c <adc_show+0xc4>)
 80016fa:	21d2      	movs	r1, #210	; 0xd2
 80016fc:	200a      	movs	r0, #10
 80016fe:	f7ff fcf3 	bl	80010e8 <ILI9341_WriteString>
		snprintf(buf, 64, "T TRUB instal = %d", t_installed[1]);
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <adc_show+0xd0>)
 8001704:	885b      	ldrh	r3, [r3, #2]
 8001706:	4a12      	ldr	r2, [pc, #72]	; (8001750 <adc_show+0xd8>)
 8001708:	2140      	movs	r1, #64	; 0x40
 800170a:	480c      	ldr	r0, [pc, #48]	; (800173c <adc_show+0xc4>)
 800170c:	f003 f864 	bl	80047d8 <sniprintf>
		ILI9341_WriteString(160, 210, buf, Font_7x10, WHITE, MYFON);
 8001710:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <adc_show+0xc8>)
 8001712:	f642 1265 	movw	r2, #10597	; 0x2965
 8001716:	9202      	str	r2, [sp, #8]
 8001718:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800171c:	9201      	str	r2, [sp, #4]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	9200      	str	r2, [sp, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a05      	ldr	r2, [pc, #20]	; (800173c <adc_show+0xc4>)
 8001726:	21d2      	movs	r1, #210	; 0xd2
 8001728:	20a0      	movs	r0, #160	; 0xa0
 800172a:	f7ff fcdd 	bl	80010e8 <ILI9341_WriteString>

}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000208 	.word	0x20000208
 8001738:	080050b4 	.word	0x080050b4
 800173c:	200000f0 	.word	0x200000f0
 8001740:	20000004 	.word	0x20000004
 8001744:	080050c0 	.word	0x080050c0
 8001748:	20000010 	.word	0x20000010
 800174c:	080050cc 	.word	0x080050cc
 8001750:	080050e0 	.word	0x080050e0

08001754 <curent_state_raport>:

void curent_state_raport(void){
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af04      	add	r7, sp, #16
	for(int i=0;i<10;i++){
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	e021      	b.n	80017a4 <curent_state_raport+0x50>
			snprintf(buf, 64, "%d", menu_position[i] );
 8001760:	4a14      	ldr	r2, [pc, #80]	; (80017b4 <curent_state_raport+0x60>)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	4a13      	ldr	r2, [pc, #76]	; (80017b8 <curent_state_raport+0x64>)
 800176a:	2140      	movs	r1, #64	; 0x40
 800176c:	4813      	ldr	r0, [pc, #76]	; (80017bc <curent_state_raport+0x68>)
 800176e:	f003 f833 	bl	80047d8 <sniprintf>
			ILI9341_WriteString(10+10*i, 70, buf, Font_7x10, WHITE, MYFON);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3301      	adds	r3, #1
 8001776:	b29b      	uxth	r3, r3
 8001778:	461a      	mov	r2, r3
 800177a:	0092      	lsls	r2, r2, #2
 800177c:	4413      	add	r3, r2
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	b298      	uxth	r0, r3
 8001782:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <curent_state_raport+0x6c>)
 8001784:	f642 1265 	movw	r2, #10597	; 0x2965
 8001788:	9202      	str	r2, [sp, #8]
 800178a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800178e:	9201      	str	r2, [sp, #4]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	9200      	str	r2, [sp, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a09      	ldr	r2, [pc, #36]	; (80017bc <curent_state_raport+0x68>)
 8001798:	2146      	movs	r1, #70	; 0x46
 800179a:	f7ff fca5 	bl	80010e8 <ILI9341_WriteString>
	for(int i=0;i<10;i++){
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3301      	adds	r3, #1
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b09      	cmp	r3, #9
 80017a8:	ddda      	ble.n	8001760 <curent_state_raport+0xc>
		}
}
 80017aa:	bf00      	nop
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	2000013c 	.word	0x2000013c
 80017b8:	080050f4 	.word	0x080050f4
 80017bc:	200000f0 	.word	0x200000f0
 80017c0:	20000004 	.word	0x20000004

080017c4 <button_draw>:




void button_draw(void){
 80017c4:	b590      	push	{r4, r7, lr}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af02      	add	r7, sp, #8
	for(int i = 0; i <10; i++){
 80017ca:	2300      	movs	r3, #0
 80017cc:	607b      	str	r3, [r7, #4]
 80017ce:	e01c      	b.n	800180a <button_draw+0x46>
		draw_rect_tol(buttons_coord[i][0],buttons_coord[i][1],buttons_coord[i][2],buttons_coord[i][3],RED,3);
 80017d0:	4a12      	ldr	r2, [pc, #72]	; (800181c <button_draw+0x58>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f832 0033 	ldrh.w	r0, [r2, r3, lsl #3]
 80017d8:	4a10      	ldr	r2, [pc, #64]	; (800181c <button_draw+0x58>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	4413      	add	r3, r2
 80017e0:	8859      	ldrh	r1, [r3, #2]
 80017e2:	4a0e      	ldr	r2, [pc, #56]	; (800181c <button_draw+0x58>)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	4413      	add	r3, r2
 80017ea:	889a      	ldrh	r2, [r3, #4]
 80017ec:	4c0b      	ldr	r4, [pc, #44]	; (800181c <button_draw+0x58>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	4423      	add	r3, r4
 80017f4:	88db      	ldrh	r3, [r3, #6]
 80017f6:	2403      	movs	r4, #3
 80017f8:	9401      	str	r4, [sp, #4]
 80017fa:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80017fe:	9400      	str	r4, [sp, #0]
 8001800:	f000 f852 	bl	80018a8 <draw_rect_tol>
	for(int i = 0; i <10; i++){
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3301      	adds	r3, #1
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b09      	cmp	r3, #9
 800180e:	dddf      	ble.n	80017d0 <button_draw+0xc>
		//ILI9341_WriteString(buttons_coord[i][0]+5, buttons_coord[i][1]+5,but_icons[i], Font_7x10, RED, MYFON);
	}
}
 8001810:	bf00      	nop
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	bd90      	pop	{r4, r7, pc}
 800181a:	bf00      	nop
 800181c:	20000014 	.word	0x20000014

08001820 <button_draw_icons>:
void button_draw_icons(void){
 8001820:	b5b0      	push	{r4, r5, r7, lr}
 8001822:	b090      	sub	sp, #64	; 0x40
 8001824:	af04      	add	r7, sp, #16
	char *but_icons[10] ={
 8001826:	4b1d      	ldr	r3, [pc, #116]	; (800189c <button_draw_icons+0x7c>)
 8001828:	1d3c      	adds	r4, r7, #4
 800182a:	461d      	mov	r5, r3
 800182c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800182e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001830:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001832:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001834:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001838:	e884 0003 	stmia.w	r4, {r0, r1}
	"R 1",
	"R 2",
	"T 1",
	"T 2"
	};
	for(int i = 0; i <10; i++){
 800183c:	2300      	movs	r3, #0
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001840:	e023      	b.n	800188a <button_draw_icons+0x6a>
			//draw_rect_tol(buttons_coord[i][0],buttons_coord[i][1],buttons_coord[i][2],buttons_coord[i][3],RED,3);
			ILI9341_WriteString(buttons_coord[i][0]+5, buttons_coord[i][1]+5,but_icons[i], Font_7x10, RED, MYFON);
 8001842:	4a17      	ldr	r2, [pc, #92]	; (80018a0 <button_draw_icons+0x80>)
 8001844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001846:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800184a:	3305      	adds	r3, #5
 800184c:	b298      	uxth	r0, r3
 800184e:	4a14      	ldr	r2, [pc, #80]	; (80018a0 <button_draw_icons+0x80>)
 8001850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	4413      	add	r3, r2
 8001856:	885b      	ldrh	r3, [r3, #2]
 8001858:	3305      	adds	r3, #5
 800185a:	b299      	uxth	r1, r3
 800185c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001864:	4413      	add	r3, r2
 8001866:	f853 4c2c 	ldr.w	r4, [r3, #-44]
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <button_draw_icons+0x84>)
 800186c:	f642 1265 	movw	r2, #10597	; 0x2965
 8001870:	9202      	str	r2, [sp, #8]
 8001872:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001876:	9201      	str	r2, [sp, #4]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	9200      	str	r2, [sp, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4622      	mov	r2, r4
 8001880:	f7ff fc32 	bl	80010e8 <ILI9341_WriteString>
	for(int i = 0; i <10; i++){
 8001884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001886:	3301      	adds	r3, #1
 8001888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800188a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800188c:	2b09      	cmp	r3, #9
 800188e:	ddd8      	ble.n	8001842 <button_draw_icons+0x22>
		}
}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	3730      	adds	r7, #48	; 0x30
 8001896:	46bd      	mov	sp, r7
 8001898:	bdb0      	pop	{r4, r5, r7, pc}
 800189a:	bf00      	nop
 800189c:	080050f8 	.word	0x080050f8
 80018a0:	20000014 	.word	0x20000014
 80018a4:	20000004 	.word	0x20000004

080018a8 <draw_rect_tol>:


void draw_rect_tol (uint16_t kx1,uint16_t ky1,uint16_t kx2,uint16_t ky2,uint16_t fon,uint16_t tol){
 80018a8:	b590      	push	{r4, r7, lr}
 80018aa:	b087      	sub	sp, #28
 80018ac:	af02      	add	r7, sp, #8
 80018ae:	4604      	mov	r4, r0
 80018b0:	4608      	mov	r0, r1
 80018b2:	4611      	mov	r1, r2
 80018b4:	461a      	mov	r2, r3
 80018b6:	4623      	mov	r3, r4
 80018b8:	80fb      	strh	r3, [r7, #6]
 80018ba:	4603      	mov	r3, r0
 80018bc:	80bb      	strh	r3, [r7, #4]
 80018be:	460b      	mov	r3, r1
 80018c0:	807b      	strh	r3, [r7, #2]
 80018c2:	4613      	mov	r3, r2
 80018c4:	803b      	strh	r3, [r7, #0]
	for(int i=0;i<tol;i++){
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	e01c      	b.n	8001906 <draw_rect_tol+0x5e>
		ILI9341_Draw_Hollow_Rectangle_Coord(kx1-i, ky1-i, kx2+i, ky2+i, fon);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	88fa      	ldrh	r2, [r7, #6]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	b298      	uxth	r0, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	b29b      	uxth	r3, r3
 80018da:	88ba      	ldrh	r2, [r7, #4]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	b299      	uxth	r1, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	887b      	ldrh	r3, [r7, #2]
 80018e6:	4413      	add	r3, r2
 80018e8:	b29c      	uxth	r4, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	883b      	ldrh	r3, [r7, #0]
 80018f0:	4413      	add	r3, r2
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	8c3b      	ldrh	r3, [r7, #32]
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	4613      	mov	r3, r2
 80018fa:	4622      	mov	r2, r4
 80018fc:	f7ff fb18 	bl	8000f30 <ILI9341_Draw_Hollow_Rectangle_Coord>
	for(int i=0;i<tol;i++){
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	3301      	adds	r3, #1
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	429a      	cmp	r2, r3
 800190c:	dbde      	blt.n	80018cc <draw_rect_tol+0x24>
	}
}
 800190e:	bf00      	nop
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	bd90      	pop	{r4, r7, pc}

08001918 <button_click>:

uint8_t button_click(void){
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b085      	sub	sp, #20
 800191c:	af02      	add	r7, sp, #8
	uint8_t what_to_return;
	_Bool is_the_flag = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	71bb      	strb	r3, [r7, #6]
	for(int i = 0; i <10; i++){
 8001922:	2300      	movs	r3, #0
 8001924:	603b      	str	r3, [r7, #0]
 8001926:	e076      	b.n	8001a16 <button_click+0xfe>
		if(x > buttons_coord[i][0] && x < buttons_coord[i][2] && y > buttons_coord[i][1] && y < buttons_coord[i][3]){
 8001928:	4a43      	ldr	r2, [pc, #268]	; (8001a38 <button_click+0x120>)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 8001930:	4b42      	ldr	r3, [pc, #264]	; (8001a3c <button_click+0x124>)
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	d26b      	bcs.n	8001a10 <button_click+0xf8>
 8001938:	4a3f      	ldr	r2, [pc, #252]	; (8001a38 <button_click+0x120>)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	4413      	add	r3, r2
 8001940:	889a      	ldrh	r2, [r3, #4]
 8001942:	4b3e      	ldr	r3, [pc, #248]	; (8001a3c <button_click+0x124>)
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d962      	bls.n	8001a10 <button_click+0xf8>
 800194a:	4a3b      	ldr	r2, [pc, #236]	; (8001a38 <button_click+0x120>)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	4413      	add	r3, r2
 8001952:	885a      	ldrh	r2, [r3, #2]
 8001954:	4b3a      	ldr	r3, [pc, #232]	; (8001a40 <button_click+0x128>)
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d259      	bcs.n	8001a10 <button_click+0xf8>
 800195c:	4a36      	ldr	r2, [pc, #216]	; (8001a38 <button_click+0x120>)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	4413      	add	r3, r2
 8001964:	88da      	ldrh	r2, [r3, #6]
 8001966:	4b36      	ldr	r3, [pc, #216]	; (8001a40 <button_click+0x128>)
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d950      	bls.n	8001a10 <button_click+0xf8>

			draw_rect_tol(buttons_coord[i][0],buttons_coord[i][1],buttons_coord[i][2],buttons_coord[i][3],GREEN,3);
 800196e:	4a32      	ldr	r2, [pc, #200]	; (8001a38 <button_click+0x120>)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	f832 0033 	ldrh.w	r0, [r2, r3, lsl #3]
 8001976:	4a30      	ldr	r2, [pc, #192]	; (8001a38 <button_click+0x120>)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	4413      	add	r3, r2
 800197e:	8859      	ldrh	r1, [r3, #2]
 8001980:	4a2d      	ldr	r2, [pc, #180]	; (8001a38 <button_click+0x120>)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	4413      	add	r3, r2
 8001988:	889a      	ldrh	r2, [r3, #4]
 800198a:	4c2b      	ldr	r4, [pc, #172]	; (8001a38 <button_click+0x120>)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	4423      	add	r3, r4
 8001992:	88db      	ldrh	r3, [r3, #6]
 8001994:	2403      	movs	r4, #3
 8001996:	9401      	str	r4, [sp, #4]
 8001998:	f44f 64fc 	mov.w	r4, #2016	; 0x7e0
 800199c:	9400      	str	r4, [sp, #0]
 800199e:	f7ff ff83 	bl	80018a8 <draw_rect_tol>
			HAL_Delay(500);
 80019a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019a6:	f000 fd8f 	bl	80024c8 <HAL_Delay>
			draw_rect_tol(buttons_coord[i][0],buttons_coord[i][1],buttons_coord[i][2],buttons_coord[i][3],RED,3);
 80019aa:	4a23      	ldr	r2, [pc, #140]	; (8001a38 <button_click+0x120>)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	f832 0033 	ldrh.w	r0, [r2, r3, lsl #3]
 80019b2:	4a21      	ldr	r2, [pc, #132]	; (8001a38 <button_click+0x120>)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	4413      	add	r3, r2
 80019ba:	8859      	ldrh	r1, [r3, #2]
 80019bc:	4a1e      	ldr	r2, [pc, #120]	; (8001a38 <button_click+0x120>)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	4413      	add	r3, r2
 80019c4:	889a      	ldrh	r2, [r3, #4]
 80019c6:	4c1c      	ldr	r4, [pc, #112]	; (8001a38 <button_click+0x120>)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	4423      	add	r3, r4
 80019ce:	88db      	ldrh	r3, [r3, #6]
 80019d0:	2403      	movs	r4, #3
 80019d2:	9401      	str	r4, [sp, #4]
 80019d4:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80019d8:	9400      	str	r4, [sp, #0]
 80019da:	f7ff ff65 	bl	80018a8 <draw_rect_tol>

			what_to_return = i;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	71fb      	strb	r3, [r7, #7]
			is_the_flag = 1;
 80019e2:	2301      	movs	r3, #1
 80019e4:	71bb      	strb	r3, [r7, #6]
			menu_position[i] = !menu_position[i];
 80019e6:	4a17      	ldr	r2, [pc, #92]	; (8001a44 <button_click+0x12c>)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	4413      	add	r3, r2
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	bf14      	ite	ne
 80019f2:	2301      	movne	r3, #1
 80019f4:	2300      	moveq	r3, #0
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	f083 0301 	eor.w	r3, r3, #1
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	b2d9      	uxtb	r1, r3
 8001a04:	4a0f      	ldr	r2, [pc, #60]	; (8001a44 <button_click+0x12c>)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	4413      	add	r3, r2
 8001a0a:	460a      	mov	r2, r1
 8001a0c:	701a      	strb	r2, [r3, #0]

			break;
 8001a0e:	e005      	b.n	8001a1c <button_click+0x104>
	for(int i = 0; i <10; i++){
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	3301      	adds	r3, #1
 8001a14:	603b      	str	r3, [r7, #0]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	2b09      	cmp	r3, #9
 8001a1a:	dd85      	ble.n	8001928 <button_click+0x10>
		}

	}
	if(is_the_flag == 0){
 8001a1c:	79bb      	ldrb	r3, [r7, #6]
 8001a1e:	f083 0301 	eor.w	r3, r3, #1
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <button_click+0x114>
		what_to_return = 10;
 8001a28:	230a      	movs	r3, #10
 8001a2a:	71fb      	strb	r3, [r7, #7]
	}
	return what_to_return;
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd90      	pop	{r4, r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000014 	.word	0x20000014
 8001a3c:	20000146 	.word	0x20000146
 8001a40:	20000148 	.word	0x20000148
 8001a44:	2000013c 	.word	0x2000013c

08001a48 <ADC_SetActiveChannel>:

void ADC_SetActiveChannel(ADC_HandleTypeDef *hadc, uint32_t AdcChannel)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a52:	f107 0308 	add.w	r3, r7, #8
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	60da      	str	r2, [r3, #12]
  sConfig.Channel = AdcChannel;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 8001a64:	2301      	movs	r3, #1
 8001a66:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8001a6c:	f107 0308 	add.w	r3, r7, #8
 8001a70:	4619      	mov	r1, r3
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f001 f83c 	bl	8002af0 <HAL_ADC_ConfigChannel>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <ADC_SetActiveChannel+0x3a>
  {
   Error_Handler();
 8001a7e:	f000 fa87 	bl	8001f90 <Error_Handler>
  }
}
 8001a82:	bf00      	nop
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <ADC_out>:

void ADC_out(void){
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 int preskal = 100;
 8001a92:	2364      	movs	r3, #100	; 0x64
 8001a94:	607b      	str	r3, [r7, #4]

	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8001a96:	2164      	movs	r1, #100	; 0x64
 8001a98:	4834      	ldr	r0, [pc, #208]	; (8001b6c <ADC_out+0xe0>)
 8001a9a:	f000 fe31 	bl	8002700 <HAL_ADC_PollForConversion>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10c      	bne.n	8001abe <ADC_out+0x32>
	    {
		adcBuffer[0] = HAL_ADC_GetValue(&hadc1); // Get X value
 8001aa4:	4831      	ldr	r0, [pc, #196]	; (8001b6c <ADC_out+0xe0>)
 8001aa6:	f000 fff7 	bl	8002a98 <HAL_ADC_GetValue>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	4a30      	ldr	r2, [pc, #192]	; (8001b70 <ADC_out+0xe4>)
 8001aae:	6013      	str	r3, [r2, #0]
	      ADC_SetActiveChannel(&hadc1, ADC_CHANNEL_0);
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	482e      	ldr	r0, [pc, #184]	; (8001b6c <ADC_out+0xe0>)
 8001ab4:	f7ff ffc8 	bl	8001a48 <ADC_SetActiveChannel>
	      HAL_ADC_Start(&hadc1);
 8001ab8:	482c      	ldr	r0, [pc, #176]	; (8001b6c <ADC_out+0xe0>)
 8001aba:	f000 fd6d 	bl	8002598 <HAL_ADC_Start>
	    }

	    if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8001abe:	2164      	movs	r1, #100	; 0x64
 8001ac0:	482a      	ldr	r0, [pc, #168]	; (8001b6c <ADC_out+0xe0>)
 8001ac2:	f000 fe1d 	bl	8002700 <HAL_ADC_PollForConversion>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d10c      	bne.n	8001ae6 <ADC_out+0x5a>
	    {
	    	adcBuffer[1] = HAL_ADC_GetValue(&hadc1); // Get Y value
 8001acc:	4827      	ldr	r0, [pc, #156]	; (8001b6c <ADC_out+0xe0>)
 8001ace:	f000 ffe3 	bl	8002a98 <HAL_ADC_GetValue>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	4a26      	ldr	r2, [pc, #152]	; (8001b70 <ADC_out+0xe4>)
 8001ad6:	6053      	str	r3, [r2, #4]
	      ADC_SetActiveChannel(&hadc1, ADC_CHANNEL_1);//PB 0
 8001ad8:	2101      	movs	r1, #1
 8001ada:	4824      	ldr	r0, [pc, #144]	; (8001b6c <ADC_out+0xe0>)
 8001adc:	f7ff ffb4 	bl	8001a48 <ADC_SetActiveChannel>
	      HAL_ADC_Start(&hadc1);
 8001ae0:	4822      	ldr	r0, [pc, #136]	; (8001b6c <ADC_out+0xe0>)
 8001ae2:	f000 fd59 	bl	8002598 <HAL_ADC_Start>
	    }


	    adc_sum[0]+=adcBuffer[0];
 8001ae6:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <ADC_out+0xe8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	461a      	mov	r2, r3
 8001aec:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <ADC_out+0xe4>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4413      	add	r3, r2
 8001af2:	461a      	mov	r2, r3
 8001af4:	4b1f      	ldr	r3, [pc, #124]	; (8001b74 <ADC_out+0xe8>)
 8001af6:	601a      	str	r2, [r3, #0]
	    adc_sum[1]+=adcBuffer[1];
 8001af8:	4b1e      	ldr	r3, [pc, #120]	; (8001b74 <ADC_out+0xe8>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	461a      	mov	r2, r3
 8001afe:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <ADC_out+0xe4>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	4413      	add	r3, r2
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <ADC_out+0xe8>)
 8001b08:	605a      	str	r2, [r3, #4]
	    licznik+=1;
 8001b0a:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <ADC_out+0xec>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	4a19      	ldr	r2, [pc, #100]	; (8001b78 <ADC_out+0xec>)
 8001b12:	6013      	str	r3, [r2, #0]
	    if(licznik >= preskal){
 8001b14:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <ADC_out+0xec>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	dc22      	bgt.n	8001b64 <ADC_out+0xd8>
	    	licznik = 0;
 8001b1e:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <ADC_out+0xec>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
	    	 adc_buf[0] =  (adc_sum[0]/preskal)/25;
 8001b24:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <ADC_out+0xe8>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b2e:	4a13      	ldr	r2, [pc, #76]	; (8001b7c <ADC_out+0xf0>)
 8001b30:	fb82 1203 	smull	r1, r2, r2, r3
 8001b34:	10d2      	asrs	r2, r2, #3
 8001b36:	17db      	asrs	r3, r3, #31
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	4a11      	ldr	r2, [pc, #68]	; (8001b80 <ADC_out+0xf4>)
 8001b3c:	6013      	str	r3, [r2, #0]
	    	 adc_buf[1] =  (adc_sum[1]/preskal)/25;
 8001b3e:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <ADC_out+0xe8>)
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b48:	4a0c      	ldr	r2, [pc, #48]	; (8001b7c <ADC_out+0xf0>)
 8001b4a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b4e:	10d2      	asrs	r2, r2, #3
 8001b50:	17db      	asrs	r3, r3, #31
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <ADC_out+0xf4>)
 8001b56:	6053      	str	r3, [r2, #4]
	    	 adc_sum[0]=0;//возожно где то здесь гимор
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <ADC_out+0xe8>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
	    	 adc_sum[1]=0;
 8001b5e:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <ADC_out+0xe8>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	605a      	str	r2, [r3, #4]
//	snprintf(buf, 64, "ADC 1 = %d", adc_sum[1]/25);
//	ILI9341_WriteString(10, 220, buf, Font_7x10, WHITE, MYFON);
	    }


}
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000168 	.word	0x20000168
 8001b70:	20000158 	.word	0x20000158
 8001b74:	20000160 	.word	0x20000160
 8001b78:	20000134 	.word	0x20000134
 8001b7c:	51eb851f 	.word	0x51eb851f
 8001b80:	20000208 	.word	0x20000208

08001b84 <perekluchatel>:
//	"stop",
//	"plus",
//	"minus"
//	};

void perekluchatel(int ff){
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]

	if(menu_position[0] == 1 && menu_position[4] == 1){
 8001b8c:	4b61      	ldr	r3, [pc, #388]	; (8001d14 <perekluchatel+0x190>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00f      	beq.n	8001bb4 <perekluchatel+0x30>
 8001b94:	4b5f      	ldr	r3, [pc, #380]	; (8001d14 <perekluchatel+0x190>)
 8001b96:	791b      	ldrb	r3, [r3, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00b      	beq.n	8001bb4 <perekluchatel+0x30>
				ff=10;
 8001b9c:	230a      	movs	r3, #10
 8001b9e:	607b      	str	r3, [r7, #4]
				t_installed[0] = t_installed[0]+1;
 8001ba0:	4b5d      	ldr	r3, [pc, #372]	; (8001d18 <perekluchatel+0x194>)
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	4b5b      	ldr	r3, [pc, #364]	; (8001d18 <perekluchatel+0x194>)
 8001baa:	801a      	strh	r2, [r3, #0]
				menu_position[4] = 0;
 8001bac:	4b59      	ldr	r3, [pc, #356]	; (8001d14 <perekluchatel+0x190>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	711a      	strb	r2, [r3, #4]
 8001bb2:	e012      	b.n	8001bda <perekluchatel+0x56>
				}else if(menu_position[0] == 1 && menu_position[5] == 1){
 8001bb4:	4b57      	ldr	r3, [pc, #348]	; (8001d14 <perekluchatel+0x190>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00e      	beq.n	8001bda <perekluchatel+0x56>
 8001bbc:	4b55      	ldr	r3, [pc, #340]	; (8001d14 <perekluchatel+0x190>)
 8001bbe:	795b      	ldrb	r3, [r3, #5]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d00a      	beq.n	8001bda <perekluchatel+0x56>
				ff = 10;
 8001bc4:	230a      	movs	r3, #10
 8001bc6:	607b      	str	r3, [r7, #4]
				t_installed[0] = t_installed[0]-1;
 8001bc8:	4b53      	ldr	r3, [pc, #332]	; (8001d18 <perekluchatel+0x194>)
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	4b51      	ldr	r3, [pc, #324]	; (8001d18 <perekluchatel+0x194>)
 8001bd2:	801a      	strh	r2, [r3, #0]
				menu_position[5] = 0;
 8001bd4:	4b4f      	ldr	r3, [pc, #316]	; (8001d14 <perekluchatel+0x190>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	715a      	strb	r2, [r3, #5]
				}
		if(menu_position[1] == 1 && menu_position[4] == 1){
 8001bda:	4b4e      	ldr	r3, [pc, #312]	; (8001d14 <perekluchatel+0x190>)
 8001bdc:	785b      	ldrb	r3, [r3, #1]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00f      	beq.n	8001c02 <perekluchatel+0x7e>
 8001be2:	4b4c      	ldr	r3, [pc, #304]	; (8001d14 <perekluchatel+0x190>)
 8001be4:	791b      	ldrb	r3, [r3, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00b      	beq.n	8001c02 <perekluchatel+0x7e>
					ff=10;
 8001bea:	230a      	movs	r3, #10
 8001bec:	607b      	str	r3, [r7, #4]
					t_installed[1] = t_installed[1]+1;
 8001bee:	4b4a      	ldr	r3, [pc, #296]	; (8001d18 <perekluchatel+0x194>)
 8001bf0:	885b      	ldrh	r3, [r3, #2]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	4b48      	ldr	r3, [pc, #288]	; (8001d18 <perekluchatel+0x194>)
 8001bf8:	805a      	strh	r2, [r3, #2]
					menu_position[4] = 0;
 8001bfa:	4b46      	ldr	r3, [pc, #280]	; (8001d14 <perekluchatel+0x190>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	711a      	strb	r2, [r3, #4]
 8001c00:	e012      	b.n	8001c28 <perekluchatel+0xa4>
					}else if(menu_position[1] == 1 && menu_position[5] == 1){
 8001c02:	4b44      	ldr	r3, [pc, #272]	; (8001d14 <perekluchatel+0x190>)
 8001c04:	785b      	ldrb	r3, [r3, #1]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00e      	beq.n	8001c28 <perekluchatel+0xa4>
 8001c0a:	4b42      	ldr	r3, [pc, #264]	; (8001d14 <perekluchatel+0x190>)
 8001c0c:	795b      	ldrb	r3, [r3, #5]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00a      	beq.n	8001c28 <perekluchatel+0xa4>
					ff = 10;
 8001c12:	230a      	movs	r3, #10
 8001c14:	607b      	str	r3, [r7, #4]
					menu_position[5] = 0;
 8001c16:	4b3f      	ldr	r3, [pc, #252]	; (8001d14 <perekluchatel+0x190>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	715a      	strb	r2, [r3, #5]
					t_installed[1] = t_installed[1]-1;
 8001c1c:	4b3e      	ldr	r3, [pc, #248]	; (8001d18 <perekluchatel+0x194>)
 8001c1e:	885b      	ldrh	r3, [r3, #2]
 8001c20:	3b01      	subs	r3, #1
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	4b3c      	ldr	r3, [pc, #240]	; (8001d18 <perekluchatel+0x194>)
 8001c26:	805a      	strh	r2, [r3, #2]
				}
		if(menu_position[2] == 1){
 8001c28:	4b3a      	ldr	r3, [pc, #232]	; (8001d14 <perekluchatel+0x190>)
 8001c2a:	789b      	ldrb	r3, [r3, #2]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d002      	beq.n	8001c36 <perekluchatel+0xb2>
			heaters_start();
 8001c30:	f000 f876 	bl	8001d20 <heaters_start>
 8001c34:	e008      	b.n	8001c48 <perekluchatel+0xc4>
		} else if(menu_position[2] == 0){
 8001c36:	4b37      	ldr	r3, [pc, #220]	; (8001d14 <perekluchatel+0x190>)
 8001c38:	789b      	ldrb	r3, [r3, #2]
 8001c3a:	f083 0301 	eor.w	r3, r3, #1
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <perekluchatel+0xc4>
			heaters_stop();
 8001c44:	f000 f8ec 	bl	8001e20 <heaters_stop>
		}
		if(menu_position[3] == 1){
 8001c48:	4b32      	ldr	r3, [pc, #200]	; (8001d14 <perekluchatel+0x190>)
 8001c4a:	78db      	ldrb	r3, [r3, #3]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d004      	beq.n	8001c5a <perekluchatel+0xd6>
			menu_position[3] = 0;
 8001c50:	4b30      	ldr	r3, [pc, #192]	; (8001d14 <perekluchatel+0x190>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	70da      	strb	r2, [r3, #3]
				pneumo_start();
 8001c56:	f000 f915 	bl	8001e84 <pneumo_start>
		}


		if(menu_position[6] == 1){
 8001c5a:	4b2e      	ldr	r3, [pc, #184]	; (8001d14 <perekluchatel+0x190>)
 8001c5c:	799b      	ldrb	r3, [r3, #6]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d005      	beq.n	8001c6e <perekluchatel+0xea>
			HAL_GPIO_WritePin(GPIOA, Relay_1_Pin, GPIO_PIN_SET);
 8001c62:	2201      	movs	r2, #1
 8001c64:	2104      	movs	r1, #4
 8001c66:	482d      	ldr	r0, [pc, #180]	; (8001d1c <perekluchatel+0x198>)
 8001c68:	f001 fcfc 	bl	8003664 <HAL_GPIO_WritePin>
 8001c6c:	e00b      	b.n	8001c86 <perekluchatel+0x102>
			} else if(menu_position[6] == 0){
 8001c6e:	4b29      	ldr	r3, [pc, #164]	; (8001d14 <perekluchatel+0x190>)
 8001c70:	799b      	ldrb	r3, [r3, #6]
 8001c72:	f083 0301 	eor.w	r3, r3, #1
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d004      	beq.n	8001c86 <perekluchatel+0x102>
				HAL_GPIO_WritePin(GPIOA, Relay_1_Pin, GPIO_PIN_RESET);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2104      	movs	r1, #4
 8001c80:	4826      	ldr	r0, [pc, #152]	; (8001d1c <perekluchatel+0x198>)
 8001c82:	f001 fcef 	bl	8003664 <HAL_GPIO_WritePin>
				}

		if(menu_position[7] == 1){
 8001c86:	4b23      	ldr	r3, [pc, #140]	; (8001d14 <perekluchatel+0x190>)
 8001c88:	79db      	ldrb	r3, [r3, #7]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d005      	beq.n	8001c9a <perekluchatel+0x116>
					HAL_GPIO_WritePin(GPIOA, Relay_2_Pin, GPIO_PIN_SET);
 8001c8e:	2201      	movs	r2, #1
 8001c90:	2108      	movs	r1, #8
 8001c92:	4822      	ldr	r0, [pc, #136]	; (8001d1c <perekluchatel+0x198>)
 8001c94:	f001 fce6 	bl	8003664 <HAL_GPIO_WritePin>
 8001c98:	e00b      	b.n	8001cb2 <perekluchatel+0x12e>
					} else if(menu_position[7] == 0){
 8001c9a:	4b1e      	ldr	r3, [pc, #120]	; (8001d14 <perekluchatel+0x190>)
 8001c9c:	79db      	ldrb	r3, [r3, #7]
 8001c9e:	f083 0301 	eor.w	r3, r3, #1
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d004      	beq.n	8001cb2 <perekluchatel+0x12e>
						HAL_GPIO_WritePin(GPIOA, Relay_2_Pin, GPIO_PIN_RESET);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2108      	movs	r1, #8
 8001cac:	481b      	ldr	r0, [pc, #108]	; (8001d1c <perekluchatel+0x198>)
 8001cae:	f001 fcd9 	bl	8003664 <HAL_GPIO_WritePin>
						}
		if(menu_position[8] == 1){
 8001cb2:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <perekluchatel+0x190>)
 8001cb4:	7a1b      	ldrb	r3, [r3, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d005      	beq.n	8001cc6 <perekluchatel+0x142>
					HAL_GPIO_WritePin(GPIOA, Tranz_1_Pin, GPIO_PIN_SET);
 8001cba:	2201      	movs	r2, #1
 8001cbc:	2110      	movs	r1, #16
 8001cbe:	4817      	ldr	r0, [pc, #92]	; (8001d1c <perekluchatel+0x198>)
 8001cc0:	f001 fcd0 	bl	8003664 <HAL_GPIO_WritePin>
 8001cc4:	e00b      	b.n	8001cde <perekluchatel+0x15a>
					} else if(menu_position[8] == 0){
 8001cc6:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <perekluchatel+0x190>)
 8001cc8:	7a1b      	ldrb	r3, [r3, #8]
 8001cca:	f083 0301 	eor.w	r3, r3, #1
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d004      	beq.n	8001cde <perekluchatel+0x15a>
						HAL_GPIO_WritePin(GPIOA, Tranz_1_Pin, GPIO_PIN_RESET);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2110      	movs	r1, #16
 8001cd8:	4810      	ldr	r0, [pc, #64]	; (8001d1c <perekluchatel+0x198>)
 8001cda:	f001 fcc3 	bl	8003664 <HAL_GPIO_WritePin>
						}
		if(menu_position[9] == 1){
 8001cde:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <perekluchatel+0x190>)
 8001ce0:	7a5b      	ldrb	r3, [r3, #9]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d005      	beq.n	8001cf2 <perekluchatel+0x16e>
							HAL_GPIO_WritePin(GPIOA, Tranz_2_Pin, GPIO_PIN_SET);
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	2120      	movs	r1, #32
 8001cea:	480c      	ldr	r0, [pc, #48]	; (8001d1c <perekluchatel+0x198>)
 8001cec:	f001 fcba 	bl	8003664 <HAL_GPIO_WritePin>
							} else if(menu_position[9] == 0){
								HAL_GPIO_WritePin(GPIOA, Tranz_2_Pin, GPIO_PIN_RESET);
								}


}
 8001cf0:	e00b      	b.n	8001d0a <perekluchatel+0x186>
							} else if(menu_position[9] == 0){
 8001cf2:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <perekluchatel+0x190>)
 8001cf4:	7a5b      	ldrb	r3, [r3, #9]
 8001cf6:	f083 0301 	eor.w	r3, r3, #1
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d004      	beq.n	8001d0a <perekluchatel+0x186>
								HAL_GPIO_WritePin(GPIOA, Tranz_2_Pin, GPIO_PIN_RESET);
 8001d00:	2200      	movs	r2, #0
 8001d02:	2120      	movs	r1, #32
 8001d04:	4805      	ldr	r0, [pc, #20]	; (8001d1c <perekluchatel+0x198>)
 8001d06:	f001 fcad 	bl	8003664 <HAL_GPIO_WritePin>
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	2000013c 	.word	0x2000013c
 8001d18:	20000010 	.word	0x20000010
 8001d1c:	40020000 	.word	0x40020000

08001d20 <heaters_start>:
		i=i-1;
	}
	return i;
}

void heaters_start(void){
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af04      	add	r7, sp, #16
	if( adc_buf[0]<t_installed[0]){
 8001d26:	4b36      	ldr	r3, [pc, #216]	; (8001e00 <heaters_start+0xe0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a36      	ldr	r2, [pc, #216]	; (8001e04 <heaters_start+0xe4>)
 8001d2c:	8812      	ldrh	r2, [r2, #0]
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	da14      	bge.n	8001d5c <heaters_start+0x3c>
		 HAL_GPIO_WritePin(GPIOA, Relay_1_Pin, GPIO_PIN_SET);
 8001d32:	2201      	movs	r2, #1
 8001d34:	2104      	movs	r1, #4
 8001d36:	4834      	ldr	r0, [pc, #208]	; (8001e08 <heaters_start+0xe8>)
 8001d38:	f001 fc94 	bl	8003664 <HAL_GPIO_WritePin>
		 ILI9341_WriteString(20, 180,"heater GL start", Font_7x10, WHITE, MYFON);
 8001d3c:	4b33      	ldr	r3, [pc, #204]	; (8001e0c <heaters_start+0xec>)
 8001d3e:	f642 1265 	movw	r2, #10597	; 0x2965
 8001d42:	9202      	str	r2, [sp, #8]
 8001d44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d48:	9201      	str	r2, [sp, #4]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	9200      	str	r2, [sp, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a2f      	ldr	r2, [pc, #188]	; (8001e10 <heaters_start+0xf0>)
 8001d52:	21b4      	movs	r1, #180	; 0xb4
 8001d54:	2014      	movs	r0, #20
 8001d56:	f7ff f9c7 	bl	80010e8 <ILI9341_WriteString>
 8001d5a:	e019      	b.n	8001d90 <heaters_start+0x70>
	} else if( adc_buf[0]>=t_installed[0]){
 8001d5c:	4b28      	ldr	r3, [pc, #160]	; (8001e00 <heaters_start+0xe0>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a28      	ldr	r2, [pc, #160]	; (8001e04 <heaters_start+0xe4>)
 8001d62:	8812      	ldrh	r2, [r2, #0]
 8001d64:	4293      	cmp	r3, r2
 8001d66:	db13      	blt.n	8001d90 <heaters_start+0x70>
		 HAL_GPIO_WritePin(GPIOA, Relay_1_Pin, GPIO_PIN_RESET);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2104      	movs	r1, #4
 8001d6c:	4826      	ldr	r0, [pc, #152]	; (8001e08 <heaters_start+0xe8>)
 8001d6e:	f001 fc79 	bl	8003664 <HAL_GPIO_WritePin>
		 ILI9341_WriteString(20, 180,"heater GL stop ", Font_7x10, WHITE, MYFON);
 8001d72:	4b26      	ldr	r3, [pc, #152]	; (8001e0c <heaters_start+0xec>)
 8001d74:	f642 1265 	movw	r2, #10597	; 0x2965
 8001d78:	9202      	str	r2, [sp, #8]
 8001d7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d7e:	9201      	str	r2, [sp, #4]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	9200      	str	r2, [sp, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a23      	ldr	r2, [pc, #140]	; (8001e14 <heaters_start+0xf4>)
 8001d88:	21b4      	movs	r1, #180	; 0xb4
 8001d8a:	2014      	movs	r0, #20
 8001d8c:	f7ff f9ac 	bl	80010e8 <ILI9341_WriteString>
	}
	if( adc_buf[1]<t_installed[1]){
 8001d90:	4b1b      	ldr	r3, [pc, #108]	; (8001e00 <heaters_start+0xe0>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	4a1b      	ldr	r2, [pc, #108]	; (8001e04 <heaters_start+0xe4>)
 8001d96:	8852      	ldrh	r2, [r2, #2]
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	da14      	bge.n	8001dc6 <heaters_start+0xa6>
			 HAL_GPIO_WritePin(GPIOA, Relay_2_Pin, GPIO_PIN_SET);
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	2108      	movs	r1, #8
 8001da0:	4819      	ldr	r0, [pc, #100]	; (8001e08 <heaters_start+0xe8>)
 8001da2:	f001 fc5f 	bl	8003664 <HAL_GPIO_WritePin>
			 ILI9341_WriteString(20, 190,"heater TR start", Font_7x10, WHITE, MYFON);
 8001da6:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <heaters_start+0xec>)
 8001da8:	f642 1265 	movw	r2, #10597	; 0x2965
 8001dac:	9202      	str	r2, [sp, #8]
 8001dae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001db2:	9201      	str	r2, [sp, #4]
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	9200      	str	r2, [sp, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a17      	ldr	r2, [pc, #92]	; (8001e18 <heaters_start+0xf8>)
 8001dbc:	21be      	movs	r1, #190	; 0xbe
 8001dbe:	2014      	movs	r0, #20
 8001dc0:	f7ff f992 	bl	80010e8 <ILI9341_WriteString>
		} else if( adc_buf[1]>=t_installed[1]){
			 HAL_GPIO_WritePin(GPIOA, Relay_2_Pin, GPIO_PIN_RESET);
			 ILI9341_WriteString(20, 190,"heater TR stop", Font_7x10, WHITE, MYFON);
		}
}
 8001dc4:	e019      	b.n	8001dfa <heaters_start+0xda>
		} else if( adc_buf[1]>=t_installed[1]){
 8001dc6:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <heaters_start+0xe0>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	4a0e      	ldr	r2, [pc, #56]	; (8001e04 <heaters_start+0xe4>)
 8001dcc:	8852      	ldrh	r2, [r2, #2]
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	db13      	blt.n	8001dfa <heaters_start+0xda>
			 HAL_GPIO_WritePin(GPIOA, Relay_2_Pin, GPIO_PIN_RESET);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2108      	movs	r1, #8
 8001dd6:	480c      	ldr	r0, [pc, #48]	; (8001e08 <heaters_start+0xe8>)
 8001dd8:	f001 fc44 	bl	8003664 <HAL_GPIO_WritePin>
			 ILI9341_WriteString(20, 190,"heater TR stop", Font_7x10, WHITE, MYFON);
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <heaters_start+0xec>)
 8001dde:	f642 1265 	movw	r2, #10597	; 0x2965
 8001de2:	9202      	str	r2, [sp, #8]
 8001de4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001de8:	9201      	str	r2, [sp, #4]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	9200      	str	r2, [sp, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <heaters_start+0xfc>)
 8001df2:	21be      	movs	r1, #190	; 0xbe
 8001df4:	2014      	movs	r0, #20
 8001df6:	f7ff f977 	bl	80010e8 <ILI9341_WriteString>
}
 8001dfa:	bf00      	nop
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000208 	.word	0x20000208
 8001e04:	20000010 	.word	0x20000010
 8001e08:	40020000 	.word	0x40020000
 8001e0c:	20000004 	.word	0x20000004
 8001e10:	08005120 	.word	0x08005120
 8001e14:	08005130 	.word	0x08005130
 8001e18:	08005140 	.word	0x08005140
 8001e1c:	08005150 	.word	0x08005150

08001e20 <heaters_stop>:
void heaters_stop(void){
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af04      	add	r7, sp, #16
	 HAL_GPIO_WritePin(GPIOA, Relay_2_Pin|Relay_1_Pin,GPIO_PIN_RESET);
 8001e26:	2200      	movs	r2, #0
 8001e28:	210c      	movs	r1, #12
 8001e2a:	4812      	ldr	r0, [pc, #72]	; (8001e74 <heaters_stop+0x54>)
 8001e2c:	f001 fc1a 	bl	8003664 <HAL_GPIO_WritePin>
	 ILI9341_WriteString(20, 190,"heater GL STOP ", Font_7x10, WHITE, MYFON);
 8001e30:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <heaters_stop+0x58>)
 8001e32:	f642 1265 	movw	r2, #10597	; 0x2965
 8001e36:	9202      	str	r2, [sp, #8]
 8001e38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e3c:	9201      	str	r2, [sp, #4]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	9200      	str	r2, [sp, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a0d      	ldr	r2, [pc, #52]	; (8001e7c <heaters_stop+0x5c>)
 8001e46:	21be      	movs	r1, #190	; 0xbe
 8001e48:	2014      	movs	r0, #20
 8001e4a:	f7ff f94d 	bl	80010e8 <ILI9341_WriteString>
	 ILI9341_WriteString(20, 180,"heater TR STOP ", Font_7x10, WHITE, MYFON);
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <heaters_stop+0x58>)
 8001e50:	f642 1265 	movw	r2, #10597	; 0x2965
 8001e54:	9202      	str	r2, [sp, #8]
 8001e56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e5a:	9201      	str	r2, [sp, #4]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	9200      	str	r2, [sp, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a07      	ldr	r2, [pc, #28]	; (8001e80 <heaters_stop+0x60>)
 8001e64:	21b4      	movs	r1, #180	; 0xb4
 8001e66:	2014      	movs	r0, #20
 8001e68:	f7ff f93e 	bl	80010e8 <ILI9341_WriteString>
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40020000 	.word	0x40020000
 8001e78:	20000004 	.word	0x20000004
 8001e7c:	08005160 	.word	0x08005160
 8001e80:	08005170 	.word	0x08005170

08001e84 <pneumo_start>:

void pneumo_start(void){
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af04      	add	r7, sp, #16
	ILI9341_WriteString(20, 140,"Pneumo start ", Font_7x10, WHITE, MYFON);
 8001e8a:	4b3a      	ldr	r3, [pc, #232]	; (8001f74 <pneumo_start+0xf0>)
 8001e8c:	f642 1265 	movw	r2, #10597	; 0x2965
 8001e90:	9202      	str	r2, [sp, #8]
 8001e92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e96:	9201      	str	r2, [sp, #4]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	9200      	str	r2, [sp, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a36      	ldr	r2, [pc, #216]	; (8001f78 <pneumo_start+0xf4>)
 8001ea0:	218c      	movs	r1, #140	; 0x8c
 8001ea2:	2014      	movs	r0, #20
 8001ea4:	f7ff f920 	bl	80010e8 <ILI9341_WriteString>
	ILI9341_WriteString(20, 160,"pistone pressed  ", Font_7x10, WHITE, MYFON);
 8001ea8:	4b32      	ldr	r3, [pc, #200]	; (8001f74 <pneumo_start+0xf0>)
 8001eaa:	f642 1265 	movw	r2, #10597	; 0x2965
 8001eae:	9202      	str	r2, [sp, #8]
 8001eb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eb4:	9201      	str	r2, [sp, #4]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	9200      	str	r2, [sp, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a2f      	ldr	r2, [pc, #188]	; (8001f7c <pneumo_start+0xf8>)
 8001ebe:	21a0      	movs	r1, #160	; 0xa0
 8001ec0:	2014      	movs	r0, #20
 8001ec2:	f7ff f911 	bl	80010e8 <ILI9341_WriteString>
	 HAL_GPIO_WritePin(GPIOA, Tranz_1_Pin,GPIO_PIN_SET);
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	2110      	movs	r1, #16
 8001eca:	482d      	ldr	r0, [pc, #180]	; (8001f80 <pneumo_start+0xfc>)
 8001ecc:	f001 fbca 	bl	8003664 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOA, Tranz_2_Pin,GPIO_PIN_RESET);
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	2120      	movs	r1, #32
 8001ed4:	482a      	ldr	r0, [pc, #168]	; (8001f80 <pneumo_start+0xfc>)
 8001ed6:	f001 fbc5 	bl	8003664 <HAL_GPIO_WritePin>
	 HAL_Delay(3000);
 8001eda:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001ede:	f000 faf3 	bl	80024c8 <HAL_Delay>
	 ILI9341_WriteString(20, 160,"pistone released", Font_7x10, WHITE, MYFON);
 8001ee2:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <pneumo_start+0xf0>)
 8001ee4:	f642 1265 	movw	r2, #10597	; 0x2965
 8001ee8:	9202      	str	r2, [sp, #8]
 8001eea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eee:	9201      	str	r2, [sp, #4]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	9200      	str	r2, [sp, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a23      	ldr	r2, [pc, #140]	; (8001f84 <pneumo_start+0x100>)
 8001ef8:	21a0      	movs	r1, #160	; 0xa0
 8001efa:	2014      	movs	r0, #20
 8001efc:	f7ff f8f4 	bl	80010e8 <ILI9341_WriteString>
	 HAL_GPIO_WritePin(GPIOA, Tranz_1_Pin,GPIO_PIN_RESET);
 8001f00:	2200      	movs	r2, #0
 8001f02:	2110      	movs	r1, #16
 8001f04:	481e      	ldr	r0, [pc, #120]	; (8001f80 <pneumo_start+0xfc>)
 8001f06:	f001 fbad 	bl	8003664 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOA, Tranz_2_Pin,GPIO_PIN_SET);
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	2120      	movs	r1, #32
 8001f0e:	481c      	ldr	r0, [pc, #112]	; (8001f80 <pneumo_start+0xfc>)
 8001f10:	f001 fba8 	bl	8003664 <HAL_GPIO_WritePin>
	 HAL_Delay(2000);
 8001f14:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001f18:	f000 fad6 	bl	80024c8 <HAL_Delay>
	 HAL_GPIO_WritePin(GPIOA, Tranz_1_Pin,GPIO_PIN_RESET);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2110      	movs	r1, #16
 8001f20:	4817      	ldr	r0, [pc, #92]	; (8001f80 <pneumo_start+0xfc>)
 8001f22:	f001 fb9f 	bl	8003664 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOA, Tranz_2_Pin,GPIO_PIN_RESET);
 8001f26:	2200      	movs	r2, #0
 8001f28:	2120      	movs	r1, #32
 8001f2a:	4815      	ldr	r0, [pc, #84]	; (8001f80 <pneumo_start+0xfc>)
 8001f2c:	f001 fb9a 	bl	8003664 <HAL_GPIO_WritePin>
	 ILI9341_WriteString(20, 140,"Pneumo STOP   ", Font_7x10, WHITE, MYFON);
 8001f30:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <pneumo_start+0xf0>)
 8001f32:	f642 1265 	movw	r2, #10597	; 0x2965
 8001f36:	9202      	str	r2, [sp, #8]
 8001f38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f3c:	9201      	str	r2, [sp, #4]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	9200      	str	r2, [sp, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a10      	ldr	r2, [pc, #64]	; (8001f88 <pneumo_start+0x104>)
 8001f46:	218c      	movs	r1, #140	; 0x8c
 8001f48:	2014      	movs	r0, #20
 8001f4a:	f7ff f8cd 	bl	80010e8 <ILI9341_WriteString>
	 ILI9341_WriteString(20, 160,"xxxxxxx xxxxxxxx", Font_7x10, WHITE, MYFON);
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <pneumo_start+0xf0>)
 8001f50:	f642 1265 	movw	r2, #10597	; 0x2965
 8001f54:	9202      	str	r2, [sp, #8]
 8001f56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f5a:	9201      	str	r2, [sp, #4]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	9200      	str	r2, [sp, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <pneumo_start+0x108>)
 8001f64:	21a0      	movs	r1, #160	; 0xa0
 8001f66:	2014      	movs	r0, #20
 8001f68:	f7ff f8be 	bl	80010e8 <ILI9341_WriteString>
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000004 	.word	0x20000004
 8001f78:	08005180 	.word	0x08005180
 8001f7c:	08005190 	.word	0x08005190
 8001f80:	40020000 	.word	0x40020000
 8001f84:	080051a4 	.word	0x080051a4
 8001f88:	080051b8 	.word	0x080051b8
 8001f8c:	080051c8 	.word	0x080051c8

08001f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f94:	b672      	cpsid	i
}
 8001f96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <Error_Handler+0x8>
	...

08001f9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	607b      	str	r3, [r7, #4]
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <HAL_MspInit+0x4c>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	4a0f      	ldr	r2, [pc, #60]	; (8001fe8 <HAL_MspInit+0x4c>)
 8001fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb2:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <HAL_MspInit+0x4c>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fba:	607b      	str	r3, [r7, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	603b      	str	r3, [r7, #0]
 8001fc2:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <HAL_MspInit+0x4c>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	4a08      	ldr	r2, [pc, #32]	; (8001fe8 <HAL_MspInit+0x4c>)
 8001fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_MspInit+0x4c>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	603b      	str	r3, [r7, #0]
 8001fd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40023800 	.word	0x40023800

08001fec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08a      	sub	sp, #40	; 0x28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a1b      	ldr	r2, [pc, #108]	; (8002078 <HAL_ADC_MspInit+0x8c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d12f      	bne.n	800206e <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	4b1a      	ldr	r3, [pc, #104]	; (800207c <HAL_ADC_MspInit+0x90>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	4a19      	ldr	r2, [pc, #100]	; (800207c <HAL_ADC_MspInit+0x90>)
 8002018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201c:	6453      	str	r3, [r2, #68]	; 0x44
 800201e:	4b17      	ldr	r3, [pc, #92]	; (800207c <HAL_ADC_MspInit+0x90>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	4b13      	ldr	r3, [pc, #76]	; (800207c <HAL_ADC_MspInit+0x90>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a12      	ldr	r2, [pc, #72]	; (800207c <HAL_ADC_MspInit+0x90>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b10      	ldr	r3, [pc, #64]	; (800207c <HAL_ADC_MspInit+0x90>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002046:	2303      	movs	r3, #3
 8002048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800204a:	2303      	movs	r3, #3
 800204c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002052:	f107 0314 	add.w	r3, r7, #20
 8002056:	4619      	mov	r1, r3
 8002058:	4809      	ldr	r0, [pc, #36]	; (8002080 <HAL_ADC_MspInit+0x94>)
 800205a:	f001 f883 	bl	8003164 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800205e:	2200      	movs	r2, #0
 8002060:	2100      	movs	r1, #0
 8002062:	2012      	movs	r0, #18
 8002064:	f001 f847 	bl	80030f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002068:	2012      	movs	r0, #18
 800206a:	f001 f860 	bl	800312e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800206e:	bf00      	nop
 8002070:	3728      	adds	r7, #40	; 0x28
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40012000 	.word	0x40012000
 800207c:	40023800 	.word	0x40023800
 8002080:	40020000 	.word	0x40020000

08002084 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08a      	sub	sp, #40	; 0x28
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a19      	ldr	r2, [pc, #100]	; (8002108 <HAL_SPI_MspInit+0x84>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d12b      	bne.n	80020fe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	4b18      	ldr	r3, [pc, #96]	; (800210c <HAL_SPI_MspInit+0x88>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ae:	4a17      	ldr	r2, [pc, #92]	; (800210c <HAL_SPI_MspInit+0x88>)
 80020b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020b4:	6453      	str	r3, [r2, #68]	; 0x44
 80020b6:	4b15      	ldr	r3, [pc, #84]	; (800210c <HAL_SPI_MspInit+0x88>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020be:	613b      	str	r3, [r7, #16]
 80020c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	4b11      	ldr	r3, [pc, #68]	; (800210c <HAL_SPI_MspInit+0x88>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	4a10      	ldr	r2, [pc, #64]	; (800210c <HAL_SPI_MspInit+0x88>)
 80020cc:	f043 0302 	orr.w	r3, r3, #2
 80020d0:	6313      	str	r3, [r2, #48]	; 0x30
 80020d2:	4b0e      	ldr	r3, [pc, #56]	; (800210c <HAL_SPI_MspInit+0x88>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80020de:	2338      	movs	r3, #56	; 0x38
 80020e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e2:	2302      	movs	r3, #2
 80020e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ea:	2303      	movs	r3, #3
 80020ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020ee:	2305      	movs	r3, #5
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f2:	f107 0314 	add.w	r3, r7, #20
 80020f6:	4619      	mov	r1, r3
 80020f8:	4805      	ldr	r0, [pc, #20]	; (8002110 <HAL_SPI_MspInit+0x8c>)
 80020fa:	f001 f833 	bl	8003164 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80020fe:	bf00      	nop
 8002100:	3728      	adds	r7, #40	; 0x28
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40013000 	.word	0x40013000
 800210c:	40023800 	.word	0x40023800
 8002110:	40020400 	.word	0x40020400

08002114 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a08      	ldr	r2, [pc, #32]	; (8002144 <HAL_SPI_MspDeInit+0x30>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d109      	bne.n	800213a <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8002126:	4b08      	ldr	r3, [pc, #32]	; (8002148 <HAL_SPI_MspDeInit+0x34>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	4a07      	ldr	r2, [pc, #28]	; (8002148 <HAL_SPI_MspDeInit+0x34>)
 800212c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002130:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5);
 8002132:	2138      	movs	r1, #56	; 0x38
 8002134:	4805      	ldr	r0, [pc, #20]	; (800214c <HAL_SPI_MspDeInit+0x38>)
 8002136:	f001 f999 	bl	800346c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40013000 	.word	0x40013000
 8002148:	40023800 	.word	0x40023800
 800214c:	40020400 	.word	0x40020400

08002150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002154:	e7fe      	b.n	8002154 <NMI_Handler+0x4>

08002156 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800215a:	e7fe      	b.n	800215a <HardFault_Handler+0x4>

0800215c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002160:	e7fe      	b.n	8002160 <MemManage_Handler+0x4>

08002162 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002166:	e7fe      	b.n	8002166 <BusFault_Handler+0x4>

08002168 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800216c:	e7fe      	b.n	800216c <UsageFault_Handler+0x4>

0800216e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800219c:	f000 f974 	bl	8002488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021a0:	bf00      	nop
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80021a8:	4802      	ldr	r0, [pc, #8]	; (80021b4 <ADC_IRQHandler+0x10>)
 80021aa:	f000 fb34 	bl	8002816 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000168 	.word	0x20000168

080021b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021c0:	4a14      	ldr	r2, [pc, #80]	; (8002214 <_sbrk+0x5c>)
 80021c2:	4b15      	ldr	r3, [pc, #84]	; (8002218 <_sbrk+0x60>)
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021cc:	4b13      	ldr	r3, [pc, #76]	; (800221c <_sbrk+0x64>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d102      	bne.n	80021da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021d4:	4b11      	ldr	r3, [pc, #68]	; (800221c <_sbrk+0x64>)
 80021d6:	4a12      	ldr	r2, [pc, #72]	; (8002220 <_sbrk+0x68>)
 80021d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021da:	4b10      	ldr	r3, [pc, #64]	; (800221c <_sbrk+0x64>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4413      	add	r3, r2
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d207      	bcs.n	80021f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021e8:	f002 fac4 	bl	8004774 <__errno>
 80021ec:	4603      	mov	r3, r0
 80021ee:	220c      	movs	r2, #12
 80021f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021f2:	f04f 33ff 	mov.w	r3, #4294967295
 80021f6:	e009      	b.n	800220c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021f8:	4b08      	ldr	r3, [pc, #32]	; (800221c <_sbrk+0x64>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021fe:	4b07      	ldr	r3, [pc, #28]	; (800221c <_sbrk+0x64>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	4a05      	ldr	r2, [pc, #20]	; (800221c <_sbrk+0x64>)
 8002208:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800220a:	68fb      	ldr	r3, [r7, #12]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20010000 	.word	0x20010000
 8002218:	00000400 	.word	0x00000400
 800221c:	2000014c 	.word	0x2000014c
 8002220:	20000228 	.word	0x20000228

08002224 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <SystemInit+0x20>)
 800222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222e:	4a05      	ldr	r2, [pc, #20]	; (8002244 <SystemInit+0x20>)
 8002230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <ILI9341_TouchGetCoordinates>:
#include "stdio.h"
extern UART_HandleTypeDef huart1;*/


uint8_t ILI9341_TouchGetCoordinates(uint16_t *x, uint16_t *y)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af02      	add	r7, sp, #8
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
	if(HAL_GPIO_ReadPin(IRQ_GPIO_Port, IRQ_Pin) != GPIO_PIN_RESET) return 0;
 8002252:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002256:	4846      	ldr	r0, [pc, #280]	; (8002370 <ILI9341_TouchGetCoordinates+0x128>)
 8002258:	f001 f9ec 	bl	8003634 <HAL_GPIO_ReadPin>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <ILI9341_TouchGetCoordinates+0x1e>
 8002262:	2300      	movs	r3, #0
 8002264:	e07f      	b.n	8002366 <ILI9341_TouchGetCoordinates+0x11e>

    TOUCH_CS_SELECT;
 8002266:	2200      	movs	r2, #0
 8002268:	2140      	movs	r1, #64	; 0x40
 800226a:	4842      	ldr	r0, [pc, #264]	; (8002374 <ILI9341_TouchGetCoordinates+0x12c>)
 800226c:	f001 f9fa 	bl	8003664 <HAL_GPIO_WritePin>

    uint32_t avg_x = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
    uint32_t avg_y = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	613b      	str	r3, [r7, #16]

	HAL_SPI_Transmit(TOUCH_SPI_PTR, (uint8_t*)&cmd_read_y, 1, 1000);
 8002278:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800227c:	2201      	movs	r2, #1
 800227e:	493e      	ldr	r1, [pc, #248]	; (8002378 <ILI9341_TouchGetCoordinates+0x130>)
 8002280:	483e      	ldr	r0, [pc, #248]	; (800237c <ILI9341_TouchGetCoordinates+0x134>)
 8002282:	f001 fece 	bl	8004022 <HAL_SPI_Transmit>

	uint8_t y_raw[2] = {0,};
 8002286:	2300      	movs	r3, #0
 8002288:	81bb      	strh	r3, [r7, #12]
	HAL_SPI_TransmitReceive(TOUCH_SPI_PTR, (uint8_t*)zeroes_tx, y_raw, 2, 1000);
 800228a:	f107 020c 	add.w	r2, r7, #12
 800228e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	2302      	movs	r3, #2
 8002296:	493a      	ldr	r1, [pc, #232]	; (8002380 <ILI9341_TouchGetCoordinates+0x138>)
 8002298:	4838      	ldr	r0, [pc, #224]	; (800237c <ILI9341_TouchGetCoordinates+0x134>)
 800229a:	f001 fffe 	bl	800429a <HAL_SPI_TransmitReceive>

	HAL_SPI_Transmit(TOUCH_SPI_PTR, (uint8_t*)&cmd_read_x, 1, 1000);
 800229e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a2:	2201      	movs	r2, #1
 80022a4:	4937      	ldr	r1, [pc, #220]	; (8002384 <ILI9341_TouchGetCoordinates+0x13c>)
 80022a6:	4835      	ldr	r0, [pc, #212]	; (800237c <ILI9341_TouchGetCoordinates+0x134>)
 80022a8:	f001 febb 	bl	8004022 <HAL_SPI_Transmit>

	uint8_t x_raw[2] = {0,};
 80022ac:	2300      	movs	r3, #0
 80022ae:	813b      	strh	r3, [r7, #8]
	HAL_SPI_TransmitReceive(TOUCH_SPI_PTR, (uint8_t*)zeroes_tx, x_raw, 2, 1000);
 80022b0:	f107 0208 	add.w	r2, r7, #8
 80022b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	2302      	movs	r3, #2
 80022bc:	4930      	ldr	r1, [pc, #192]	; (8002380 <ILI9341_TouchGetCoordinates+0x138>)
 80022be:	482f      	ldr	r0, [pc, #188]	; (800237c <ILI9341_TouchGetCoordinates+0x134>)
 80022c0:	f001 ffeb 	bl	800429a <HAL_SPI_TransmitReceive>

	avg_x = (((uint16_t)x_raw[0]) << 8) | ((uint16_t)x_raw[1]);
 80022c4:	7a3b      	ldrb	r3, [r7, #8]
 80022c6:	021b      	lsls	r3, r3, #8
 80022c8:	7a7a      	ldrb	r2, [r7, #9]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	617b      	str	r3, [r7, #20]
	avg_y = (((uint16_t)y_raw[0]) << 8) | ((uint16_t)y_raw[1]);
 80022ce:	7b3b      	ldrb	r3, [r7, #12]
 80022d0:	021b      	lsls	r3, r3, #8
 80022d2:	7b7a      	ldrb	r2, [r7, #13]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
	// калибровка
	/*char buf[64] = {0,};
	snprintf(buf, 64, "ADC_X = %lu, ADC_Y = %lu\n", avg_x, avg_y);
	HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 100);*/

    TOUCH_CS_UNSELECT;
 80022d8:	2201      	movs	r2, #1
 80022da:	2140      	movs	r1, #64	; 0x40
 80022dc:	4825      	ldr	r0, [pc, #148]	; (8002374 <ILI9341_TouchGetCoordinates+0x12c>)
 80022de:	f001 f9c1 	bl	8003664 <HAL_GPIO_WritePin>

    if(avg_x < TOUCH_MIN_RAW_X) avg_x = TOUCH_MIN_RAW_X;
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f240 52db 	movw	r2, #1499	; 0x5db
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d802      	bhi.n	80022f2 <ILI9341_TouchGetCoordinates+0xaa>
 80022ec:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80022f0:	617b      	str	r3, [r7, #20]
    if(avg_x > TOUCH_MAX_RAW_X) avg_x = TOUCH_MAX_RAW_X;
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f247 5230 	movw	r2, #30000	; 0x7530
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d902      	bls.n	8002302 <ILI9341_TouchGetCoordinates+0xba>
 80022fc:	f247 5330 	movw	r3, #30000	; 0x7530
 8002300:	617b      	str	r3, [r7, #20]

    if(avg_y < TOUCH_MIN_RAW_X) avg_y = TOUCH_MIN_RAW_Y;
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	f240 52db 	movw	r2, #1499	; 0x5db
 8002308:	4293      	cmp	r3, r2
 800230a:	d802      	bhi.n	8002312 <ILI9341_TouchGetCoordinates+0xca>
 800230c:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002310:	613b      	str	r3, [r7, #16]
    if(avg_y > TOUCH_MAX_RAW_Y) avg_y = TOUCH_MAX_RAW_Y;
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	f247 5230 	movw	r2, #30000	; 0x7530
 8002318:	4293      	cmp	r3, r2
 800231a:	d902      	bls.n	8002322 <ILI9341_TouchGetCoordinates+0xda>
 800231c:	f247 5330 	movw	r3, #30000	; 0x7530
 8002320:	613b      	str	r3, [r7, #16]

    *x = (avg_x - TOUCH_MIN_RAW_X) * TOUCH_SCALE_X / (TOUCH_MAX_RAW_X - TOUCH_MIN_RAW_X);
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	019b      	lsls	r3, r3, #6
 800232c:	f5a3 23ea 	sub.w	r3, r3, #479232	; 0x75000
 8002330:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8002334:	089b      	lsrs	r3, r3, #2
 8002336:	4a14      	ldr	r2, [pc, #80]	; (8002388 <ILI9341_TouchGetCoordinates+0x140>)
 8002338:	fba2 2303 	umull	r2, r3, r2, r3
 800233c:	0a5b      	lsrs	r3, r3, #9
 800233e:	b29a      	uxth	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	801a      	strh	r2, [r3, #0]
    *y = (avg_y - TOUCH_MIN_RAW_Y) * TOUCH_SCALE_Y / (TOUCH_MAX_RAW_Y - TOUCH_MIN_RAW_Y);
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4613      	mov	r3, r2
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	1a9b      	subs	r3, r3, r2
 800234c:	011b      	lsls	r3, r3, #4
 800234e:	f5a3 2312 	sub.w	r3, r3, #598016	; 0x92000
 8002352:	f5a3 63f8 	sub.w	r3, r3, #1984	; 0x7c0
 8002356:	4a0d      	ldr	r2, [pc, #52]	; (800238c <ILI9341_TouchGetCoordinates+0x144>)
 8002358:	fba2 2303 	umull	r2, r3, r2, r3
 800235c:	0b9b      	lsrs	r3, r3, #14
 800235e:	b29a      	uxth	r2, r3
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	801a      	strh	r2, [r3, #0]

    return 1;
 8002364:	2301      	movs	r3, #1
}
 8002366:	4618      	mov	r0, r3
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40020000 	.word	0x40020000
 8002374:	40020400 	.word	0x40020400
 8002378:	08005959 	.word	0x08005959
 800237c:	200001b0 	.word	0x200001b0
 8002380:	0800595c 	.word	0x0800595c
 8002384:	08005958 	.word	0x08005958
 8002388:	126564db 	.word	0x126564db
 800238c:	98852841 	.word	0x98852841

08002390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002394:	480d      	ldr	r0, [pc, #52]	; (80023cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002396:	490e      	ldr	r1, [pc, #56]	; (80023d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002398:	4a0e      	ldr	r2, [pc, #56]	; (80023d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800239a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800239c:	e002      	b.n	80023a4 <LoopCopyDataInit>

0800239e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800239e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023a2:	3304      	adds	r3, #4

080023a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023a8:	d3f9      	bcc.n	800239e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023aa:	4a0b      	ldr	r2, [pc, #44]	; (80023d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023ac:	4c0b      	ldr	r4, [pc, #44]	; (80023dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80023ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023b0:	e001      	b.n	80023b6 <LoopFillZerobss>

080023b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023b4:	3204      	adds	r2, #4

080023b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023b8:	d3fb      	bcc.n	80023b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023ba:	f7ff ff33 	bl	8002224 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023be:	f002 f9df 	bl	8004780 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023c2:	f7fe fed8 	bl	8001176 <main>
  bx  lr    
 80023c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023c8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80023cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023d0:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 80023d4:	080059a4 	.word	0x080059a4
  ldr r2, =_sbss
 80023d8:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 80023dc:	20000224 	.word	0x20000224

080023e0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023e0:	e7fe      	b.n	80023e0 <DMA1_Stream0_IRQHandler>
	...

080023e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023e8:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <HAL_Init+0x40>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a0d      	ldr	r2, [pc, #52]	; (8002424 <HAL_Init+0x40>)
 80023ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <HAL_Init+0x40>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <HAL_Init+0x40>)
 80023fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002400:	4b08      	ldr	r3, [pc, #32]	; (8002424 <HAL_Init+0x40>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a07      	ldr	r2, [pc, #28]	; (8002424 <HAL_Init+0x40>)
 8002406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800240c:	2003      	movs	r0, #3
 800240e:	f000 fe67 	bl	80030e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002412:	2000      	movs	r0, #0
 8002414:	f000 f808 	bl	8002428 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002418:	f7ff fdc0 	bl	8001f9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40023c00 	.word	0x40023c00

08002428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002430:	4b12      	ldr	r3, [pc, #72]	; (800247c <HAL_InitTick+0x54>)
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4b12      	ldr	r3, [pc, #72]	; (8002480 <HAL_InitTick+0x58>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	4619      	mov	r1, r3
 800243a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800243e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002442:	fbb2 f3f3 	udiv	r3, r2, r3
 8002446:	4618      	mov	r0, r3
 8002448:	f000 fe7f 	bl	800314a <HAL_SYSTICK_Config>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e00e      	b.n	8002474 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b0f      	cmp	r3, #15
 800245a:	d80a      	bhi.n	8002472 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800245c:	2200      	movs	r2, #0
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	f04f 30ff 	mov.w	r0, #4294967295
 8002464:	f000 fe47 	bl	80030f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002468:	4a06      	ldr	r2, [pc, #24]	; (8002484 <HAL_InitTick+0x5c>)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800246e:	2300      	movs	r3, #0
 8002470:	e000      	b.n	8002474 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
}
 8002474:	4618      	mov	r0, r3
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20000064 	.word	0x20000064
 8002480:	2000006c 	.word	0x2000006c
 8002484:	20000068 	.word	0x20000068

08002488 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_IncTick+0x20>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	4b06      	ldr	r3, [pc, #24]	; (80024ac <HAL_IncTick+0x24>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4413      	add	r3, r2
 8002498:	4a04      	ldr	r2, [pc, #16]	; (80024ac <HAL_IncTick+0x24>)
 800249a:	6013      	str	r3, [r2, #0]
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	2000006c 	.word	0x2000006c
 80024ac:	20000210 	.word	0x20000210

080024b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  return uwTick;
 80024b4:	4b03      	ldr	r3, [pc, #12]	; (80024c4 <HAL_GetTick+0x14>)
 80024b6:	681b      	ldr	r3, [r3, #0]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	20000210 	.word	0x20000210

080024c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024d0:	f7ff ffee 	bl	80024b0 <HAL_GetTick>
 80024d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e0:	d005      	beq.n	80024ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024e2:	4b0a      	ldr	r3, [pc, #40]	; (800250c <HAL_Delay+0x44>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4413      	add	r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024ee:	bf00      	nop
 80024f0:	f7ff ffde 	bl	80024b0 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d8f7      	bhi.n	80024f0 <HAL_Delay+0x28>
  {
  }
}
 8002500:	bf00      	nop
 8002502:	bf00      	nop
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	2000006c 	.word	0x2000006c

08002510 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002518:	2300      	movs	r3, #0
 800251a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e033      	b.n	800258e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	2b00      	cmp	r3, #0
 800252c:	d109      	bne.n	8002542 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7ff fd5c 	bl	8001fec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f003 0310 	and.w	r3, r3, #16
 800254a:	2b00      	cmp	r3, #0
 800254c:	d118      	bne.n	8002580 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002556:	f023 0302 	bic.w	r3, r3, #2
 800255a:	f043 0202 	orr.w	r2, r3, #2
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 fbe6 	bl	8002d34 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f023 0303 	bic.w	r3, r3, #3
 8002576:	f043 0201 	orr.w	r2, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	641a      	str	r2, [r3, #64]	; 0x40
 800257e:	e001      	b.n	8002584 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800258c:	7bfb      	ldrb	r3, [r7, #15]
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_ADC_Start+0x1a>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e097      	b.n	80026e2 <HAL_ADC_Start+0x14a>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d018      	beq.n	80025fa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0201 	orr.w	r2, r2, #1
 80025d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025d8:	4b45      	ldr	r3, [pc, #276]	; (80026f0 <HAL_ADC_Start+0x158>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a45      	ldr	r2, [pc, #276]	; (80026f4 <HAL_ADC_Start+0x15c>)
 80025de:	fba2 2303 	umull	r2, r3, r2, r3
 80025e2:	0c9a      	lsrs	r2, r3, #18
 80025e4:	4613      	mov	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	4413      	add	r3, r2
 80025ea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80025ec:	e002      	b.n	80025f4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	3b01      	subs	r3, #1
 80025f2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f9      	bne.n	80025ee <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b01      	cmp	r3, #1
 8002606:	d15f      	bne.n	80026c8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002610:	f023 0301 	bic.w	r3, r3, #1
 8002614:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002626:	2b00      	cmp	r3, #0
 8002628:	d007      	beq.n	800263a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002632:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002646:	d106      	bne.n	8002656 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264c:	f023 0206 	bic.w	r2, r3, #6
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	645a      	str	r2, [r3, #68]	; 0x44
 8002654:	e002      	b.n	800265c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002664:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <HAL_ADC_Start+0x160>)
 8002666:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002670:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f003 031f 	and.w	r3, r3, #31
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10f      	bne.n	800269e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d129      	bne.n	80026e0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	e020      	b.n	80026e0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a16      	ldr	r2, [pc, #88]	; (80026fc <HAL_ADC_Start+0x164>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d11b      	bne.n	80026e0 <HAL_ADC_Start+0x148>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d114      	bne.n	80026e0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026c4:	609a      	str	r2, [r3, #8]
 80026c6:	e00b      	b.n	80026e0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	f043 0210 	orr.w	r2, r3, #16
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d8:	f043 0201 	orr.w	r2, r3, #1
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	20000064 	.word	0x20000064
 80026f4:	431bde83 	.word	0x431bde83
 80026f8:	40012300 	.word	0x40012300
 80026fc:	40012000 	.word	0x40012000

08002700 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800271c:	d113      	bne.n	8002746 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800272c:	d10b      	bne.n	8002746 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f043 0220 	orr.w	r2, r3, #32
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e063      	b.n	800280e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002746:	f7ff feb3 	bl	80024b0 <HAL_GetTick>
 800274a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800274c:	e021      	b.n	8002792 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002754:	d01d      	beq.n	8002792 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d007      	beq.n	800276c <HAL_ADC_PollForConversion+0x6c>
 800275c:	f7ff fea8 	bl	80024b0 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	d212      	bcs.n	8002792 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b02      	cmp	r3, #2
 8002778:	d00b      	beq.n	8002792 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f043 0204 	orr.w	r2, r3, #4
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e03d      	b.n	800280e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b02      	cmp	r3, #2
 800279e:	d1d6      	bne.n	800274e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f06f 0212 	mvn.w	r2, #18
 80027a8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d123      	bne.n	800280c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d11f      	bne.n	800280c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d006      	beq.n	80027e8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d111      	bne.n	800280c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d105      	bne.n	800280c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	f043 0201 	orr.w	r2, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b084      	sub	sp, #16
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	2300      	movs	r3, #0
 8002824:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b02      	cmp	r3, #2
 8002832:	bf0c      	ite	eq
 8002834:	2301      	moveq	r3, #1
 8002836:	2300      	movne	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 0320 	and.w	r3, r3, #32
 8002846:	2b20      	cmp	r3, #32
 8002848:	bf0c      	ite	eq
 800284a:	2301      	moveq	r3, #1
 800284c:	2300      	movne	r3, #0
 800284e:	b2db      	uxtb	r3, r3
 8002850:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d049      	beq.n	80028ec <HAL_ADC_IRQHandler+0xd6>
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d046      	beq.n	80028ec <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	2b00      	cmp	r3, #0
 8002868:	d105      	bne.n	8002876 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d12b      	bne.n	80028dc <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002888:	2b00      	cmp	r3, #0
 800288a:	d127      	bne.n	80028dc <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002892:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002896:	2b00      	cmp	r3, #0
 8002898:	d006      	beq.n	80028a8 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d119      	bne.n	80028dc <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0220 	bic.w	r2, r2, #32
 80028b6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d105      	bne.n	80028dc <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	f043 0201 	orr.w	r2, r3, #1
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f8e8 	bl	8002ab2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f06f 0212 	mvn.w	r2, #18
 80028ea:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	bf0c      	ite	eq
 80028fa:	2301      	moveq	r3, #1
 80028fc:	2300      	movne	r3, #0
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290c:	2b80      	cmp	r3, #128	; 0x80
 800290e:	bf0c      	ite	eq
 8002910:	2301      	moveq	r3, #1
 8002912:	2300      	movne	r3, #0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d057      	beq.n	80029ce <HAL_ADC_IRQHandler+0x1b8>
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d054      	beq.n	80029ce <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	f003 0310 	and.w	r3, r3, #16
 800292c:	2b00      	cmp	r3, #0
 800292e:	d105      	bne.n	800293c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d139      	bne.n	80029be <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002950:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002954:	2b00      	cmp	r3, #0
 8002956:	d006      	beq.n	8002966 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002962:	2b00      	cmp	r3, #0
 8002964:	d12b      	bne.n	80029be <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002970:	2b00      	cmp	r3, #0
 8002972:	d124      	bne.n	80029be <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800297e:	2b00      	cmp	r3, #0
 8002980:	d11d      	bne.n	80029be <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002986:	2b00      	cmp	r3, #0
 8002988:	d119      	bne.n	80029be <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002998:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d105      	bne.n	80029be <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f043 0201 	orr.w	r2, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 fab4 	bl	8002f2c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f06f 020c 	mvn.w	r2, #12
 80029cc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b01      	cmp	r3, #1
 80029da:	bf0c      	ite	eq
 80029dc:	2301      	moveq	r3, #1
 80029de:	2300      	movne	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ee:	2b40      	cmp	r3, #64	; 0x40
 80029f0:	bf0c      	ite	eq
 80029f2:	2301      	moveq	r3, #1
 80029f4:	2300      	movne	r3, #0
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d017      	beq.n	8002a30 <HAL_ADC_IRQHandler+0x21a>
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d014      	beq.n	8002a30 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d10d      	bne.n	8002a30 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 f850 	bl	8002ac6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f06f 0201 	mvn.w	r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0320 	and.w	r3, r3, #32
 8002a3a:	2b20      	cmp	r3, #32
 8002a3c:	bf0c      	ite	eq
 8002a3e:	2301      	moveq	r3, #1
 8002a40:	2300      	movne	r3, #0
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a54:	bf0c      	ite	eq
 8002a56:	2301      	moveq	r3, #1
 8002a58:	2300      	movne	r3, #0
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d015      	beq.n	8002a90 <HAL_ADC_IRQHandler+0x27a>
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d012      	beq.n	8002a90 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	f043 0202 	orr.w	r2, r3, #2
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f06f 0220 	mvn.w	r2, #32
 8002a7e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f82a 	bl	8002ada <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f06f 0220 	mvn.w	r2, #32
 8002a8e:	601a      	str	r2, [r3, #0]
  }
}
 8002a90:	bf00      	nop
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b083      	sub	sp, #12
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
	...

08002af0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x1c>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e105      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x228>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b09      	cmp	r3, #9
 8002b1a:	d925      	bls.n	8002b68 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68d9      	ldr	r1, [r3, #12]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	461a      	mov	r2, r3
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	4413      	add	r3, r2
 8002b30:	3b1e      	subs	r3, #30
 8002b32:	2207      	movs	r2, #7
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43da      	mvns	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	400a      	ands	r2, r1
 8002b40:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68d9      	ldr	r1, [r3, #12]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	4618      	mov	r0, r3
 8002b54:	4603      	mov	r3, r0
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	4403      	add	r3, r0
 8002b5a:	3b1e      	subs	r3, #30
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	60da      	str	r2, [r3, #12]
 8002b66:	e022      	b.n	8002bae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6919      	ldr	r1, [r3, #16]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	461a      	mov	r2, r3
 8002b76:	4613      	mov	r3, r2
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	4413      	add	r3, r2
 8002b7c:	2207      	movs	r2, #7
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43da      	mvns	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	400a      	ands	r2, r1
 8002b8a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6919      	ldr	r1, [r3, #16]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	4403      	add	r3, r0
 8002ba4:	409a      	lsls	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b06      	cmp	r3, #6
 8002bb4:	d824      	bhi.n	8002c00 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3b05      	subs	r3, #5
 8002bc8:	221f      	movs	r2, #31
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43da      	mvns	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	400a      	ands	r2, r1
 8002bd6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	4618      	mov	r0, r3
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	3b05      	subs	r3, #5
 8002bf2:	fa00 f203 	lsl.w	r2, r0, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	635a      	str	r2, [r3, #52]	; 0x34
 8002bfe:	e04c      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b0c      	cmp	r3, #12
 8002c06:	d824      	bhi.n	8002c52 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	3b23      	subs	r3, #35	; 0x23
 8002c1a:	221f      	movs	r2, #31
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43da      	mvns	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	400a      	ands	r2, r1
 8002c28:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	4618      	mov	r0, r3
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	3b23      	subs	r3, #35	; 0x23
 8002c44:	fa00 f203 	lsl.w	r2, r0, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	631a      	str	r2, [r3, #48]	; 0x30
 8002c50:	e023      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	3b41      	subs	r3, #65	; 0x41
 8002c64:	221f      	movs	r2, #31
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43da      	mvns	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	400a      	ands	r2, r1
 8002c72:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	4618      	mov	r0, r3
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3b41      	subs	r3, #65	; 0x41
 8002c8e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c9a:	4b22      	ldr	r3, [pc, #136]	; (8002d24 <HAL_ADC_ConfigChannel+0x234>)
 8002c9c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a21      	ldr	r2, [pc, #132]	; (8002d28 <HAL_ADC_ConfigChannel+0x238>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d109      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x1cc>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b12      	cmp	r3, #18
 8002cae:	d105      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a19      	ldr	r2, [pc, #100]	; (8002d28 <HAL_ADC_ConfigChannel+0x238>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d123      	bne.n	8002d0e <HAL_ADC_ConfigChannel+0x21e>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2b10      	cmp	r3, #16
 8002ccc:	d003      	beq.n	8002cd6 <HAL_ADC_ConfigChannel+0x1e6>
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2b11      	cmp	r3, #17
 8002cd4:	d11b      	bne.n	8002d0e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b10      	cmp	r3, #16
 8002ce8:	d111      	bne.n	8002d0e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002cea:	4b10      	ldr	r3, [pc, #64]	; (8002d2c <HAL_ADC_ConfigChannel+0x23c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a10      	ldr	r2, [pc, #64]	; (8002d30 <HAL_ADC_ConfigChannel+0x240>)
 8002cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf4:	0c9a      	lsrs	r2, r3, #18
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d00:	e002      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	3b01      	subs	r3, #1
 8002d06:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f9      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	40012300 	.word	0x40012300
 8002d28:	40012000 	.word	0x40012000
 8002d2c:	20000064 	.word	0x20000064
 8002d30:	431bde83 	.word	0x431bde83

08002d34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d3c:	4b79      	ldr	r3, [pc, #484]	; (8002f24 <ADC_Init+0x1f0>)
 8002d3e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	431a      	orrs	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6859      	ldr	r1, [r3, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	021a      	lsls	r2, r3, #8
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6859      	ldr	r1, [r3, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6899      	ldr	r1, [r3, #8]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc6:	4a58      	ldr	r2, [pc, #352]	; (8002f28 <ADC_Init+0x1f4>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d022      	beq.n	8002e12 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dda:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6899      	ldr	r1, [r3, #8]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002dfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6899      	ldr	r1, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	609a      	str	r2, [r3, #8]
 8002e10:	e00f      	b.n	8002e32 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e30:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0202 	bic.w	r2, r2, #2
 8002e40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6899      	ldr	r1, [r3, #8]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	7e1b      	ldrb	r3, [r3, #24]
 8002e4c:	005a      	lsls	r2, r3, #1
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d01b      	beq.n	8002e98 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e6e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6859      	ldr	r1, [r3, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	035a      	lsls	r2, r3, #13
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	e007      	b.n	8002ea8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ea6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	051a      	lsls	r2, r3, #20
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002edc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6899      	ldr	r1, [r3, #8]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002eea:	025a      	lsls	r2, r3, #9
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6899      	ldr	r1, [r3, #8]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	029a      	lsls	r2, r3, #10
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	609a      	str	r2, [r3, #8]
}
 8002f18:	bf00      	nop
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	40012300 	.word	0x40012300
 8002f28:	0f000001 	.word	0x0f000001

08002f2c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f50:	4b0c      	ldr	r3, [pc, #48]	; (8002f84 <__NVIC_SetPriorityGrouping+0x44>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f72:	4a04      	ldr	r2, [pc, #16]	; (8002f84 <__NVIC_SetPriorityGrouping+0x44>)
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	60d3      	str	r3, [r2, #12]
}
 8002f78:	bf00      	nop
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	e000ed00 	.word	0xe000ed00

08002f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f8c:	4b04      	ldr	r3, [pc, #16]	; (8002fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	0a1b      	lsrs	r3, r3, #8
 8002f92:	f003 0307 	and.w	r3, r3, #7
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	e000ed00 	.word	0xe000ed00

08002fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	db0b      	blt.n	8002fce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	f003 021f 	and.w	r2, r3, #31
 8002fbc:	4907      	ldr	r1, [pc, #28]	; (8002fdc <__NVIC_EnableIRQ+0x38>)
 8002fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc2:	095b      	lsrs	r3, r3, #5
 8002fc4:	2001      	movs	r0, #1
 8002fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8002fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	e000e100 	.word	0xe000e100

08002fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	6039      	str	r1, [r7, #0]
 8002fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	db0a      	blt.n	800300a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	490c      	ldr	r1, [pc, #48]	; (800302c <__NVIC_SetPriority+0x4c>)
 8002ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffe:	0112      	lsls	r2, r2, #4
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	440b      	add	r3, r1
 8003004:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003008:	e00a      	b.n	8003020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	b2da      	uxtb	r2, r3
 800300e:	4908      	ldr	r1, [pc, #32]	; (8003030 <__NVIC_SetPriority+0x50>)
 8003010:	79fb      	ldrb	r3, [r7, #7]
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	3b04      	subs	r3, #4
 8003018:	0112      	lsls	r2, r2, #4
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	440b      	add	r3, r1
 800301e:	761a      	strb	r2, [r3, #24]
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	e000e100 	.word	0xe000e100
 8003030:	e000ed00 	.word	0xe000ed00

08003034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003034:	b480      	push	{r7}
 8003036:	b089      	sub	sp, #36	; 0x24
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	f1c3 0307 	rsb	r3, r3, #7
 800304e:	2b04      	cmp	r3, #4
 8003050:	bf28      	it	cs
 8003052:	2304      	movcs	r3, #4
 8003054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	3304      	adds	r3, #4
 800305a:	2b06      	cmp	r3, #6
 800305c:	d902      	bls.n	8003064 <NVIC_EncodePriority+0x30>
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	3b03      	subs	r3, #3
 8003062:	e000      	b.n	8003066 <NVIC_EncodePriority+0x32>
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003068:	f04f 32ff 	mov.w	r2, #4294967295
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43da      	mvns	r2, r3
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	401a      	ands	r2, r3
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800307c:	f04f 31ff 	mov.w	r1, #4294967295
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	fa01 f303 	lsl.w	r3, r1, r3
 8003086:	43d9      	mvns	r1, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800308c:	4313      	orrs	r3, r2
         );
}
 800308e:	4618      	mov	r0, r3
 8003090:	3724      	adds	r7, #36	; 0x24
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
	...

0800309c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030ac:	d301      	bcc.n	80030b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ae:	2301      	movs	r3, #1
 80030b0:	e00f      	b.n	80030d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030b2:	4a0a      	ldr	r2, [pc, #40]	; (80030dc <SysTick_Config+0x40>)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3b01      	subs	r3, #1
 80030b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ba:	210f      	movs	r1, #15
 80030bc:	f04f 30ff 	mov.w	r0, #4294967295
 80030c0:	f7ff ff8e 	bl	8002fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030c4:	4b05      	ldr	r3, [pc, #20]	; (80030dc <SysTick_Config+0x40>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ca:	4b04      	ldr	r3, [pc, #16]	; (80030dc <SysTick_Config+0x40>)
 80030cc:	2207      	movs	r2, #7
 80030ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	e000e010 	.word	0xe000e010

080030e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f7ff ff29 	bl	8002f40 <__NVIC_SetPriorityGrouping>
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b086      	sub	sp, #24
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	4603      	mov	r3, r0
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	607a      	str	r2, [r7, #4]
 8003102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003108:	f7ff ff3e 	bl	8002f88 <__NVIC_GetPriorityGrouping>
 800310c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	68b9      	ldr	r1, [r7, #8]
 8003112:	6978      	ldr	r0, [r7, #20]
 8003114:	f7ff ff8e 	bl	8003034 <NVIC_EncodePriority>
 8003118:	4602      	mov	r2, r0
 800311a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800311e:	4611      	mov	r1, r2
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff ff5d 	bl	8002fe0 <__NVIC_SetPriority>
}
 8003126:	bf00      	nop
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b082      	sub	sp, #8
 8003132:	af00      	add	r7, sp, #0
 8003134:	4603      	mov	r3, r0
 8003136:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff ff31 	bl	8002fa4 <__NVIC_EnableIRQ>
}
 8003142:	bf00      	nop
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b082      	sub	sp, #8
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7ff ffa2 	bl	800309c <SysTick_Config>
 8003158:	4603      	mov	r3, r0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
	...

08003164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003164:	b480      	push	{r7}
 8003166:	b089      	sub	sp, #36	; 0x24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800316e:	2300      	movs	r3, #0
 8003170:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003172:	2300      	movs	r3, #0
 8003174:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003176:	2300      	movs	r3, #0
 8003178:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800317a:	2300      	movs	r3, #0
 800317c:	61fb      	str	r3, [r7, #28]
 800317e:	e159      	b.n	8003434 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003180:	2201      	movs	r2, #1
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4013      	ands	r3, r2
 8003192:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	429a      	cmp	r2, r3
 800319a:	f040 8148 	bne.w	800342e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d005      	beq.n	80031b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d130      	bne.n	8003218 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	2203      	movs	r2, #3
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	43db      	mvns	r3, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4013      	ands	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031ec:	2201      	movs	r2, #1
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	43db      	mvns	r3, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4013      	ands	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	091b      	lsrs	r3, r3, #4
 8003202:	f003 0201 	and.w	r2, r3, #1
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4313      	orrs	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f003 0303 	and.w	r3, r3, #3
 8003220:	2b03      	cmp	r3, #3
 8003222:	d017      	beq.n	8003254 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	2203      	movs	r2, #3
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4313      	orrs	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d123      	bne.n	80032a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	08da      	lsrs	r2, r3, #3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3208      	adds	r2, #8
 8003268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800326c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	220f      	movs	r2, #15
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	43db      	mvns	r3, r3
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	4013      	ands	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	691a      	ldr	r2, [r3, #16]
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4313      	orrs	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	08da      	lsrs	r2, r3, #3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3208      	adds	r2, #8
 80032a2:	69b9      	ldr	r1, [r7, #24]
 80032a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	2203      	movs	r2, #3
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	43db      	mvns	r3, r3
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	4013      	ands	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 0203 	and.w	r2, r3, #3
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 80a2 	beq.w	800342e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ea:	2300      	movs	r3, #0
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	4b57      	ldr	r3, [pc, #348]	; (800344c <HAL_GPIO_Init+0x2e8>)
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	4a56      	ldr	r2, [pc, #344]	; (800344c <HAL_GPIO_Init+0x2e8>)
 80032f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032f8:	6453      	str	r3, [r2, #68]	; 0x44
 80032fa:	4b54      	ldr	r3, [pc, #336]	; (800344c <HAL_GPIO_Init+0x2e8>)
 80032fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003306:	4a52      	ldr	r2, [pc, #328]	; (8003450 <HAL_GPIO_Init+0x2ec>)
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	089b      	lsrs	r3, r3, #2
 800330c:	3302      	adds	r3, #2
 800330e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003312:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	220f      	movs	r2, #15
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	43db      	mvns	r3, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4013      	ands	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a49      	ldr	r2, [pc, #292]	; (8003454 <HAL_GPIO_Init+0x2f0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d019      	beq.n	8003366 <HAL_GPIO_Init+0x202>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a48      	ldr	r2, [pc, #288]	; (8003458 <HAL_GPIO_Init+0x2f4>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d013      	beq.n	8003362 <HAL_GPIO_Init+0x1fe>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a47      	ldr	r2, [pc, #284]	; (800345c <HAL_GPIO_Init+0x2f8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00d      	beq.n	800335e <HAL_GPIO_Init+0x1fa>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a46      	ldr	r2, [pc, #280]	; (8003460 <HAL_GPIO_Init+0x2fc>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d007      	beq.n	800335a <HAL_GPIO_Init+0x1f6>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a45      	ldr	r2, [pc, #276]	; (8003464 <HAL_GPIO_Init+0x300>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d101      	bne.n	8003356 <HAL_GPIO_Init+0x1f2>
 8003352:	2304      	movs	r3, #4
 8003354:	e008      	b.n	8003368 <HAL_GPIO_Init+0x204>
 8003356:	2307      	movs	r3, #7
 8003358:	e006      	b.n	8003368 <HAL_GPIO_Init+0x204>
 800335a:	2303      	movs	r3, #3
 800335c:	e004      	b.n	8003368 <HAL_GPIO_Init+0x204>
 800335e:	2302      	movs	r3, #2
 8003360:	e002      	b.n	8003368 <HAL_GPIO_Init+0x204>
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <HAL_GPIO_Init+0x204>
 8003366:	2300      	movs	r3, #0
 8003368:	69fa      	ldr	r2, [r7, #28]
 800336a:	f002 0203 	and.w	r2, r2, #3
 800336e:	0092      	lsls	r2, r2, #2
 8003370:	4093      	lsls	r3, r2
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4313      	orrs	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003378:	4935      	ldr	r1, [pc, #212]	; (8003450 <HAL_GPIO_Init+0x2ec>)
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	089b      	lsrs	r3, r3, #2
 800337e:	3302      	adds	r3, #2
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003386:	4b38      	ldr	r3, [pc, #224]	; (8003468 <HAL_GPIO_Init+0x304>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	43db      	mvns	r3, r3
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4013      	ands	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033aa:	4a2f      	ldr	r2, [pc, #188]	; (8003468 <HAL_GPIO_Init+0x304>)
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80033b0:	4b2d      	ldr	r3, [pc, #180]	; (8003468 <HAL_GPIO_Init+0x304>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	43db      	mvns	r3, r3
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	4013      	ands	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033d4:	4a24      	ldr	r2, [pc, #144]	; (8003468 <HAL_GPIO_Init+0x304>)
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033da:	4b23      	ldr	r3, [pc, #140]	; (8003468 <HAL_GPIO_Init+0x304>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	43db      	mvns	r3, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4013      	ands	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033fe:	4a1a      	ldr	r2, [pc, #104]	; (8003468 <HAL_GPIO_Init+0x304>)
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003404:	4b18      	ldr	r3, [pc, #96]	; (8003468 <HAL_GPIO_Init+0x304>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	43db      	mvns	r3, r3
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	4013      	ands	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	4313      	orrs	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003428:	4a0f      	ldr	r2, [pc, #60]	; (8003468 <HAL_GPIO_Init+0x304>)
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	3301      	adds	r3, #1
 8003432:	61fb      	str	r3, [r7, #28]
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	2b0f      	cmp	r3, #15
 8003438:	f67f aea2 	bls.w	8003180 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800343c:	bf00      	nop
 800343e:	bf00      	nop
 8003440:	3724      	adds	r7, #36	; 0x24
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	40023800 	.word	0x40023800
 8003450:	40013800 	.word	0x40013800
 8003454:	40020000 	.word	0x40020000
 8003458:	40020400 	.word	0x40020400
 800345c:	40020800 	.word	0x40020800
 8003460:	40020c00 	.word	0x40020c00
 8003464:	40021000 	.word	0x40021000
 8003468:	40013c00 	.word	0x40013c00

0800346c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800346c:	b480      	push	{r7}
 800346e:	b087      	sub	sp, #28
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003476:	2300      	movs	r3, #0
 8003478:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800347a:	2300      	movs	r3, #0
 800347c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800347e:	2300      	movs	r3, #0
 8003480:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003482:	2300      	movs	r3, #0
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	e0bb      	b.n	8003600 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003488:	2201      	movs	r2, #1
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	4013      	ands	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	429a      	cmp	r2, r3
 80034a0:	f040 80ab 	bne.w	80035fa <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80034a4:	4a5c      	ldr	r2, [pc, #368]	; (8003618 <HAL_GPIO_DeInit+0x1ac>)
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	089b      	lsrs	r3, r3, #2
 80034aa:	3302      	adds	r3, #2
 80034ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f003 0303 	and.w	r3, r3, #3
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	220f      	movs	r2, #15
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	4013      	ands	r3, r2
 80034c4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a54      	ldr	r2, [pc, #336]	; (800361c <HAL_GPIO_DeInit+0x1b0>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d019      	beq.n	8003502 <HAL_GPIO_DeInit+0x96>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a53      	ldr	r2, [pc, #332]	; (8003620 <HAL_GPIO_DeInit+0x1b4>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d013      	beq.n	80034fe <HAL_GPIO_DeInit+0x92>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a52      	ldr	r2, [pc, #328]	; (8003624 <HAL_GPIO_DeInit+0x1b8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d00d      	beq.n	80034fa <HAL_GPIO_DeInit+0x8e>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a51      	ldr	r2, [pc, #324]	; (8003628 <HAL_GPIO_DeInit+0x1bc>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d007      	beq.n	80034f6 <HAL_GPIO_DeInit+0x8a>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a50      	ldr	r2, [pc, #320]	; (800362c <HAL_GPIO_DeInit+0x1c0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d101      	bne.n	80034f2 <HAL_GPIO_DeInit+0x86>
 80034ee:	2304      	movs	r3, #4
 80034f0:	e008      	b.n	8003504 <HAL_GPIO_DeInit+0x98>
 80034f2:	2307      	movs	r3, #7
 80034f4:	e006      	b.n	8003504 <HAL_GPIO_DeInit+0x98>
 80034f6:	2303      	movs	r3, #3
 80034f8:	e004      	b.n	8003504 <HAL_GPIO_DeInit+0x98>
 80034fa:	2302      	movs	r3, #2
 80034fc:	e002      	b.n	8003504 <HAL_GPIO_DeInit+0x98>
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <HAL_GPIO_DeInit+0x98>
 8003502:	2300      	movs	r3, #0
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	f002 0203 	and.w	r2, r2, #3
 800350a:	0092      	lsls	r2, r2, #2
 800350c:	4093      	lsls	r3, r2
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	429a      	cmp	r2, r3
 8003512:	d132      	bne.n	800357a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003514:	4b46      	ldr	r3, [pc, #280]	; (8003630 <HAL_GPIO_DeInit+0x1c4>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	43db      	mvns	r3, r3
 800351c:	4944      	ldr	r1, [pc, #272]	; (8003630 <HAL_GPIO_DeInit+0x1c4>)
 800351e:	4013      	ands	r3, r2
 8003520:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003522:	4b43      	ldr	r3, [pc, #268]	; (8003630 <HAL_GPIO_DeInit+0x1c4>)
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	43db      	mvns	r3, r3
 800352a:	4941      	ldr	r1, [pc, #260]	; (8003630 <HAL_GPIO_DeInit+0x1c4>)
 800352c:	4013      	ands	r3, r2
 800352e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003530:	4b3f      	ldr	r3, [pc, #252]	; (8003630 <HAL_GPIO_DeInit+0x1c4>)
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	43db      	mvns	r3, r3
 8003538:	493d      	ldr	r1, [pc, #244]	; (8003630 <HAL_GPIO_DeInit+0x1c4>)
 800353a:	4013      	ands	r3, r2
 800353c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800353e:	4b3c      	ldr	r3, [pc, #240]	; (8003630 <HAL_GPIO_DeInit+0x1c4>)
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	43db      	mvns	r3, r3
 8003546:	493a      	ldr	r1, [pc, #232]	; (8003630 <HAL_GPIO_DeInit+0x1c4>)
 8003548:	4013      	ands	r3, r2
 800354a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	220f      	movs	r2, #15
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800355c:	4a2e      	ldr	r2, [pc, #184]	; (8003618 <HAL_GPIO_DeInit+0x1ac>)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	089b      	lsrs	r3, r3, #2
 8003562:	3302      	adds	r3, #2
 8003564:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	43da      	mvns	r2, r3
 800356c:	482a      	ldr	r0, [pc, #168]	; (8003618 <HAL_GPIO_DeInit+0x1ac>)
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	089b      	lsrs	r3, r3, #2
 8003572:	400a      	ands	r2, r1
 8003574:	3302      	adds	r3, #2
 8003576:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	2103      	movs	r1, #3
 8003584:	fa01 f303 	lsl.w	r3, r1, r3
 8003588:	43db      	mvns	r3, r3
 800358a:	401a      	ands	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	08da      	lsrs	r2, r3, #3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3208      	adds	r2, #8
 8003598:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	220f      	movs	r2, #15
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	43db      	mvns	r3, r3
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	08d2      	lsrs	r2, r2, #3
 80035b0:	4019      	ands	r1, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	3208      	adds	r2, #8
 80035b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	2103      	movs	r1, #3
 80035c4:	fa01 f303 	lsl.w	r3, r1, r3
 80035c8:	43db      	mvns	r3, r3
 80035ca:	401a      	ands	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	2101      	movs	r1, #1
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	fa01 f303 	lsl.w	r3, r1, r3
 80035dc:	43db      	mvns	r3, r3
 80035de:	401a      	ands	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	2103      	movs	r1, #3
 80035ee:	fa01 f303 	lsl.w	r3, r1, r3
 80035f2:	43db      	mvns	r3, r3
 80035f4:	401a      	ands	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	3301      	adds	r3, #1
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	2b0f      	cmp	r3, #15
 8003604:	f67f af40 	bls.w	8003488 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003608:	bf00      	nop
 800360a:	bf00      	nop
 800360c:	371c      	adds	r7, #28
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40013800 	.word	0x40013800
 800361c:	40020000 	.word	0x40020000
 8003620:	40020400 	.word	0x40020400
 8003624:	40020800 	.word	0x40020800
 8003628:	40020c00 	.word	0x40020c00
 800362c:	40021000 	.word	0x40021000
 8003630:	40013c00 	.word	0x40013c00

08003634 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	887b      	ldrh	r3, [r7, #2]
 8003646:	4013      	ands	r3, r2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d002      	beq.n	8003652 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800364c:	2301      	movs	r3, #1
 800364e:	73fb      	strb	r3, [r7, #15]
 8003650:	e001      	b.n	8003656 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003652:	2300      	movs	r3, #0
 8003654:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003656:	7bfb      	ldrb	r3, [r7, #15]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	460b      	mov	r3, r1
 800366e:	807b      	strh	r3, [r7, #2]
 8003670:	4613      	mov	r3, r2
 8003672:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003674:	787b      	ldrb	r3, [r7, #1]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800367a:	887a      	ldrh	r2, [r7, #2]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003680:	e003      	b.n	800368a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003682:	887b      	ldrh	r3, [r7, #2]
 8003684:	041a      	lsls	r2, r3, #16
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	619a      	str	r2, [r3, #24]
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
	...

08003698 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e264      	b.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d075      	beq.n	80037a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036b6:	4ba3      	ldr	r3, [pc, #652]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 030c 	and.w	r3, r3, #12
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d00c      	beq.n	80036dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036c2:	4ba0      	ldr	r3, [pc, #640]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d112      	bne.n	80036f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ce:	4b9d      	ldr	r3, [pc, #628]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036da:	d10b      	bne.n	80036f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036dc:	4b99      	ldr	r3, [pc, #612]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d05b      	beq.n	80037a0 <HAL_RCC_OscConfig+0x108>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d157      	bne.n	80037a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e23f      	b.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036fc:	d106      	bne.n	800370c <HAL_RCC_OscConfig+0x74>
 80036fe:	4b91      	ldr	r3, [pc, #580]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a90      	ldr	r2, [pc, #576]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 8003704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003708:	6013      	str	r3, [r2, #0]
 800370a:	e01d      	b.n	8003748 <HAL_RCC_OscConfig+0xb0>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003714:	d10c      	bne.n	8003730 <HAL_RCC_OscConfig+0x98>
 8003716:	4b8b      	ldr	r3, [pc, #556]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a8a      	ldr	r2, [pc, #552]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 800371c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	4b88      	ldr	r3, [pc, #544]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a87      	ldr	r2, [pc, #540]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 8003728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800372c:	6013      	str	r3, [r2, #0]
 800372e:	e00b      	b.n	8003748 <HAL_RCC_OscConfig+0xb0>
 8003730:	4b84      	ldr	r3, [pc, #528]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a83      	ldr	r2, [pc, #524]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 8003736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800373a:	6013      	str	r3, [r2, #0]
 800373c:	4b81      	ldr	r3, [pc, #516]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a80      	ldr	r2, [pc, #512]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 8003742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d013      	beq.n	8003778 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003750:	f7fe feae 	bl	80024b0 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003758:	f7fe feaa 	bl	80024b0 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b64      	cmp	r3, #100	; 0x64
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e204      	b.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376a:	4b76      	ldr	r3, [pc, #472]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0f0      	beq.n	8003758 <HAL_RCC_OscConfig+0xc0>
 8003776:	e014      	b.n	80037a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003778:	f7fe fe9a 	bl	80024b0 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003780:	f7fe fe96 	bl	80024b0 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b64      	cmp	r3, #100	; 0x64
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e1f0      	b.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003792:	4b6c      	ldr	r3, [pc, #432]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1f0      	bne.n	8003780 <HAL_RCC_OscConfig+0xe8>
 800379e:	e000      	b.n	80037a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d063      	beq.n	8003876 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037ae:	4b65      	ldr	r3, [pc, #404]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 030c 	and.w	r3, r3, #12
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00b      	beq.n	80037d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037ba:	4b62      	ldr	r3, [pc, #392]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037c2:	2b08      	cmp	r3, #8
 80037c4:	d11c      	bne.n	8003800 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037c6:	4b5f      	ldr	r3, [pc, #380]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d116      	bne.n	8003800 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037d2:	4b5c      	ldr	r3, [pc, #368]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d005      	beq.n	80037ea <HAL_RCC_OscConfig+0x152>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d001      	beq.n	80037ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e1c4      	b.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ea:	4b56      	ldr	r3, [pc, #344]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	4952      	ldr	r1, [pc, #328]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037fe:	e03a      	b.n	8003876 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d020      	beq.n	800384a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003808:	4b4f      	ldr	r3, [pc, #316]	; (8003948 <HAL_RCC_OscConfig+0x2b0>)
 800380a:	2201      	movs	r2, #1
 800380c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380e:	f7fe fe4f 	bl	80024b0 <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003816:	f7fe fe4b 	bl	80024b0 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e1a5      	b.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003828:	4b46      	ldr	r3, [pc, #280]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0f0      	beq.n	8003816 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003834:	4b43      	ldr	r3, [pc, #268]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	4940      	ldr	r1, [pc, #256]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 8003844:	4313      	orrs	r3, r2
 8003846:	600b      	str	r3, [r1, #0]
 8003848:	e015      	b.n	8003876 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800384a:	4b3f      	ldr	r3, [pc, #252]	; (8003948 <HAL_RCC_OscConfig+0x2b0>)
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003850:	f7fe fe2e 	bl	80024b0 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003858:	f7fe fe2a 	bl	80024b0 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e184      	b.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800386a:	4b36      	ldr	r3, [pc, #216]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f0      	bne.n	8003858 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b00      	cmp	r3, #0
 8003880:	d030      	beq.n	80038e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d016      	beq.n	80038b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800388a:	4b30      	ldr	r3, [pc, #192]	; (800394c <HAL_RCC_OscConfig+0x2b4>)
 800388c:	2201      	movs	r2, #1
 800388e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003890:	f7fe fe0e 	bl	80024b0 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003898:	f7fe fe0a 	bl	80024b0 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e164      	b.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038aa:	4b26      	ldr	r3, [pc, #152]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 80038ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0f0      	beq.n	8003898 <HAL_RCC_OscConfig+0x200>
 80038b6:	e015      	b.n	80038e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038b8:	4b24      	ldr	r3, [pc, #144]	; (800394c <HAL_RCC_OscConfig+0x2b4>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038be:	f7fe fdf7 	bl	80024b0 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038c6:	f7fe fdf3 	bl	80024b0 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e14d      	b.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d8:	4b1a      	ldr	r3, [pc, #104]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 80038da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1f0      	bne.n	80038c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 80a0 	beq.w	8003a32 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038f2:	2300      	movs	r3, #0
 80038f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038f6:	4b13      	ldr	r3, [pc, #76]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10f      	bne.n	8003922 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003902:	2300      	movs	r3, #0
 8003904:	60bb      	str	r3, [r7, #8]
 8003906:	4b0f      	ldr	r3, [pc, #60]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	4a0e      	ldr	r2, [pc, #56]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 800390c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003910:	6413      	str	r3, [r2, #64]	; 0x40
 8003912:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391a:	60bb      	str	r3, [r7, #8]
 800391c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800391e:	2301      	movs	r3, #1
 8003920:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003922:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <HAL_RCC_OscConfig+0x2b8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392a:	2b00      	cmp	r3, #0
 800392c:	d121      	bne.n	8003972 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800392e:	4b08      	ldr	r3, [pc, #32]	; (8003950 <HAL_RCC_OscConfig+0x2b8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a07      	ldr	r2, [pc, #28]	; (8003950 <HAL_RCC_OscConfig+0x2b8>)
 8003934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800393a:	f7fe fdb9 	bl	80024b0 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003940:	e011      	b.n	8003966 <HAL_RCC_OscConfig+0x2ce>
 8003942:	bf00      	nop
 8003944:	40023800 	.word	0x40023800
 8003948:	42470000 	.word	0x42470000
 800394c:	42470e80 	.word	0x42470e80
 8003950:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003954:	f7fe fdac 	bl	80024b0 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e106      	b.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003966:	4b85      	ldr	r3, [pc, #532]	; (8003b7c <HAL_RCC_OscConfig+0x4e4>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0f0      	beq.n	8003954 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d106      	bne.n	8003988 <HAL_RCC_OscConfig+0x2f0>
 800397a:	4b81      	ldr	r3, [pc, #516]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 800397c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397e:	4a80      	ldr	r2, [pc, #512]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	6713      	str	r3, [r2, #112]	; 0x70
 8003986:	e01c      	b.n	80039c2 <HAL_RCC_OscConfig+0x32a>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	2b05      	cmp	r3, #5
 800398e:	d10c      	bne.n	80039aa <HAL_RCC_OscConfig+0x312>
 8003990:	4b7b      	ldr	r3, [pc, #492]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 8003992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003994:	4a7a      	ldr	r2, [pc, #488]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 8003996:	f043 0304 	orr.w	r3, r3, #4
 800399a:	6713      	str	r3, [r2, #112]	; 0x70
 800399c:	4b78      	ldr	r3, [pc, #480]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 800399e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a0:	4a77      	ldr	r2, [pc, #476]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 80039a2:	f043 0301 	orr.w	r3, r3, #1
 80039a6:	6713      	str	r3, [r2, #112]	; 0x70
 80039a8:	e00b      	b.n	80039c2 <HAL_RCC_OscConfig+0x32a>
 80039aa:	4b75      	ldr	r3, [pc, #468]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 80039ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ae:	4a74      	ldr	r2, [pc, #464]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 80039b0:	f023 0301 	bic.w	r3, r3, #1
 80039b4:	6713      	str	r3, [r2, #112]	; 0x70
 80039b6:	4b72      	ldr	r3, [pc, #456]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 80039b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ba:	4a71      	ldr	r2, [pc, #452]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 80039bc:	f023 0304 	bic.w	r3, r3, #4
 80039c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d015      	beq.n	80039f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ca:	f7fe fd71 	bl	80024b0 <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d0:	e00a      	b.n	80039e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039d2:	f7fe fd6d 	bl	80024b0 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e0c5      	b.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e8:	4b65      	ldr	r3, [pc, #404]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 80039ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0ee      	beq.n	80039d2 <HAL_RCC_OscConfig+0x33a>
 80039f4:	e014      	b.n	8003a20 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039f6:	f7fe fd5b 	bl	80024b0 <HAL_GetTick>
 80039fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039fc:	e00a      	b.n	8003a14 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039fe:	f7fe fd57 	bl	80024b0 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e0af      	b.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a14:	4b5a      	ldr	r3, [pc, #360]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 8003a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1ee      	bne.n	80039fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a20:	7dfb      	ldrb	r3, [r7, #23]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d105      	bne.n	8003a32 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a26:	4b56      	ldr	r3, [pc, #344]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	4a55      	ldr	r2, [pc, #340]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 8003a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 809b 	beq.w	8003b72 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a3c:	4b50      	ldr	r3, [pc, #320]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 030c 	and.w	r3, r3, #12
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	d05c      	beq.n	8003b02 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d141      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a50:	4b4c      	ldr	r3, [pc, #304]	; (8003b84 <HAL_RCC_OscConfig+0x4ec>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a56:	f7fe fd2b 	bl	80024b0 <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a5e:	f7fe fd27 	bl	80024b0 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e081      	b.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a70:	4b43      	ldr	r3, [pc, #268]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1f0      	bne.n	8003a5e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	69da      	ldr	r2, [r3, #28]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	431a      	orrs	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	019b      	lsls	r3, r3, #6
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a92:	085b      	lsrs	r3, r3, #1
 8003a94:	3b01      	subs	r3, #1
 8003a96:	041b      	lsls	r3, r3, #16
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9e:	061b      	lsls	r3, r3, #24
 8003aa0:	4937      	ldr	r1, [pc, #220]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aa6:	4b37      	ldr	r3, [pc, #220]	; (8003b84 <HAL_RCC_OscConfig+0x4ec>)
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aac:	f7fe fd00 	bl	80024b0 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ab4:	f7fe fcfc 	bl	80024b0 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e056      	b.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac6:	4b2e      	ldr	r3, [pc, #184]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0f0      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x41c>
 8003ad2:	e04e      	b.n	8003b72 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad4:	4b2b      	ldr	r3, [pc, #172]	; (8003b84 <HAL_RCC_OscConfig+0x4ec>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ada:	f7fe fce9 	bl	80024b0 <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae0:	e008      	b.n	8003af4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae2:	f7fe fce5 	bl	80024b0 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e03f      	b.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af4:	4b22      	ldr	r3, [pc, #136]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1f0      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x44a>
 8003b00:	e037      	b.n	8003b72 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d101      	bne.n	8003b0e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e032      	b.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b0e:	4b1c      	ldr	r3, [pc, #112]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d028      	beq.n	8003b6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d121      	bne.n	8003b6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d11a      	bne.n	8003b6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b3e:	4013      	ands	r3, r2
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b44:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d111      	bne.n	8003b6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	085b      	lsrs	r3, r3, #1
 8003b56:	3b01      	subs	r3, #1
 8003b58:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d107      	bne.n	8003b6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d001      	beq.n	8003b72 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3718      	adds	r7, #24
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40007000 	.word	0x40007000
 8003b80:	40023800 	.word	0x40023800
 8003b84:	42470060 	.word	0x42470060

08003b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e0cc      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b9c:	4b68      	ldr	r3, [pc, #416]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d90c      	bls.n	8003bc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003baa:	4b65      	ldr	r3, [pc, #404]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb2:	4b63      	ldr	r3, [pc, #396]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d001      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0b8      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d020      	beq.n	8003c12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d005      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bdc:	4b59      	ldr	r3, [pc, #356]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	4a58      	ldr	r2, [pc, #352]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003be6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bf4:	4b53      	ldr	r3, [pc, #332]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	4a52      	ldr	r2, [pc, #328]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c00:	4b50      	ldr	r3, [pc, #320]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	494d      	ldr	r1, [pc, #308]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d044      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d107      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c26:	4b47      	ldr	r3, [pc, #284]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d119      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e07f      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d003      	beq.n	8003c46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c42:	2b03      	cmp	r3, #3
 8003c44:	d107      	bne.n	8003c56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c46:	4b3f      	ldr	r3, [pc, #252]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d109      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e06f      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c56:	4b3b      	ldr	r3, [pc, #236]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e067      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c66:	4b37      	ldr	r3, [pc, #220]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f023 0203 	bic.w	r2, r3, #3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	4934      	ldr	r1, [pc, #208]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c78:	f7fe fc1a 	bl	80024b0 <HAL_GetTick>
 8003c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7e:	e00a      	b.n	8003c96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c80:	f7fe fc16 	bl	80024b0 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e04f      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c96:	4b2b      	ldr	r3, [pc, #172]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 020c 	and.w	r2, r3, #12
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d1eb      	bne.n	8003c80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca8:	4b25      	ldr	r3, [pc, #148]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d20c      	bcs.n	8003cd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb6:	4b22      	ldr	r3, [pc, #136]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	b2d2      	uxtb	r2, r2
 8003cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cbe:	4b20      	ldr	r3, [pc, #128]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d001      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e032      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cdc:	4b19      	ldr	r3, [pc, #100]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	4916      	ldr	r1, [pc, #88]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d009      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cfa:	4b12      	ldr	r3, [pc, #72]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	490e      	ldr	r1, [pc, #56]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d0e:	f000 f821 	bl	8003d54 <HAL_RCC_GetSysClockFreq>
 8003d12:	4602      	mov	r2, r0
 8003d14:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	091b      	lsrs	r3, r3, #4
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	490a      	ldr	r1, [pc, #40]	; (8003d48 <HAL_RCC_ClockConfig+0x1c0>)
 8003d20:	5ccb      	ldrb	r3, [r1, r3]
 8003d22:	fa22 f303 	lsr.w	r3, r2, r3
 8003d26:	4a09      	ldr	r2, [pc, #36]	; (8003d4c <HAL_RCC_ClockConfig+0x1c4>)
 8003d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d2a:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <HAL_RCC_ClockConfig+0x1c8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fe fb7a 	bl	8002428 <HAL_InitTick>

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	40023c00 	.word	0x40023c00
 8003d44:	40023800 	.word	0x40023800
 8003d48:	08005948 	.word	0x08005948
 8003d4c:	20000064 	.word	0x20000064
 8003d50:	20000068 	.word	0x20000068

08003d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d54:	b5b0      	push	{r4, r5, r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	6079      	str	r1, [r7, #4]
 8003d5e:	2100      	movs	r1, #0
 8003d60:	60f9      	str	r1, [r7, #12]
 8003d62:	2100      	movs	r1, #0
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003d66:	2100      	movs	r1, #0
 8003d68:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d6a:	4952      	ldr	r1, [pc, #328]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d6c:	6889      	ldr	r1, [r1, #8]
 8003d6e:	f001 010c 	and.w	r1, r1, #12
 8003d72:	2908      	cmp	r1, #8
 8003d74:	d00d      	beq.n	8003d92 <HAL_RCC_GetSysClockFreq+0x3e>
 8003d76:	2908      	cmp	r1, #8
 8003d78:	f200 8094 	bhi.w	8003ea4 <HAL_RCC_GetSysClockFreq+0x150>
 8003d7c:	2900      	cmp	r1, #0
 8003d7e:	d002      	beq.n	8003d86 <HAL_RCC_GetSysClockFreq+0x32>
 8003d80:	2904      	cmp	r1, #4
 8003d82:	d003      	beq.n	8003d8c <HAL_RCC_GetSysClockFreq+0x38>
 8003d84:	e08e      	b.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d86:	4b4c      	ldr	r3, [pc, #304]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003d88:	60bb      	str	r3, [r7, #8]
       break;
 8003d8a:	e08e      	b.n	8003eaa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d8c:	4b4b      	ldr	r3, [pc, #300]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x168>)
 8003d8e:	60bb      	str	r3, [r7, #8]
      break;
 8003d90:	e08b      	b.n	8003eaa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d92:	4948      	ldr	r1, [pc, #288]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d94:	6849      	ldr	r1, [r1, #4]
 8003d96:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003d9a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d9c:	4945      	ldr	r1, [pc, #276]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d9e:	6849      	ldr	r1, [r1, #4]
 8003da0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003da4:	2900      	cmp	r1, #0
 8003da6:	d024      	beq.n	8003df2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003da8:	4942      	ldr	r1, [pc, #264]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003daa:	6849      	ldr	r1, [r1, #4]
 8003dac:	0989      	lsrs	r1, r1, #6
 8003dae:	4608      	mov	r0, r1
 8003db0:	f04f 0100 	mov.w	r1, #0
 8003db4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003db8:	f04f 0500 	mov.w	r5, #0
 8003dbc:	ea00 0204 	and.w	r2, r0, r4
 8003dc0:	ea01 0305 	and.w	r3, r1, r5
 8003dc4:	493d      	ldr	r1, [pc, #244]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x168>)
 8003dc6:	fb01 f003 	mul.w	r0, r1, r3
 8003dca:	2100      	movs	r1, #0
 8003dcc:	fb01 f102 	mul.w	r1, r1, r2
 8003dd0:	1844      	adds	r4, r0, r1
 8003dd2:	493a      	ldr	r1, [pc, #232]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x168>)
 8003dd4:	fba2 0101 	umull	r0, r1, r2, r1
 8003dd8:	1863      	adds	r3, r4, r1
 8003dda:	4619      	mov	r1, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	461a      	mov	r2, r3
 8003de0:	f04f 0300 	mov.w	r3, #0
 8003de4:	f7fc fa4c 	bl	8000280 <__aeabi_uldivmod>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4613      	mov	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	e04a      	b.n	8003e88 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003df2:	4b30      	ldr	r3, [pc, #192]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	099b      	lsrs	r3, r3, #6
 8003df8:	461a      	mov	r2, r3
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e02:	f04f 0100 	mov.w	r1, #0
 8003e06:	ea02 0400 	and.w	r4, r2, r0
 8003e0a:	ea03 0501 	and.w	r5, r3, r1
 8003e0e:	4620      	mov	r0, r4
 8003e10:	4629      	mov	r1, r5
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	014b      	lsls	r3, r1, #5
 8003e1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e20:	0142      	lsls	r2, r0, #5
 8003e22:	4610      	mov	r0, r2
 8003e24:	4619      	mov	r1, r3
 8003e26:	1b00      	subs	r0, r0, r4
 8003e28:	eb61 0105 	sbc.w	r1, r1, r5
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	f04f 0300 	mov.w	r3, #0
 8003e34:	018b      	lsls	r3, r1, #6
 8003e36:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e3a:	0182      	lsls	r2, r0, #6
 8003e3c:	1a12      	subs	r2, r2, r0
 8003e3e:	eb63 0301 	sbc.w	r3, r3, r1
 8003e42:	f04f 0000 	mov.w	r0, #0
 8003e46:	f04f 0100 	mov.w	r1, #0
 8003e4a:	00d9      	lsls	r1, r3, #3
 8003e4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e50:	00d0      	lsls	r0, r2, #3
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	1912      	adds	r2, r2, r4
 8003e58:	eb45 0303 	adc.w	r3, r5, r3
 8003e5c:	f04f 0000 	mov.w	r0, #0
 8003e60:	f04f 0100 	mov.w	r1, #0
 8003e64:	0299      	lsls	r1, r3, #10
 8003e66:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003e6a:	0290      	lsls	r0, r2, #10
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	4610      	mov	r0, r2
 8003e72:	4619      	mov	r1, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	461a      	mov	r2, r3
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	f7fc fa00 	bl	8000280 <__aeabi_uldivmod>
 8003e80:	4602      	mov	r2, r0
 8003e82:	460b      	mov	r3, r1
 8003e84:	4613      	mov	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e88:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	0c1b      	lsrs	r3, r3, #16
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	3301      	adds	r3, #1
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea0:	60bb      	str	r3, [r7, #8]
      break;
 8003ea2:	e002      	b.n	8003eaa <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ea4:	4b04      	ldr	r3, [pc, #16]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003ea6:	60bb      	str	r3, [r7, #8]
      break;
 8003ea8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	00f42400 	.word	0x00f42400
 8003ebc:	017d7840 	.word	0x017d7840

08003ec0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e07b      	b.n	8003fca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d108      	bne.n	8003eec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ee2:	d009      	beq.n	8003ef8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	61da      	str	r2, [r3, #28]
 8003eea:	e005      	b.n	8003ef8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7fe f8b6 	bl	8002084 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f2e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f40:	431a      	orrs	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	431a      	orrs	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f7c:	ea42 0103 	orr.w	r1, r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f84:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	0c1b      	lsrs	r3, r3, #16
 8003f96:	f003 0104 	and.w	r1, r3, #4
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	f003 0210 	and.w	r2, r3, #16
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69da      	ldr	r2, [r3, #28]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fb8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b082      	sub	sp, #8
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e01a      	b.n	800401a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ffa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f7fe f889 	bl	8002114 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b088      	sub	sp, #32
 8004026:	af00      	add	r7, sp, #0
 8004028:	60f8      	str	r0, [r7, #12]
 800402a:	60b9      	str	r1, [r7, #8]
 800402c:	603b      	str	r3, [r7, #0]
 800402e:	4613      	mov	r3, r2
 8004030:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800403c:	2b01      	cmp	r3, #1
 800403e:	d101      	bne.n	8004044 <HAL_SPI_Transmit+0x22>
 8004040:	2302      	movs	r3, #2
 8004042:	e126      	b.n	8004292 <HAL_SPI_Transmit+0x270>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800404c:	f7fe fa30 	bl	80024b0 <HAL_GetTick>
 8004050:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004052:	88fb      	ldrh	r3, [r7, #6]
 8004054:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b01      	cmp	r3, #1
 8004060:	d002      	beq.n	8004068 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004062:	2302      	movs	r3, #2
 8004064:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004066:	e10b      	b.n	8004280 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d002      	beq.n	8004074 <HAL_SPI_Transmit+0x52>
 800406e:	88fb      	ldrh	r3, [r7, #6]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d102      	bne.n	800407a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004078:	e102      	b.n	8004280 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2203      	movs	r2, #3
 800407e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	88fa      	ldrh	r2, [r7, #6]
 8004092:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	88fa      	ldrh	r2, [r7, #6]
 8004098:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040c0:	d10f      	bne.n	80040e2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ec:	2b40      	cmp	r3, #64	; 0x40
 80040ee:	d007      	beq.n	8004100 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004108:	d14b      	bne.n	80041a2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d002      	beq.n	8004118 <HAL_SPI_Transmit+0xf6>
 8004112:	8afb      	ldrh	r3, [r7, #22]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d13e      	bne.n	8004196 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411c:	881a      	ldrh	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004128:	1c9a      	adds	r2, r3, #2
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004132:	b29b      	uxth	r3, r3
 8004134:	3b01      	subs	r3, #1
 8004136:	b29a      	uxth	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800413c:	e02b      	b.n	8004196 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b02      	cmp	r3, #2
 800414a:	d112      	bne.n	8004172 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004150:	881a      	ldrh	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	1c9a      	adds	r2, r3, #2
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004166:	b29b      	uxth	r3, r3
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004170:	e011      	b.n	8004196 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004172:	f7fe f99d 	bl	80024b0 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	429a      	cmp	r2, r3
 8004180:	d803      	bhi.n	800418a <HAL_SPI_Transmit+0x168>
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004188:	d102      	bne.n	8004190 <HAL_SPI_Transmit+0x16e>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d102      	bne.n	8004196 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004194:	e074      	b.n	8004280 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800419a:	b29b      	uxth	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1ce      	bne.n	800413e <HAL_SPI_Transmit+0x11c>
 80041a0:	e04c      	b.n	800423c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <HAL_SPI_Transmit+0x18e>
 80041aa:	8afb      	ldrh	r3, [r7, #22]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d140      	bne.n	8004232 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	330c      	adds	r3, #12
 80041ba:	7812      	ldrb	r2, [r2, #0]
 80041bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80041d6:	e02c      	b.n	8004232 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d113      	bne.n	800420e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	330c      	adds	r3, #12
 80041f0:	7812      	ldrb	r2, [r2, #0]
 80041f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004202:	b29b      	uxth	r3, r3
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	86da      	strh	r2, [r3, #54]	; 0x36
 800420c:	e011      	b.n	8004232 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800420e:	f7fe f94f 	bl	80024b0 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d803      	bhi.n	8004226 <HAL_SPI_Transmit+0x204>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004224:	d102      	bne.n	800422c <HAL_SPI_Transmit+0x20a>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d102      	bne.n	8004232 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004230:	e026      	b.n	8004280 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004236:	b29b      	uxth	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1cd      	bne.n	80041d8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	6839      	ldr	r1, [r7, #0]
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f000 fa55 	bl	80046f0 <SPI_EndRxTxTransaction>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2220      	movs	r2, #32
 8004250:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10a      	bne.n	8004270 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800425a:	2300      	movs	r3, #0
 800425c:	613b      	str	r3, [r7, #16]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	613b      	str	r3, [r7, #16]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	613b      	str	r3, [r7, #16]
 800426e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004274:	2b00      	cmp	r3, #0
 8004276:	d002      	beq.n	800427e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	77fb      	strb	r3, [r7, #31]
 800427c:	e000      	b.n	8004280 <HAL_SPI_Transmit+0x25e>
  }

error:
 800427e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004290:	7ffb      	ldrb	r3, [r7, #31]
}
 8004292:	4618      	mov	r0, r3
 8004294:	3720      	adds	r7, #32
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b08c      	sub	sp, #48	; 0x30
 800429e:	af00      	add	r7, sp, #0
 80042a0:	60f8      	str	r0, [r7, #12]
 80042a2:	60b9      	str	r1, [r7, #8]
 80042a4:	607a      	str	r2, [r7, #4]
 80042a6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80042a8:	2301      	movs	r3, #1
 80042aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80042ac:	2300      	movs	r3, #0
 80042ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_SPI_TransmitReceive+0x26>
 80042bc:	2302      	movs	r3, #2
 80042be:	e18a      	b.n	80045d6 <HAL_SPI_TransmitReceive+0x33c>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042c8:	f7fe f8f2 	bl	80024b0 <HAL_GetTick>
 80042cc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80042de:	887b      	ldrh	r3, [r7, #2]
 80042e0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d00f      	beq.n	800430a <HAL_SPI_TransmitReceive+0x70>
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042f0:	d107      	bne.n	8004302 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d103      	bne.n	8004302 <HAL_SPI_TransmitReceive+0x68>
 80042fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d003      	beq.n	800430a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004302:	2302      	movs	r3, #2
 8004304:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004308:	e15b      	b.n	80045c2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d005      	beq.n	800431c <HAL_SPI_TransmitReceive+0x82>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <HAL_SPI_TransmitReceive+0x82>
 8004316:	887b      	ldrh	r3, [r7, #2]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d103      	bne.n	8004324 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004322:	e14e      	b.n	80045c2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b04      	cmp	r3, #4
 800432e:	d003      	beq.n	8004338 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2205      	movs	r2, #5
 8004334:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	887a      	ldrh	r2, [r7, #2]
 8004348:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	887a      	ldrh	r2, [r7, #2]
 800434e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	887a      	ldrh	r2, [r7, #2]
 800435a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	887a      	ldrh	r2, [r7, #2]
 8004360:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004378:	2b40      	cmp	r3, #64	; 0x40
 800437a:	d007      	beq.n	800438c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800438a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004394:	d178      	bne.n	8004488 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <HAL_SPI_TransmitReceive+0x10a>
 800439e:	8b7b      	ldrh	r3, [r7, #26]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d166      	bne.n	8004472 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a8:	881a      	ldrh	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b4:	1c9a      	adds	r2, r3, #2
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043be:	b29b      	uxth	r3, r3
 80043c0:	3b01      	subs	r3, #1
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043c8:	e053      	b.n	8004472 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d11b      	bne.n	8004410 <HAL_SPI_TransmitReceive+0x176>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043dc:	b29b      	uxth	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d016      	beq.n	8004410 <HAL_SPI_TransmitReceive+0x176>
 80043e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d113      	bne.n	8004410 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ec:	881a      	ldrh	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f8:	1c9a      	adds	r2, r3, #2
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004402:	b29b      	uxth	r3, r3
 8004404:	3b01      	subs	r3, #1
 8004406:	b29a      	uxth	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800440c:	2300      	movs	r3, #0
 800440e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b01      	cmp	r3, #1
 800441c:	d119      	bne.n	8004452 <HAL_SPI_TransmitReceive+0x1b8>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004422:	b29b      	uxth	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	d014      	beq.n	8004452 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68da      	ldr	r2, [r3, #12]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004432:	b292      	uxth	r2, r2
 8004434:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443a:	1c9a      	adds	r2, r3, #2
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004444:	b29b      	uxth	r3, r3
 8004446:	3b01      	subs	r3, #1
 8004448:	b29a      	uxth	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800444e:	2301      	movs	r3, #1
 8004450:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004452:	f7fe f82d 	bl	80024b0 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800445e:	429a      	cmp	r2, r3
 8004460:	d807      	bhi.n	8004472 <HAL_SPI_TransmitReceive+0x1d8>
 8004462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004468:	d003      	beq.n	8004472 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004470:	e0a7      	b.n	80045c2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004476:	b29b      	uxth	r3, r3
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1a6      	bne.n	80043ca <HAL_SPI_TransmitReceive+0x130>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004480:	b29b      	uxth	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1a1      	bne.n	80043ca <HAL_SPI_TransmitReceive+0x130>
 8004486:	e07c      	b.n	8004582 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <HAL_SPI_TransmitReceive+0x1fc>
 8004490:	8b7b      	ldrh	r3, [r7, #26]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d16b      	bne.n	800456e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	330c      	adds	r3, #12
 80044a0:	7812      	ldrb	r2, [r2, #0]
 80044a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044bc:	e057      	b.n	800456e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d11c      	bne.n	8004506 <HAL_SPI_TransmitReceive+0x26c>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d017      	beq.n	8004506 <HAL_SPI_TransmitReceive+0x26c>
 80044d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d114      	bne.n	8004506 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	330c      	adds	r3, #12
 80044e6:	7812      	ldrb	r2, [r2, #0]
 80044e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004502:	2300      	movs	r3, #0
 8004504:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b01      	cmp	r3, #1
 8004512:	d119      	bne.n	8004548 <HAL_SPI_TransmitReceive+0x2ae>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004518:	b29b      	uxth	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d014      	beq.n	8004548 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68da      	ldr	r2, [r3, #12]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004528:	b2d2      	uxtb	r2, r2
 800452a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004530:	1c5a      	adds	r2, r3, #1
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800453a:	b29b      	uxth	r3, r3
 800453c:	3b01      	subs	r3, #1
 800453e:	b29a      	uxth	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004544:	2301      	movs	r3, #1
 8004546:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004548:	f7fd ffb2 	bl	80024b0 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004554:	429a      	cmp	r2, r3
 8004556:	d803      	bhi.n	8004560 <HAL_SPI_TransmitReceive+0x2c6>
 8004558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455e:	d102      	bne.n	8004566 <HAL_SPI_TransmitReceive+0x2cc>
 8004560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004562:	2b00      	cmp	r3, #0
 8004564:	d103      	bne.n	800456e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800456c:	e029      	b.n	80045c2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004572:	b29b      	uxth	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1a2      	bne.n	80044be <HAL_SPI_TransmitReceive+0x224>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800457c:	b29b      	uxth	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d19d      	bne.n	80044be <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004584:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 f8b2 	bl	80046f0 <SPI_EndRxTxTransaction>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d006      	beq.n	80045a0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2220      	movs	r2, #32
 800459c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800459e:	e010      	b.n	80045c2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10b      	bne.n	80045c0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	e000      	b.n	80045c2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80045c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3730      	adds	r7, #48	; 0x30
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
	...

080045e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	603b      	str	r3, [r7, #0]
 80045ec:	4613      	mov	r3, r2
 80045ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045f0:	f7fd ff5e 	bl	80024b0 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f8:	1a9b      	subs	r3, r3, r2
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	4413      	add	r3, r2
 80045fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004600:	f7fd ff56 	bl	80024b0 <HAL_GetTick>
 8004604:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004606:	4b39      	ldr	r3, [pc, #228]	; (80046ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	015b      	lsls	r3, r3, #5
 800460c:	0d1b      	lsrs	r3, r3, #20
 800460e:	69fa      	ldr	r2, [r7, #28]
 8004610:	fb02 f303 	mul.w	r3, r2, r3
 8004614:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004616:	e054      	b.n	80046c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461e:	d050      	beq.n	80046c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004620:	f7fd ff46 	bl	80024b0 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	69fa      	ldr	r2, [r7, #28]
 800462c:	429a      	cmp	r2, r3
 800462e:	d902      	bls.n	8004636 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d13d      	bne.n	80046b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004644:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800464e:	d111      	bne.n	8004674 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004658:	d004      	beq.n	8004664 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004662:	d107      	bne.n	8004674 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004672:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800467c:	d10f      	bne.n	800469e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800469c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e017      	b.n	80046e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	3b01      	subs	r3, #1
 80046c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	4013      	ands	r3, r2
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	bf0c      	ite	eq
 80046d2:	2301      	moveq	r3, #1
 80046d4:	2300      	movne	r3, #0
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	461a      	mov	r2, r3
 80046da:	79fb      	ldrb	r3, [r7, #7]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d19b      	bne.n	8004618 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3720      	adds	r7, #32
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	20000064 	.word	0x20000064

080046f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b088      	sub	sp, #32
 80046f4:	af02      	add	r7, sp, #8
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80046fc:	4b1b      	ldr	r3, [pc, #108]	; (800476c <SPI_EndRxTxTransaction+0x7c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a1b      	ldr	r2, [pc, #108]	; (8004770 <SPI_EndRxTxTransaction+0x80>)
 8004702:	fba2 2303 	umull	r2, r3, r2, r3
 8004706:	0d5b      	lsrs	r3, r3, #21
 8004708:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800470c:	fb02 f303 	mul.w	r3, r2, r3
 8004710:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800471a:	d112      	bne.n	8004742 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2200      	movs	r2, #0
 8004724:	2180      	movs	r1, #128	; 0x80
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f7ff ff5a 	bl	80045e0 <SPI_WaitFlagStateUntilTimeout>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d016      	beq.n	8004760 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004736:	f043 0220 	orr.w	r2, r3, #32
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e00f      	b.n	8004762 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00a      	beq.n	800475e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	3b01      	subs	r3, #1
 800474c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004758:	2b80      	cmp	r3, #128	; 0x80
 800475a:	d0f2      	beq.n	8004742 <SPI_EndRxTxTransaction+0x52>
 800475c:	e000      	b.n	8004760 <SPI_EndRxTxTransaction+0x70>
        break;
 800475e:	bf00      	nop
  }

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3718      	adds	r7, #24
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	20000064 	.word	0x20000064
 8004770:	165e9f81 	.word	0x165e9f81

08004774 <__errno>:
 8004774:	4b01      	ldr	r3, [pc, #4]	; (800477c <__errno+0x8>)
 8004776:	6818      	ldr	r0, [r3, #0]
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	20000070 	.word	0x20000070

08004780 <__libc_init_array>:
 8004780:	b570      	push	{r4, r5, r6, lr}
 8004782:	4d0d      	ldr	r5, [pc, #52]	; (80047b8 <__libc_init_array+0x38>)
 8004784:	4c0d      	ldr	r4, [pc, #52]	; (80047bc <__libc_init_array+0x3c>)
 8004786:	1b64      	subs	r4, r4, r5
 8004788:	10a4      	asrs	r4, r4, #2
 800478a:	2600      	movs	r6, #0
 800478c:	42a6      	cmp	r6, r4
 800478e:	d109      	bne.n	80047a4 <__libc_init_array+0x24>
 8004790:	4d0b      	ldr	r5, [pc, #44]	; (80047c0 <__libc_init_array+0x40>)
 8004792:	4c0c      	ldr	r4, [pc, #48]	; (80047c4 <__libc_init_array+0x44>)
 8004794:	f000 fc62 	bl	800505c <_init>
 8004798:	1b64      	subs	r4, r4, r5
 800479a:	10a4      	asrs	r4, r4, #2
 800479c:	2600      	movs	r6, #0
 800479e:	42a6      	cmp	r6, r4
 80047a0:	d105      	bne.n	80047ae <__libc_init_array+0x2e>
 80047a2:	bd70      	pop	{r4, r5, r6, pc}
 80047a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80047a8:	4798      	blx	r3
 80047aa:	3601      	adds	r6, #1
 80047ac:	e7ee      	b.n	800478c <__libc_init_array+0xc>
 80047ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80047b2:	4798      	blx	r3
 80047b4:	3601      	adds	r6, #1
 80047b6:	e7f2      	b.n	800479e <__libc_init_array+0x1e>
 80047b8:	0800599c 	.word	0x0800599c
 80047bc:	0800599c 	.word	0x0800599c
 80047c0:	0800599c 	.word	0x0800599c
 80047c4:	080059a0 	.word	0x080059a0

080047c8 <memset>:
 80047c8:	4402      	add	r2, r0
 80047ca:	4603      	mov	r3, r0
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d100      	bne.n	80047d2 <memset+0xa>
 80047d0:	4770      	bx	lr
 80047d2:	f803 1b01 	strb.w	r1, [r3], #1
 80047d6:	e7f9      	b.n	80047cc <memset+0x4>

080047d8 <sniprintf>:
 80047d8:	b40c      	push	{r2, r3}
 80047da:	b530      	push	{r4, r5, lr}
 80047dc:	4b17      	ldr	r3, [pc, #92]	; (800483c <sniprintf+0x64>)
 80047de:	1e0c      	subs	r4, r1, #0
 80047e0:	681d      	ldr	r5, [r3, #0]
 80047e2:	b09d      	sub	sp, #116	; 0x74
 80047e4:	da08      	bge.n	80047f8 <sniprintf+0x20>
 80047e6:	238b      	movs	r3, #139	; 0x8b
 80047e8:	602b      	str	r3, [r5, #0]
 80047ea:	f04f 30ff 	mov.w	r0, #4294967295
 80047ee:	b01d      	add	sp, #116	; 0x74
 80047f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047f4:	b002      	add	sp, #8
 80047f6:	4770      	bx	lr
 80047f8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80047fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004800:	bf14      	ite	ne
 8004802:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004806:	4623      	moveq	r3, r4
 8004808:	9304      	str	r3, [sp, #16]
 800480a:	9307      	str	r3, [sp, #28]
 800480c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004810:	9002      	str	r0, [sp, #8]
 8004812:	9006      	str	r0, [sp, #24]
 8004814:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004818:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800481a:	ab21      	add	r3, sp, #132	; 0x84
 800481c:	a902      	add	r1, sp, #8
 800481e:	4628      	mov	r0, r5
 8004820:	9301      	str	r3, [sp, #4]
 8004822:	f000 f869 	bl	80048f8 <_svfiprintf_r>
 8004826:	1c43      	adds	r3, r0, #1
 8004828:	bfbc      	itt	lt
 800482a:	238b      	movlt	r3, #139	; 0x8b
 800482c:	602b      	strlt	r3, [r5, #0]
 800482e:	2c00      	cmp	r4, #0
 8004830:	d0dd      	beq.n	80047ee <sniprintf+0x16>
 8004832:	9b02      	ldr	r3, [sp, #8]
 8004834:	2200      	movs	r2, #0
 8004836:	701a      	strb	r2, [r3, #0]
 8004838:	e7d9      	b.n	80047ee <sniprintf+0x16>
 800483a:	bf00      	nop
 800483c:	20000070 	.word	0x20000070

08004840 <__ssputs_r>:
 8004840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004844:	688e      	ldr	r6, [r1, #8]
 8004846:	429e      	cmp	r6, r3
 8004848:	4682      	mov	sl, r0
 800484a:	460c      	mov	r4, r1
 800484c:	4690      	mov	r8, r2
 800484e:	461f      	mov	r7, r3
 8004850:	d838      	bhi.n	80048c4 <__ssputs_r+0x84>
 8004852:	898a      	ldrh	r2, [r1, #12]
 8004854:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004858:	d032      	beq.n	80048c0 <__ssputs_r+0x80>
 800485a:	6825      	ldr	r5, [r4, #0]
 800485c:	6909      	ldr	r1, [r1, #16]
 800485e:	eba5 0901 	sub.w	r9, r5, r1
 8004862:	6965      	ldr	r5, [r4, #20]
 8004864:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004868:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800486c:	3301      	adds	r3, #1
 800486e:	444b      	add	r3, r9
 8004870:	106d      	asrs	r5, r5, #1
 8004872:	429d      	cmp	r5, r3
 8004874:	bf38      	it	cc
 8004876:	461d      	movcc	r5, r3
 8004878:	0553      	lsls	r3, r2, #21
 800487a:	d531      	bpl.n	80048e0 <__ssputs_r+0xa0>
 800487c:	4629      	mov	r1, r5
 800487e:	f000 fb47 	bl	8004f10 <_malloc_r>
 8004882:	4606      	mov	r6, r0
 8004884:	b950      	cbnz	r0, 800489c <__ssputs_r+0x5c>
 8004886:	230c      	movs	r3, #12
 8004888:	f8ca 3000 	str.w	r3, [sl]
 800488c:	89a3      	ldrh	r3, [r4, #12]
 800488e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004892:	81a3      	strh	r3, [r4, #12]
 8004894:	f04f 30ff 	mov.w	r0, #4294967295
 8004898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800489c:	6921      	ldr	r1, [r4, #16]
 800489e:	464a      	mov	r2, r9
 80048a0:	f000 fabe 	bl	8004e20 <memcpy>
 80048a4:	89a3      	ldrh	r3, [r4, #12]
 80048a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80048aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ae:	81a3      	strh	r3, [r4, #12]
 80048b0:	6126      	str	r6, [r4, #16]
 80048b2:	6165      	str	r5, [r4, #20]
 80048b4:	444e      	add	r6, r9
 80048b6:	eba5 0509 	sub.w	r5, r5, r9
 80048ba:	6026      	str	r6, [r4, #0]
 80048bc:	60a5      	str	r5, [r4, #8]
 80048be:	463e      	mov	r6, r7
 80048c0:	42be      	cmp	r6, r7
 80048c2:	d900      	bls.n	80048c6 <__ssputs_r+0x86>
 80048c4:	463e      	mov	r6, r7
 80048c6:	4632      	mov	r2, r6
 80048c8:	6820      	ldr	r0, [r4, #0]
 80048ca:	4641      	mov	r1, r8
 80048cc:	f000 fab6 	bl	8004e3c <memmove>
 80048d0:	68a3      	ldr	r3, [r4, #8]
 80048d2:	6822      	ldr	r2, [r4, #0]
 80048d4:	1b9b      	subs	r3, r3, r6
 80048d6:	4432      	add	r2, r6
 80048d8:	60a3      	str	r3, [r4, #8]
 80048da:	6022      	str	r2, [r4, #0]
 80048dc:	2000      	movs	r0, #0
 80048de:	e7db      	b.n	8004898 <__ssputs_r+0x58>
 80048e0:	462a      	mov	r2, r5
 80048e2:	f000 fb6f 	bl	8004fc4 <_realloc_r>
 80048e6:	4606      	mov	r6, r0
 80048e8:	2800      	cmp	r0, #0
 80048ea:	d1e1      	bne.n	80048b0 <__ssputs_r+0x70>
 80048ec:	6921      	ldr	r1, [r4, #16]
 80048ee:	4650      	mov	r0, sl
 80048f0:	f000 fabe 	bl	8004e70 <_free_r>
 80048f4:	e7c7      	b.n	8004886 <__ssputs_r+0x46>
	...

080048f8 <_svfiprintf_r>:
 80048f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048fc:	4698      	mov	r8, r3
 80048fe:	898b      	ldrh	r3, [r1, #12]
 8004900:	061b      	lsls	r3, r3, #24
 8004902:	b09d      	sub	sp, #116	; 0x74
 8004904:	4607      	mov	r7, r0
 8004906:	460d      	mov	r5, r1
 8004908:	4614      	mov	r4, r2
 800490a:	d50e      	bpl.n	800492a <_svfiprintf_r+0x32>
 800490c:	690b      	ldr	r3, [r1, #16]
 800490e:	b963      	cbnz	r3, 800492a <_svfiprintf_r+0x32>
 8004910:	2140      	movs	r1, #64	; 0x40
 8004912:	f000 fafd 	bl	8004f10 <_malloc_r>
 8004916:	6028      	str	r0, [r5, #0]
 8004918:	6128      	str	r0, [r5, #16]
 800491a:	b920      	cbnz	r0, 8004926 <_svfiprintf_r+0x2e>
 800491c:	230c      	movs	r3, #12
 800491e:	603b      	str	r3, [r7, #0]
 8004920:	f04f 30ff 	mov.w	r0, #4294967295
 8004924:	e0d1      	b.n	8004aca <_svfiprintf_r+0x1d2>
 8004926:	2340      	movs	r3, #64	; 0x40
 8004928:	616b      	str	r3, [r5, #20]
 800492a:	2300      	movs	r3, #0
 800492c:	9309      	str	r3, [sp, #36]	; 0x24
 800492e:	2320      	movs	r3, #32
 8004930:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004934:	f8cd 800c 	str.w	r8, [sp, #12]
 8004938:	2330      	movs	r3, #48	; 0x30
 800493a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004ae4 <_svfiprintf_r+0x1ec>
 800493e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004942:	f04f 0901 	mov.w	r9, #1
 8004946:	4623      	mov	r3, r4
 8004948:	469a      	mov	sl, r3
 800494a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800494e:	b10a      	cbz	r2, 8004954 <_svfiprintf_r+0x5c>
 8004950:	2a25      	cmp	r2, #37	; 0x25
 8004952:	d1f9      	bne.n	8004948 <_svfiprintf_r+0x50>
 8004954:	ebba 0b04 	subs.w	fp, sl, r4
 8004958:	d00b      	beq.n	8004972 <_svfiprintf_r+0x7a>
 800495a:	465b      	mov	r3, fp
 800495c:	4622      	mov	r2, r4
 800495e:	4629      	mov	r1, r5
 8004960:	4638      	mov	r0, r7
 8004962:	f7ff ff6d 	bl	8004840 <__ssputs_r>
 8004966:	3001      	adds	r0, #1
 8004968:	f000 80aa 	beq.w	8004ac0 <_svfiprintf_r+0x1c8>
 800496c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800496e:	445a      	add	r2, fp
 8004970:	9209      	str	r2, [sp, #36]	; 0x24
 8004972:	f89a 3000 	ldrb.w	r3, [sl]
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 80a2 	beq.w	8004ac0 <_svfiprintf_r+0x1c8>
 800497c:	2300      	movs	r3, #0
 800497e:	f04f 32ff 	mov.w	r2, #4294967295
 8004982:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004986:	f10a 0a01 	add.w	sl, sl, #1
 800498a:	9304      	str	r3, [sp, #16]
 800498c:	9307      	str	r3, [sp, #28]
 800498e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004992:	931a      	str	r3, [sp, #104]	; 0x68
 8004994:	4654      	mov	r4, sl
 8004996:	2205      	movs	r2, #5
 8004998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800499c:	4851      	ldr	r0, [pc, #324]	; (8004ae4 <_svfiprintf_r+0x1ec>)
 800499e:	f7fb fc1f 	bl	80001e0 <memchr>
 80049a2:	9a04      	ldr	r2, [sp, #16]
 80049a4:	b9d8      	cbnz	r0, 80049de <_svfiprintf_r+0xe6>
 80049a6:	06d0      	lsls	r0, r2, #27
 80049a8:	bf44      	itt	mi
 80049aa:	2320      	movmi	r3, #32
 80049ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049b0:	0711      	lsls	r1, r2, #28
 80049b2:	bf44      	itt	mi
 80049b4:	232b      	movmi	r3, #43	; 0x2b
 80049b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049ba:	f89a 3000 	ldrb.w	r3, [sl]
 80049be:	2b2a      	cmp	r3, #42	; 0x2a
 80049c0:	d015      	beq.n	80049ee <_svfiprintf_r+0xf6>
 80049c2:	9a07      	ldr	r2, [sp, #28]
 80049c4:	4654      	mov	r4, sl
 80049c6:	2000      	movs	r0, #0
 80049c8:	f04f 0c0a 	mov.w	ip, #10
 80049cc:	4621      	mov	r1, r4
 80049ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049d2:	3b30      	subs	r3, #48	; 0x30
 80049d4:	2b09      	cmp	r3, #9
 80049d6:	d94e      	bls.n	8004a76 <_svfiprintf_r+0x17e>
 80049d8:	b1b0      	cbz	r0, 8004a08 <_svfiprintf_r+0x110>
 80049da:	9207      	str	r2, [sp, #28]
 80049dc:	e014      	b.n	8004a08 <_svfiprintf_r+0x110>
 80049de:	eba0 0308 	sub.w	r3, r0, r8
 80049e2:	fa09 f303 	lsl.w	r3, r9, r3
 80049e6:	4313      	orrs	r3, r2
 80049e8:	9304      	str	r3, [sp, #16]
 80049ea:	46a2      	mov	sl, r4
 80049ec:	e7d2      	b.n	8004994 <_svfiprintf_r+0x9c>
 80049ee:	9b03      	ldr	r3, [sp, #12]
 80049f0:	1d19      	adds	r1, r3, #4
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	9103      	str	r1, [sp, #12]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	bfbb      	ittet	lt
 80049fa:	425b      	neglt	r3, r3
 80049fc:	f042 0202 	orrlt.w	r2, r2, #2
 8004a00:	9307      	strge	r3, [sp, #28]
 8004a02:	9307      	strlt	r3, [sp, #28]
 8004a04:	bfb8      	it	lt
 8004a06:	9204      	strlt	r2, [sp, #16]
 8004a08:	7823      	ldrb	r3, [r4, #0]
 8004a0a:	2b2e      	cmp	r3, #46	; 0x2e
 8004a0c:	d10c      	bne.n	8004a28 <_svfiprintf_r+0x130>
 8004a0e:	7863      	ldrb	r3, [r4, #1]
 8004a10:	2b2a      	cmp	r3, #42	; 0x2a
 8004a12:	d135      	bne.n	8004a80 <_svfiprintf_r+0x188>
 8004a14:	9b03      	ldr	r3, [sp, #12]
 8004a16:	1d1a      	adds	r2, r3, #4
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	9203      	str	r2, [sp, #12]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	bfb8      	it	lt
 8004a20:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a24:	3402      	adds	r4, #2
 8004a26:	9305      	str	r3, [sp, #20]
 8004a28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004af4 <_svfiprintf_r+0x1fc>
 8004a2c:	7821      	ldrb	r1, [r4, #0]
 8004a2e:	2203      	movs	r2, #3
 8004a30:	4650      	mov	r0, sl
 8004a32:	f7fb fbd5 	bl	80001e0 <memchr>
 8004a36:	b140      	cbz	r0, 8004a4a <_svfiprintf_r+0x152>
 8004a38:	2340      	movs	r3, #64	; 0x40
 8004a3a:	eba0 000a 	sub.w	r0, r0, sl
 8004a3e:	fa03 f000 	lsl.w	r0, r3, r0
 8004a42:	9b04      	ldr	r3, [sp, #16]
 8004a44:	4303      	orrs	r3, r0
 8004a46:	3401      	adds	r4, #1
 8004a48:	9304      	str	r3, [sp, #16]
 8004a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a4e:	4826      	ldr	r0, [pc, #152]	; (8004ae8 <_svfiprintf_r+0x1f0>)
 8004a50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a54:	2206      	movs	r2, #6
 8004a56:	f7fb fbc3 	bl	80001e0 <memchr>
 8004a5a:	2800      	cmp	r0, #0
 8004a5c:	d038      	beq.n	8004ad0 <_svfiprintf_r+0x1d8>
 8004a5e:	4b23      	ldr	r3, [pc, #140]	; (8004aec <_svfiprintf_r+0x1f4>)
 8004a60:	bb1b      	cbnz	r3, 8004aaa <_svfiprintf_r+0x1b2>
 8004a62:	9b03      	ldr	r3, [sp, #12]
 8004a64:	3307      	adds	r3, #7
 8004a66:	f023 0307 	bic.w	r3, r3, #7
 8004a6a:	3308      	adds	r3, #8
 8004a6c:	9303      	str	r3, [sp, #12]
 8004a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a70:	4433      	add	r3, r6
 8004a72:	9309      	str	r3, [sp, #36]	; 0x24
 8004a74:	e767      	b.n	8004946 <_svfiprintf_r+0x4e>
 8004a76:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a7a:	460c      	mov	r4, r1
 8004a7c:	2001      	movs	r0, #1
 8004a7e:	e7a5      	b.n	80049cc <_svfiprintf_r+0xd4>
 8004a80:	2300      	movs	r3, #0
 8004a82:	3401      	adds	r4, #1
 8004a84:	9305      	str	r3, [sp, #20]
 8004a86:	4619      	mov	r1, r3
 8004a88:	f04f 0c0a 	mov.w	ip, #10
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a92:	3a30      	subs	r2, #48	; 0x30
 8004a94:	2a09      	cmp	r2, #9
 8004a96:	d903      	bls.n	8004aa0 <_svfiprintf_r+0x1a8>
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d0c5      	beq.n	8004a28 <_svfiprintf_r+0x130>
 8004a9c:	9105      	str	r1, [sp, #20]
 8004a9e:	e7c3      	b.n	8004a28 <_svfiprintf_r+0x130>
 8004aa0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004aa4:	4604      	mov	r4, r0
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e7f0      	b.n	8004a8c <_svfiprintf_r+0x194>
 8004aaa:	ab03      	add	r3, sp, #12
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	462a      	mov	r2, r5
 8004ab0:	4b0f      	ldr	r3, [pc, #60]	; (8004af0 <_svfiprintf_r+0x1f8>)
 8004ab2:	a904      	add	r1, sp, #16
 8004ab4:	4638      	mov	r0, r7
 8004ab6:	f3af 8000 	nop.w
 8004aba:	1c42      	adds	r2, r0, #1
 8004abc:	4606      	mov	r6, r0
 8004abe:	d1d6      	bne.n	8004a6e <_svfiprintf_r+0x176>
 8004ac0:	89ab      	ldrh	r3, [r5, #12]
 8004ac2:	065b      	lsls	r3, r3, #25
 8004ac4:	f53f af2c 	bmi.w	8004920 <_svfiprintf_r+0x28>
 8004ac8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004aca:	b01d      	add	sp, #116	; 0x74
 8004acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ad0:	ab03      	add	r3, sp, #12
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	462a      	mov	r2, r5
 8004ad6:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <_svfiprintf_r+0x1f8>)
 8004ad8:	a904      	add	r1, sp, #16
 8004ada:	4638      	mov	r0, r7
 8004adc:	f000 f87a 	bl	8004bd4 <_printf_i>
 8004ae0:	e7eb      	b.n	8004aba <_svfiprintf_r+0x1c2>
 8004ae2:	bf00      	nop
 8004ae4:	0800595e 	.word	0x0800595e
 8004ae8:	08005968 	.word	0x08005968
 8004aec:	00000000 	.word	0x00000000
 8004af0:	08004841 	.word	0x08004841
 8004af4:	08005964 	.word	0x08005964

08004af8 <_printf_common>:
 8004af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004afc:	4616      	mov	r6, r2
 8004afe:	4699      	mov	r9, r3
 8004b00:	688a      	ldr	r2, [r1, #8]
 8004b02:	690b      	ldr	r3, [r1, #16]
 8004b04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	bfb8      	it	lt
 8004b0c:	4613      	movlt	r3, r2
 8004b0e:	6033      	str	r3, [r6, #0]
 8004b10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b14:	4607      	mov	r7, r0
 8004b16:	460c      	mov	r4, r1
 8004b18:	b10a      	cbz	r2, 8004b1e <_printf_common+0x26>
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	6033      	str	r3, [r6, #0]
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	0699      	lsls	r1, r3, #26
 8004b22:	bf42      	ittt	mi
 8004b24:	6833      	ldrmi	r3, [r6, #0]
 8004b26:	3302      	addmi	r3, #2
 8004b28:	6033      	strmi	r3, [r6, #0]
 8004b2a:	6825      	ldr	r5, [r4, #0]
 8004b2c:	f015 0506 	ands.w	r5, r5, #6
 8004b30:	d106      	bne.n	8004b40 <_printf_common+0x48>
 8004b32:	f104 0a19 	add.w	sl, r4, #25
 8004b36:	68e3      	ldr	r3, [r4, #12]
 8004b38:	6832      	ldr	r2, [r6, #0]
 8004b3a:	1a9b      	subs	r3, r3, r2
 8004b3c:	42ab      	cmp	r3, r5
 8004b3e:	dc26      	bgt.n	8004b8e <_printf_common+0x96>
 8004b40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b44:	1e13      	subs	r3, r2, #0
 8004b46:	6822      	ldr	r2, [r4, #0]
 8004b48:	bf18      	it	ne
 8004b4a:	2301      	movne	r3, #1
 8004b4c:	0692      	lsls	r2, r2, #26
 8004b4e:	d42b      	bmi.n	8004ba8 <_printf_common+0xb0>
 8004b50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b54:	4649      	mov	r1, r9
 8004b56:	4638      	mov	r0, r7
 8004b58:	47c0      	blx	r8
 8004b5a:	3001      	adds	r0, #1
 8004b5c:	d01e      	beq.n	8004b9c <_printf_common+0xa4>
 8004b5e:	6823      	ldr	r3, [r4, #0]
 8004b60:	68e5      	ldr	r5, [r4, #12]
 8004b62:	6832      	ldr	r2, [r6, #0]
 8004b64:	f003 0306 	and.w	r3, r3, #6
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	bf08      	it	eq
 8004b6c:	1aad      	subeq	r5, r5, r2
 8004b6e:	68a3      	ldr	r3, [r4, #8]
 8004b70:	6922      	ldr	r2, [r4, #16]
 8004b72:	bf0c      	ite	eq
 8004b74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b78:	2500      	movne	r5, #0
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	bfc4      	itt	gt
 8004b7e:	1a9b      	subgt	r3, r3, r2
 8004b80:	18ed      	addgt	r5, r5, r3
 8004b82:	2600      	movs	r6, #0
 8004b84:	341a      	adds	r4, #26
 8004b86:	42b5      	cmp	r5, r6
 8004b88:	d11a      	bne.n	8004bc0 <_printf_common+0xc8>
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	e008      	b.n	8004ba0 <_printf_common+0xa8>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	4652      	mov	r2, sl
 8004b92:	4649      	mov	r1, r9
 8004b94:	4638      	mov	r0, r7
 8004b96:	47c0      	blx	r8
 8004b98:	3001      	adds	r0, #1
 8004b9a:	d103      	bne.n	8004ba4 <_printf_common+0xac>
 8004b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba4:	3501      	adds	r5, #1
 8004ba6:	e7c6      	b.n	8004b36 <_printf_common+0x3e>
 8004ba8:	18e1      	adds	r1, r4, r3
 8004baa:	1c5a      	adds	r2, r3, #1
 8004bac:	2030      	movs	r0, #48	; 0x30
 8004bae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bb2:	4422      	add	r2, r4
 8004bb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bbc:	3302      	adds	r3, #2
 8004bbe:	e7c7      	b.n	8004b50 <_printf_common+0x58>
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	4622      	mov	r2, r4
 8004bc4:	4649      	mov	r1, r9
 8004bc6:	4638      	mov	r0, r7
 8004bc8:	47c0      	blx	r8
 8004bca:	3001      	adds	r0, #1
 8004bcc:	d0e6      	beq.n	8004b9c <_printf_common+0xa4>
 8004bce:	3601      	adds	r6, #1
 8004bd0:	e7d9      	b.n	8004b86 <_printf_common+0x8e>
	...

08004bd4 <_printf_i>:
 8004bd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd8:	460c      	mov	r4, r1
 8004bda:	4691      	mov	r9, r2
 8004bdc:	7e27      	ldrb	r7, [r4, #24]
 8004bde:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004be0:	2f78      	cmp	r7, #120	; 0x78
 8004be2:	4680      	mov	r8, r0
 8004be4:	469a      	mov	sl, r3
 8004be6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bea:	d807      	bhi.n	8004bfc <_printf_i+0x28>
 8004bec:	2f62      	cmp	r7, #98	; 0x62
 8004bee:	d80a      	bhi.n	8004c06 <_printf_i+0x32>
 8004bf0:	2f00      	cmp	r7, #0
 8004bf2:	f000 80d8 	beq.w	8004da6 <_printf_i+0x1d2>
 8004bf6:	2f58      	cmp	r7, #88	; 0x58
 8004bf8:	f000 80a3 	beq.w	8004d42 <_printf_i+0x16e>
 8004bfc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c04:	e03a      	b.n	8004c7c <_printf_i+0xa8>
 8004c06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c0a:	2b15      	cmp	r3, #21
 8004c0c:	d8f6      	bhi.n	8004bfc <_printf_i+0x28>
 8004c0e:	a001      	add	r0, pc, #4	; (adr r0, 8004c14 <_printf_i+0x40>)
 8004c10:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004c14:	08004c6d 	.word	0x08004c6d
 8004c18:	08004c81 	.word	0x08004c81
 8004c1c:	08004bfd 	.word	0x08004bfd
 8004c20:	08004bfd 	.word	0x08004bfd
 8004c24:	08004bfd 	.word	0x08004bfd
 8004c28:	08004bfd 	.word	0x08004bfd
 8004c2c:	08004c81 	.word	0x08004c81
 8004c30:	08004bfd 	.word	0x08004bfd
 8004c34:	08004bfd 	.word	0x08004bfd
 8004c38:	08004bfd 	.word	0x08004bfd
 8004c3c:	08004bfd 	.word	0x08004bfd
 8004c40:	08004d8d 	.word	0x08004d8d
 8004c44:	08004cb1 	.word	0x08004cb1
 8004c48:	08004d6f 	.word	0x08004d6f
 8004c4c:	08004bfd 	.word	0x08004bfd
 8004c50:	08004bfd 	.word	0x08004bfd
 8004c54:	08004daf 	.word	0x08004daf
 8004c58:	08004bfd 	.word	0x08004bfd
 8004c5c:	08004cb1 	.word	0x08004cb1
 8004c60:	08004bfd 	.word	0x08004bfd
 8004c64:	08004bfd 	.word	0x08004bfd
 8004c68:	08004d77 	.word	0x08004d77
 8004c6c:	680b      	ldr	r3, [r1, #0]
 8004c6e:	1d1a      	adds	r2, r3, #4
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	600a      	str	r2, [r1, #0]
 8004c74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e0a3      	b.n	8004dc8 <_printf_i+0x1f4>
 8004c80:	6825      	ldr	r5, [r4, #0]
 8004c82:	6808      	ldr	r0, [r1, #0]
 8004c84:	062e      	lsls	r6, r5, #24
 8004c86:	f100 0304 	add.w	r3, r0, #4
 8004c8a:	d50a      	bpl.n	8004ca2 <_printf_i+0xce>
 8004c8c:	6805      	ldr	r5, [r0, #0]
 8004c8e:	600b      	str	r3, [r1, #0]
 8004c90:	2d00      	cmp	r5, #0
 8004c92:	da03      	bge.n	8004c9c <_printf_i+0xc8>
 8004c94:	232d      	movs	r3, #45	; 0x2d
 8004c96:	426d      	negs	r5, r5
 8004c98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c9c:	485e      	ldr	r0, [pc, #376]	; (8004e18 <_printf_i+0x244>)
 8004c9e:	230a      	movs	r3, #10
 8004ca0:	e019      	b.n	8004cd6 <_printf_i+0x102>
 8004ca2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004ca6:	6805      	ldr	r5, [r0, #0]
 8004ca8:	600b      	str	r3, [r1, #0]
 8004caa:	bf18      	it	ne
 8004cac:	b22d      	sxthne	r5, r5
 8004cae:	e7ef      	b.n	8004c90 <_printf_i+0xbc>
 8004cb0:	680b      	ldr	r3, [r1, #0]
 8004cb2:	6825      	ldr	r5, [r4, #0]
 8004cb4:	1d18      	adds	r0, r3, #4
 8004cb6:	6008      	str	r0, [r1, #0]
 8004cb8:	0628      	lsls	r0, r5, #24
 8004cba:	d501      	bpl.n	8004cc0 <_printf_i+0xec>
 8004cbc:	681d      	ldr	r5, [r3, #0]
 8004cbe:	e002      	b.n	8004cc6 <_printf_i+0xf2>
 8004cc0:	0669      	lsls	r1, r5, #25
 8004cc2:	d5fb      	bpl.n	8004cbc <_printf_i+0xe8>
 8004cc4:	881d      	ldrh	r5, [r3, #0]
 8004cc6:	4854      	ldr	r0, [pc, #336]	; (8004e18 <_printf_i+0x244>)
 8004cc8:	2f6f      	cmp	r7, #111	; 0x6f
 8004cca:	bf0c      	ite	eq
 8004ccc:	2308      	moveq	r3, #8
 8004cce:	230a      	movne	r3, #10
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cd6:	6866      	ldr	r6, [r4, #4]
 8004cd8:	60a6      	str	r6, [r4, #8]
 8004cda:	2e00      	cmp	r6, #0
 8004cdc:	bfa2      	ittt	ge
 8004cde:	6821      	ldrge	r1, [r4, #0]
 8004ce0:	f021 0104 	bicge.w	r1, r1, #4
 8004ce4:	6021      	strge	r1, [r4, #0]
 8004ce6:	b90d      	cbnz	r5, 8004cec <_printf_i+0x118>
 8004ce8:	2e00      	cmp	r6, #0
 8004cea:	d04d      	beq.n	8004d88 <_printf_i+0x1b4>
 8004cec:	4616      	mov	r6, r2
 8004cee:	fbb5 f1f3 	udiv	r1, r5, r3
 8004cf2:	fb03 5711 	mls	r7, r3, r1, r5
 8004cf6:	5dc7      	ldrb	r7, [r0, r7]
 8004cf8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004cfc:	462f      	mov	r7, r5
 8004cfe:	42bb      	cmp	r3, r7
 8004d00:	460d      	mov	r5, r1
 8004d02:	d9f4      	bls.n	8004cee <_printf_i+0x11a>
 8004d04:	2b08      	cmp	r3, #8
 8004d06:	d10b      	bne.n	8004d20 <_printf_i+0x14c>
 8004d08:	6823      	ldr	r3, [r4, #0]
 8004d0a:	07df      	lsls	r7, r3, #31
 8004d0c:	d508      	bpl.n	8004d20 <_printf_i+0x14c>
 8004d0e:	6923      	ldr	r3, [r4, #16]
 8004d10:	6861      	ldr	r1, [r4, #4]
 8004d12:	4299      	cmp	r1, r3
 8004d14:	bfde      	ittt	le
 8004d16:	2330      	movle	r3, #48	; 0x30
 8004d18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d20:	1b92      	subs	r2, r2, r6
 8004d22:	6122      	str	r2, [r4, #16]
 8004d24:	f8cd a000 	str.w	sl, [sp]
 8004d28:	464b      	mov	r3, r9
 8004d2a:	aa03      	add	r2, sp, #12
 8004d2c:	4621      	mov	r1, r4
 8004d2e:	4640      	mov	r0, r8
 8004d30:	f7ff fee2 	bl	8004af8 <_printf_common>
 8004d34:	3001      	adds	r0, #1
 8004d36:	d14c      	bne.n	8004dd2 <_printf_i+0x1fe>
 8004d38:	f04f 30ff 	mov.w	r0, #4294967295
 8004d3c:	b004      	add	sp, #16
 8004d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d42:	4835      	ldr	r0, [pc, #212]	; (8004e18 <_printf_i+0x244>)
 8004d44:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d48:	6823      	ldr	r3, [r4, #0]
 8004d4a:	680e      	ldr	r6, [r1, #0]
 8004d4c:	061f      	lsls	r7, r3, #24
 8004d4e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004d52:	600e      	str	r6, [r1, #0]
 8004d54:	d514      	bpl.n	8004d80 <_printf_i+0x1ac>
 8004d56:	07d9      	lsls	r1, r3, #31
 8004d58:	bf44      	itt	mi
 8004d5a:	f043 0320 	orrmi.w	r3, r3, #32
 8004d5e:	6023      	strmi	r3, [r4, #0]
 8004d60:	b91d      	cbnz	r5, 8004d6a <_printf_i+0x196>
 8004d62:	6823      	ldr	r3, [r4, #0]
 8004d64:	f023 0320 	bic.w	r3, r3, #32
 8004d68:	6023      	str	r3, [r4, #0]
 8004d6a:	2310      	movs	r3, #16
 8004d6c:	e7b0      	b.n	8004cd0 <_printf_i+0xfc>
 8004d6e:	6823      	ldr	r3, [r4, #0]
 8004d70:	f043 0320 	orr.w	r3, r3, #32
 8004d74:	6023      	str	r3, [r4, #0]
 8004d76:	2378      	movs	r3, #120	; 0x78
 8004d78:	4828      	ldr	r0, [pc, #160]	; (8004e1c <_printf_i+0x248>)
 8004d7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d7e:	e7e3      	b.n	8004d48 <_printf_i+0x174>
 8004d80:	065e      	lsls	r6, r3, #25
 8004d82:	bf48      	it	mi
 8004d84:	b2ad      	uxthmi	r5, r5
 8004d86:	e7e6      	b.n	8004d56 <_printf_i+0x182>
 8004d88:	4616      	mov	r6, r2
 8004d8a:	e7bb      	b.n	8004d04 <_printf_i+0x130>
 8004d8c:	680b      	ldr	r3, [r1, #0]
 8004d8e:	6826      	ldr	r6, [r4, #0]
 8004d90:	6960      	ldr	r0, [r4, #20]
 8004d92:	1d1d      	adds	r5, r3, #4
 8004d94:	600d      	str	r5, [r1, #0]
 8004d96:	0635      	lsls	r5, r6, #24
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	d501      	bpl.n	8004da0 <_printf_i+0x1cc>
 8004d9c:	6018      	str	r0, [r3, #0]
 8004d9e:	e002      	b.n	8004da6 <_printf_i+0x1d2>
 8004da0:	0671      	lsls	r1, r6, #25
 8004da2:	d5fb      	bpl.n	8004d9c <_printf_i+0x1c8>
 8004da4:	8018      	strh	r0, [r3, #0]
 8004da6:	2300      	movs	r3, #0
 8004da8:	6123      	str	r3, [r4, #16]
 8004daa:	4616      	mov	r6, r2
 8004dac:	e7ba      	b.n	8004d24 <_printf_i+0x150>
 8004dae:	680b      	ldr	r3, [r1, #0]
 8004db0:	1d1a      	adds	r2, r3, #4
 8004db2:	600a      	str	r2, [r1, #0]
 8004db4:	681e      	ldr	r6, [r3, #0]
 8004db6:	6862      	ldr	r2, [r4, #4]
 8004db8:	2100      	movs	r1, #0
 8004dba:	4630      	mov	r0, r6
 8004dbc:	f7fb fa10 	bl	80001e0 <memchr>
 8004dc0:	b108      	cbz	r0, 8004dc6 <_printf_i+0x1f2>
 8004dc2:	1b80      	subs	r0, r0, r6
 8004dc4:	6060      	str	r0, [r4, #4]
 8004dc6:	6863      	ldr	r3, [r4, #4]
 8004dc8:	6123      	str	r3, [r4, #16]
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dd0:	e7a8      	b.n	8004d24 <_printf_i+0x150>
 8004dd2:	6923      	ldr	r3, [r4, #16]
 8004dd4:	4632      	mov	r2, r6
 8004dd6:	4649      	mov	r1, r9
 8004dd8:	4640      	mov	r0, r8
 8004dda:	47d0      	blx	sl
 8004ddc:	3001      	adds	r0, #1
 8004dde:	d0ab      	beq.n	8004d38 <_printf_i+0x164>
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	079b      	lsls	r3, r3, #30
 8004de4:	d413      	bmi.n	8004e0e <_printf_i+0x23a>
 8004de6:	68e0      	ldr	r0, [r4, #12]
 8004de8:	9b03      	ldr	r3, [sp, #12]
 8004dea:	4298      	cmp	r0, r3
 8004dec:	bfb8      	it	lt
 8004dee:	4618      	movlt	r0, r3
 8004df0:	e7a4      	b.n	8004d3c <_printf_i+0x168>
 8004df2:	2301      	movs	r3, #1
 8004df4:	4632      	mov	r2, r6
 8004df6:	4649      	mov	r1, r9
 8004df8:	4640      	mov	r0, r8
 8004dfa:	47d0      	blx	sl
 8004dfc:	3001      	adds	r0, #1
 8004dfe:	d09b      	beq.n	8004d38 <_printf_i+0x164>
 8004e00:	3501      	adds	r5, #1
 8004e02:	68e3      	ldr	r3, [r4, #12]
 8004e04:	9903      	ldr	r1, [sp, #12]
 8004e06:	1a5b      	subs	r3, r3, r1
 8004e08:	42ab      	cmp	r3, r5
 8004e0a:	dcf2      	bgt.n	8004df2 <_printf_i+0x21e>
 8004e0c:	e7eb      	b.n	8004de6 <_printf_i+0x212>
 8004e0e:	2500      	movs	r5, #0
 8004e10:	f104 0619 	add.w	r6, r4, #25
 8004e14:	e7f5      	b.n	8004e02 <_printf_i+0x22e>
 8004e16:	bf00      	nop
 8004e18:	0800596f 	.word	0x0800596f
 8004e1c:	08005980 	.word	0x08005980

08004e20 <memcpy>:
 8004e20:	440a      	add	r2, r1
 8004e22:	4291      	cmp	r1, r2
 8004e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e28:	d100      	bne.n	8004e2c <memcpy+0xc>
 8004e2a:	4770      	bx	lr
 8004e2c:	b510      	push	{r4, lr}
 8004e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e36:	4291      	cmp	r1, r2
 8004e38:	d1f9      	bne.n	8004e2e <memcpy+0xe>
 8004e3a:	bd10      	pop	{r4, pc}

08004e3c <memmove>:
 8004e3c:	4288      	cmp	r0, r1
 8004e3e:	b510      	push	{r4, lr}
 8004e40:	eb01 0402 	add.w	r4, r1, r2
 8004e44:	d902      	bls.n	8004e4c <memmove+0x10>
 8004e46:	4284      	cmp	r4, r0
 8004e48:	4623      	mov	r3, r4
 8004e4a:	d807      	bhi.n	8004e5c <memmove+0x20>
 8004e4c:	1e43      	subs	r3, r0, #1
 8004e4e:	42a1      	cmp	r1, r4
 8004e50:	d008      	beq.n	8004e64 <memmove+0x28>
 8004e52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e5a:	e7f8      	b.n	8004e4e <memmove+0x12>
 8004e5c:	4402      	add	r2, r0
 8004e5e:	4601      	mov	r1, r0
 8004e60:	428a      	cmp	r2, r1
 8004e62:	d100      	bne.n	8004e66 <memmove+0x2a>
 8004e64:	bd10      	pop	{r4, pc}
 8004e66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e6e:	e7f7      	b.n	8004e60 <memmove+0x24>

08004e70 <_free_r>:
 8004e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e72:	2900      	cmp	r1, #0
 8004e74:	d048      	beq.n	8004f08 <_free_r+0x98>
 8004e76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e7a:	9001      	str	r0, [sp, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f1a1 0404 	sub.w	r4, r1, #4
 8004e82:	bfb8      	it	lt
 8004e84:	18e4      	addlt	r4, r4, r3
 8004e86:	f000 f8d3 	bl	8005030 <__malloc_lock>
 8004e8a:	4a20      	ldr	r2, [pc, #128]	; (8004f0c <_free_r+0x9c>)
 8004e8c:	9801      	ldr	r0, [sp, #4]
 8004e8e:	6813      	ldr	r3, [r2, #0]
 8004e90:	4615      	mov	r5, r2
 8004e92:	b933      	cbnz	r3, 8004ea2 <_free_r+0x32>
 8004e94:	6063      	str	r3, [r4, #4]
 8004e96:	6014      	str	r4, [r2, #0]
 8004e98:	b003      	add	sp, #12
 8004e9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e9e:	f000 b8cd 	b.w	800503c <__malloc_unlock>
 8004ea2:	42a3      	cmp	r3, r4
 8004ea4:	d90b      	bls.n	8004ebe <_free_r+0x4e>
 8004ea6:	6821      	ldr	r1, [r4, #0]
 8004ea8:	1862      	adds	r2, r4, r1
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	bf04      	itt	eq
 8004eae:	681a      	ldreq	r2, [r3, #0]
 8004eb0:	685b      	ldreq	r3, [r3, #4]
 8004eb2:	6063      	str	r3, [r4, #4]
 8004eb4:	bf04      	itt	eq
 8004eb6:	1852      	addeq	r2, r2, r1
 8004eb8:	6022      	streq	r2, [r4, #0]
 8004eba:	602c      	str	r4, [r5, #0]
 8004ebc:	e7ec      	b.n	8004e98 <_free_r+0x28>
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	b10b      	cbz	r3, 8004ec8 <_free_r+0x58>
 8004ec4:	42a3      	cmp	r3, r4
 8004ec6:	d9fa      	bls.n	8004ebe <_free_r+0x4e>
 8004ec8:	6811      	ldr	r1, [r2, #0]
 8004eca:	1855      	adds	r5, r2, r1
 8004ecc:	42a5      	cmp	r5, r4
 8004ece:	d10b      	bne.n	8004ee8 <_free_r+0x78>
 8004ed0:	6824      	ldr	r4, [r4, #0]
 8004ed2:	4421      	add	r1, r4
 8004ed4:	1854      	adds	r4, r2, r1
 8004ed6:	42a3      	cmp	r3, r4
 8004ed8:	6011      	str	r1, [r2, #0]
 8004eda:	d1dd      	bne.n	8004e98 <_free_r+0x28>
 8004edc:	681c      	ldr	r4, [r3, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	6053      	str	r3, [r2, #4]
 8004ee2:	4421      	add	r1, r4
 8004ee4:	6011      	str	r1, [r2, #0]
 8004ee6:	e7d7      	b.n	8004e98 <_free_r+0x28>
 8004ee8:	d902      	bls.n	8004ef0 <_free_r+0x80>
 8004eea:	230c      	movs	r3, #12
 8004eec:	6003      	str	r3, [r0, #0]
 8004eee:	e7d3      	b.n	8004e98 <_free_r+0x28>
 8004ef0:	6825      	ldr	r5, [r4, #0]
 8004ef2:	1961      	adds	r1, r4, r5
 8004ef4:	428b      	cmp	r3, r1
 8004ef6:	bf04      	itt	eq
 8004ef8:	6819      	ldreq	r1, [r3, #0]
 8004efa:	685b      	ldreq	r3, [r3, #4]
 8004efc:	6063      	str	r3, [r4, #4]
 8004efe:	bf04      	itt	eq
 8004f00:	1949      	addeq	r1, r1, r5
 8004f02:	6021      	streq	r1, [r4, #0]
 8004f04:	6054      	str	r4, [r2, #4]
 8004f06:	e7c7      	b.n	8004e98 <_free_r+0x28>
 8004f08:	b003      	add	sp, #12
 8004f0a:	bd30      	pop	{r4, r5, pc}
 8004f0c:	20000150 	.word	0x20000150

08004f10 <_malloc_r>:
 8004f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f12:	1ccd      	adds	r5, r1, #3
 8004f14:	f025 0503 	bic.w	r5, r5, #3
 8004f18:	3508      	adds	r5, #8
 8004f1a:	2d0c      	cmp	r5, #12
 8004f1c:	bf38      	it	cc
 8004f1e:	250c      	movcc	r5, #12
 8004f20:	2d00      	cmp	r5, #0
 8004f22:	4606      	mov	r6, r0
 8004f24:	db01      	blt.n	8004f2a <_malloc_r+0x1a>
 8004f26:	42a9      	cmp	r1, r5
 8004f28:	d903      	bls.n	8004f32 <_malloc_r+0x22>
 8004f2a:	230c      	movs	r3, #12
 8004f2c:	6033      	str	r3, [r6, #0]
 8004f2e:	2000      	movs	r0, #0
 8004f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f32:	f000 f87d 	bl	8005030 <__malloc_lock>
 8004f36:	4921      	ldr	r1, [pc, #132]	; (8004fbc <_malloc_r+0xac>)
 8004f38:	680a      	ldr	r2, [r1, #0]
 8004f3a:	4614      	mov	r4, r2
 8004f3c:	b99c      	cbnz	r4, 8004f66 <_malloc_r+0x56>
 8004f3e:	4f20      	ldr	r7, [pc, #128]	; (8004fc0 <_malloc_r+0xb0>)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	b923      	cbnz	r3, 8004f4e <_malloc_r+0x3e>
 8004f44:	4621      	mov	r1, r4
 8004f46:	4630      	mov	r0, r6
 8004f48:	f000 f862 	bl	8005010 <_sbrk_r>
 8004f4c:	6038      	str	r0, [r7, #0]
 8004f4e:	4629      	mov	r1, r5
 8004f50:	4630      	mov	r0, r6
 8004f52:	f000 f85d 	bl	8005010 <_sbrk_r>
 8004f56:	1c43      	adds	r3, r0, #1
 8004f58:	d123      	bne.n	8004fa2 <_malloc_r+0x92>
 8004f5a:	230c      	movs	r3, #12
 8004f5c:	6033      	str	r3, [r6, #0]
 8004f5e:	4630      	mov	r0, r6
 8004f60:	f000 f86c 	bl	800503c <__malloc_unlock>
 8004f64:	e7e3      	b.n	8004f2e <_malloc_r+0x1e>
 8004f66:	6823      	ldr	r3, [r4, #0]
 8004f68:	1b5b      	subs	r3, r3, r5
 8004f6a:	d417      	bmi.n	8004f9c <_malloc_r+0x8c>
 8004f6c:	2b0b      	cmp	r3, #11
 8004f6e:	d903      	bls.n	8004f78 <_malloc_r+0x68>
 8004f70:	6023      	str	r3, [r4, #0]
 8004f72:	441c      	add	r4, r3
 8004f74:	6025      	str	r5, [r4, #0]
 8004f76:	e004      	b.n	8004f82 <_malloc_r+0x72>
 8004f78:	6863      	ldr	r3, [r4, #4]
 8004f7a:	42a2      	cmp	r2, r4
 8004f7c:	bf0c      	ite	eq
 8004f7e:	600b      	streq	r3, [r1, #0]
 8004f80:	6053      	strne	r3, [r2, #4]
 8004f82:	4630      	mov	r0, r6
 8004f84:	f000 f85a 	bl	800503c <__malloc_unlock>
 8004f88:	f104 000b 	add.w	r0, r4, #11
 8004f8c:	1d23      	adds	r3, r4, #4
 8004f8e:	f020 0007 	bic.w	r0, r0, #7
 8004f92:	1ac2      	subs	r2, r0, r3
 8004f94:	d0cc      	beq.n	8004f30 <_malloc_r+0x20>
 8004f96:	1a1b      	subs	r3, r3, r0
 8004f98:	50a3      	str	r3, [r4, r2]
 8004f9a:	e7c9      	b.n	8004f30 <_malloc_r+0x20>
 8004f9c:	4622      	mov	r2, r4
 8004f9e:	6864      	ldr	r4, [r4, #4]
 8004fa0:	e7cc      	b.n	8004f3c <_malloc_r+0x2c>
 8004fa2:	1cc4      	adds	r4, r0, #3
 8004fa4:	f024 0403 	bic.w	r4, r4, #3
 8004fa8:	42a0      	cmp	r0, r4
 8004faa:	d0e3      	beq.n	8004f74 <_malloc_r+0x64>
 8004fac:	1a21      	subs	r1, r4, r0
 8004fae:	4630      	mov	r0, r6
 8004fb0:	f000 f82e 	bl	8005010 <_sbrk_r>
 8004fb4:	3001      	adds	r0, #1
 8004fb6:	d1dd      	bne.n	8004f74 <_malloc_r+0x64>
 8004fb8:	e7cf      	b.n	8004f5a <_malloc_r+0x4a>
 8004fba:	bf00      	nop
 8004fbc:	20000150 	.word	0x20000150
 8004fc0:	20000154 	.word	0x20000154

08004fc4 <_realloc_r>:
 8004fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fc6:	4607      	mov	r7, r0
 8004fc8:	4614      	mov	r4, r2
 8004fca:	460e      	mov	r6, r1
 8004fcc:	b921      	cbnz	r1, 8004fd8 <_realloc_r+0x14>
 8004fce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004fd2:	4611      	mov	r1, r2
 8004fd4:	f7ff bf9c 	b.w	8004f10 <_malloc_r>
 8004fd8:	b922      	cbnz	r2, 8004fe4 <_realloc_r+0x20>
 8004fda:	f7ff ff49 	bl	8004e70 <_free_r>
 8004fde:	4625      	mov	r5, r4
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fe4:	f000 f830 	bl	8005048 <_malloc_usable_size_r>
 8004fe8:	42a0      	cmp	r0, r4
 8004fea:	d20f      	bcs.n	800500c <_realloc_r+0x48>
 8004fec:	4621      	mov	r1, r4
 8004fee:	4638      	mov	r0, r7
 8004ff0:	f7ff ff8e 	bl	8004f10 <_malloc_r>
 8004ff4:	4605      	mov	r5, r0
 8004ff6:	2800      	cmp	r0, #0
 8004ff8:	d0f2      	beq.n	8004fe0 <_realloc_r+0x1c>
 8004ffa:	4631      	mov	r1, r6
 8004ffc:	4622      	mov	r2, r4
 8004ffe:	f7ff ff0f 	bl	8004e20 <memcpy>
 8005002:	4631      	mov	r1, r6
 8005004:	4638      	mov	r0, r7
 8005006:	f7ff ff33 	bl	8004e70 <_free_r>
 800500a:	e7e9      	b.n	8004fe0 <_realloc_r+0x1c>
 800500c:	4635      	mov	r5, r6
 800500e:	e7e7      	b.n	8004fe0 <_realloc_r+0x1c>

08005010 <_sbrk_r>:
 8005010:	b538      	push	{r3, r4, r5, lr}
 8005012:	4d06      	ldr	r5, [pc, #24]	; (800502c <_sbrk_r+0x1c>)
 8005014:	2300      	movs	r3, #0
 8005016:	4604      	mov	r4, r0
 8005018:	4608      	mov	r0, r1
 800501a:	602b      	str	r3, [r5, #0]
 800501c:	f7fd f8cc 	bl	80021b8 <_sbrk>
 8005020:	1c43      	adds	r3, r0, #1
 8005022:	d102      	bne.n	800502a <_sbrk_r+0x1a>
 8005024:	682b      	ldr	r3, [r5, #0]
 8005026:	b103      	cbz	r3, 800502a <_sbrk_r+0x1a>
 8005028:	6023      	str	r3, [r4, #0]
 800502a:	bd38      	pop	{r3, r4, r5, pc}
 800502c:	20000214 	.word	0x20000214

08005030 <__malloc_lock>:
 8005030:	4801      	ldr	r0, [pc, #4]	; (8005038 <__malloc_lock+0x8>)
 8005032:	f000 b811 	b.w	8005058 <__retarget_lock_acquire_recursive>
 8005036:	bf00      	nop
 8005038:	2000021c 	.word	0x2000021c

0800503c <__malloc_unlock>:
 800503c:	4801      	ldr	r0, [pc, #4]	; (8005044 <__malloc_unlock+0x8>)
 800503e:	f000 b80c 	b.w	800505a <__retarget_lock_release_recursive>
 8005042:	bf00      	nop
 8005044:	2000021c 	.word	0x2000021c

08005048 <_malloc_usable_size_r>:
 8005048:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800504c:	1f18      	subs	r0, r3, #4
 800504e:	2b00      	cmp	r3, #0
 8005050:	bfbc      	itt	lt
 8005052:	580b      	ldrlt	r3, [r1, r0]
 8005054:	18c0      	addlt	r0, r0, r3
 8005056:	4770      	bx	lr

08005058 <__retarget_lock_acquire_recursive>:
 8005058:	4770      	bx	lr

0800505a <__retarget_lock_release_recursive>:
 800505a:	4770      	bx	lr

0800505c <_init>:
 800505c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800505e:	bf00      	nop
 8005060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005062:	bc08      	pop	{r3}
 8005064:	469e      	mov	lr, r3
 8005066:	4770      	bx	lr

08005068 <_fini>:
 8005068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800506a:	bf00      	nop
 800506c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800506e:	bc08      	pop	{r3}
 8005070:	469e      	mov	lr, r3
 8005072:	4770      	bx	lr
